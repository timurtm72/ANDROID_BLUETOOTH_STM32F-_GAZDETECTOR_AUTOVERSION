;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 11.07.2019 19:30:18
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0x0FFC2000  	536875004
0x0004	0x35F10000  	13809
0x0008	0x356D0000  	13677
0x000C	0x356D0000  	13677
0x0010	0x356D0000  	13677
0x0014	0x356D0000  	13677
0x0018	0x356D0000  	13677
0x001C	0x356D0000  	13677
0x0020	0x356D0000  	13677
0x0024	0x356D0000  	13677
0x0028	0x356D0000  	13677
0x002C	0x356D0000  	13677
0x0030	0x356D0000  	13677
0x0034	0x356D0000  	13677
0x0038	0x356D0000  	13677
0x003C	0x356D0000  	13677
0x0040	0x356D0000  	13677
0x0044	0x356D0000  	13677
0x0048	0x356D0000  	13677
0x004C	0x356D0000  	13677
0x0050	0x356D0000  	13677
0x0054	0x356D0000  	13677
0x0058	0x356D0000  	13677
0x005C	0x356D0000  	13677
0x0060	0x356D0000  	13677
0x0064	0x356D0000  	13677
0x0068	0x356D0000  	13677
0x006C	0x356D0000  	13677
0x0070	0x356D0000  	13677
0x0074	0x356D0000  	13677
0x0078	0x356D0000  	13677
0x007C	0x356D0000  	13677
0x0080	0x35750000  	13685
0x0084	0x356D0000  	13677
0x0088	0x356D0000  	13677
0x008C	0x356D0000  	13677
0x0090	0x356D0000  	13677
0x0094	0x356D0000  	13677
0x0098	0x356D0000  	13677
0x009C	0x356D0000  	13677
0x00A0	0x356D0000  	13677
0x00A4	0x356D0000  	13677
0x00A8	0x356D0000  	13677
0x00AC	0x35910000  	13713
0x00B0	0x356D0000  	13677
0x00B4	0x356D0000  	13677
0x00B8	0x356D0000  	13677
0x00BC	0x356D0000  	13677
; end of ____SysVT
_main:
;main.c, 3 :: 		void main()
0x35F0	0xF000F81C  BL	13868
0x35F4	0xF000FCC2  BL	16252
0x35F8	0xF000F8A6  BL	14152
0x35FC	0xF000F9A6  BL	14668
;main.c, 6 :: 		Init_flags();
0x3600	0xF7FFFD7C  BL	_Init_flags+0
;main.c, 7 :: 		InitVar();
0x3604	0xF7FFFDF0  BL	_InitVar+0
;main.c, 8 :: 		Init_pin();
0x3608	0xF7FFFE0E  BL	_Init_pin+0
;main.c, 9 :: 		Init_ADC_chanell();
0x360C	0xF7FFFF9E  BL	_Init_ADC_chanell+0
;main.c, 10 :: 		StartTimer3_10ms();
0x3610	0xF7FFFF40  BL	_StartTimer3_10ms+0
;main.c, 11 :: 		InitUartModuleBTU();
0x3614	0xF7FFFF6A  BL	_InitUartModuleBTU+0
;main.c, 12 :: 		EnableInterrupts();
0x3618	0xF7FFFE2A  BL	_EnableInterrupts+0
;main.c, 13 :: 		WDT_Init();
0x361C	0xF7FFFF0E  BL	_WDT_Init+0
;main.c, 14 :: 		ChekTrue();
0x3620	0xF7FFFF7C  BL	_ChekTrue+0
;main.c, 15 :: 		while(TRUE)
L_main0:
;main.c, 17 :: 		globalProcess();
0x3624	0xF7FFFE8C  BL	_globalProcess+0
;main.c, 18 :: 		}
0x3628	0xE7FC    B	L_main0
;main.c, 19 :: 		}
L_end_main:
L__main_end_loop:
0x362A	0xE7FE    B	L__main_end_loop
; end of _main
_EnableInterrupts:
;__Lib_System.c, 115 :: 		
0x3270	0xB500    PUSH	(R14)
;__Lib_System.c, 118 :: 		
0x3272	0xF3EF8710  MRS	R7, #16
0x3276	0x4638    MOV	R0, R7
; result start address is: 0 (R0)
;__Lib_System.c, 119 :: 		
0x3278	0xB662    CPSIE	i
;__Lib_System.c, 121 :: 		
; result end address is: 0 (R0)
;__Lib_System.c, 122 :: 		
L_end_EnableInterrupts:
0x327A	0xBD00    POP	(R15)
; end of _EnableInterrupts
___FillZeros:
;__Lib_System.c, 77 :: 		
0x327C	0xB081    SUB	SP, SP, #4
;__Lib_System.c, 79 :: 		
0x327E	0x2400    MOVS	R4, #0
;__Lib_System.c, 80 :: 		
0x3280	0x2700    MOVS	R7, #0
;__Lib_System.c, 81 :: 		
0x3282	0x45AD    CMP	SP, R5
;__Lib_System.c, 82 :: 		
0x3284	0xDC03    BGT	L_loopFZs
;__Lib_System.c, 83 :: 		
0x3286	0x45B5    CMP	SP, R6
;__Lib_System.c, 84 :: 		
0x3288	0xDB01    BLT	L_loopFZs
;__Lib_System.c, 85 :: 		
0x328A	0x462F    MOV	R7, R5
;__Lib_System.c, 86 :: 		
0x328C	0x466D    MOV	R5, SP
;__Lib_System.c, 87 :: 		
L_loopFZs:
;__Lib_System.c, 88 :: 		
0x328E	0x6034    STR	R4, [R6, #0]
;__Lib_System.c, 89 :: 		
0x3290	0x1D36    ADDS	R6, R6, #4
;__Lib_System.c, 90 :: 		
0x3292	0x42AE    CMP	R6, R5
;__Lib_System.c, 91 :: 		
0x3294	0xD1FB    BNE	L_loopFZs
;__Lib_System.c, 92 :: 		
0x3296	0x42AF    CMP	R7, R5
;__Lib_System.c, 93 :: 		
0x3298	0xDD03    BLE	L_norep
;__Lib_System.c, 94 :: 		
0x329A	0x463D    MOV	R5, R7
;__Lib_System.c, 95 :: 		
0x329C	0x6826    LDR	R6, [R4, #0]
;__Lib_System.c, 96 :: 		
0x329E	0x1D36    ADDS	R6, R6, #4
;__Lib_System.c, 97 :: 		
0x32A0	0xE7F5    B	L_loopFZs
;__Lib_System.c, 98 :: 		
L_norep:
;__Lib_System.c, 100 :: 		
L_end___FillZeros:
0x32A2	0xB001    ADD	SP, SP, #4
0x32A4	0x4770    BX	LR
; end of ___FillZeros
_Init_flags:
;init_func.c, 34 :: 		void Init_flags()
;init_func.c, 36 :: 		flag_t.ovf_flag                                       = 0;
0x30FC	0x2000    MOVS	R0, #0
0x30FE	0x4A23    LDR	R2, [PC, #140]
0x3100	0x7010    STRB	R0, [R2, #0]
;init_func.c, 37 :: 		flag_t.board_sensor_status                            = 0;
0x3102	0x2100    MOVS	R1, #0
0x3104	0x4822    LDR	R0, [PC, #136]
0x3106	0x7001    STRB	R1, [R0, #0]
;init_func.c, 38 :: 		flag_t.forward_sensor_status                          = 0;
0x3108	0x2100    MOVS	R1, #0
0x310A	0x4822    LDR	R0, [PC, #136]
0x310C	0x7001    STRB	R1, [R0, #0]
;init_func.c, 39 :: 		flag_t.backward_sensor_status                         = 0;
0x310E	0x2100    MOVS	R1, #0
0x3110	0x4821    LDR	R0, [PC, #132]
0x3112	0x7001    STRB	R1, [R0, #0]
;init_func.c, 40 :: 		flag_t.cal_button_status                              = 1;
0x3114	0x2101    MOVS	R1, #1
0x3116	0x4821    LDR	R0, [PC, #132]
0x3118	0x7001    STRB	R1, [R0, #0]
;init_func.c, 41 :: 		flag_t.start_sensor_control                           = 0;
0x311A	0x2100    MOVS	R1, #0
0x311C	0x4820    LDR	R0, [PC, #128]
0x311E	0x7001    STRB	R1, [R0, #0]
;init_func.c, 42 :: 		flag_t.heater_status                                  = 0;
0x3120	0x2100    MOVS	R1, #0
0x3122	0x4820    LDR	R0, [PC, #128]
0x3124	0x7001    STRB	R1, [R0, #0]
;init_func.c, 43 :: 		flag_t.ready_calibration_prog                         = 0;
0x3126	0x2100    MOVS	R1, #0
0x3128	0x481F    LDR	R0, [PC, #124]
0x312A	0x7001    STRB	R1, [R0, #0]
;init_func.c, 44 :: 		flag_t.alarm_enable_status                            = 0;
0x312C	0x2100    MOVS	R1, #0
0x312E	0x481F    LDR	R0, [PC, #124]
0x3130	0x7001    STRB	R1, [R0, #0]
;init_func.c, 45 :: 		flag_t.board_sensor_damage                            = 1;
0x3132	0x2101    MOVS	R1, #1
0x3134	0x481E    LDR	R0, [PC, #120]
0x3136	0x7001    STRB	R1, [R0, #0]
;init_func.c, 46 :: 		flag_t.forward_sensor_damage                          = 1;
0x3138	0x2101    MOVS	R1, #1
0x313A	0x481E    LDR	R0, [PC, #120]
0x313C	0x7001    STRB	R1, [R0, #0]
;init_func.c, 47 :: 		flag_t.backward_sensor_damage                         = 1;
0x313E	0x2101    MOVS	R1, #1
0x3140	0x481D    LDR	R0, [PC, #116]
0x3142	0x7001    STRB	R1, [R0, #0]
;init_func.c, 48 :: 		flag_t.calibrate_status                               = 0;
0x3144	0x2100    MOVS	R1, #0
0x3146	0x481D    LDR	R0, [PC, #116]
0x3148	0x7001    STRB	R1, [R0, #0]
;init_func.c, 49 :: 		flag_t.ovf_flag                                       = 0;
0x314A	0x2000    MOVS	R0, #0
0x314C	0x7010    STRB	R0, [R2, #0]
;init_func.c, 50 :: 		flag_t.board_cal_status                               = 0;
0x314E	0x2100    MOVS	R1, #0
0x3150	0x481B    LDR	R0, [PC, #108]
0x3152	0x7001    STRB	R1, [R0, #0]
;init_func.c, 51 :: 		flag_t.forward_cal_status                             = 0;
0x3154	0x2100    MOVS	R1, #0
0x3156	0x481B    LDR	R0, [PC, #108]
0x3158	0x7001    STRB	R1, [R0, #0]
;init_func.c, 52 :: 		flag_t.backward_cal_status                            = 0;
0x315A	0x2100    MOVS	R1, #0
0x315C	0x481A    LDR	R0, [PC, #104]
0x315E	0x7001    STRB	R1, [R0, #0]
;init_func.c, 53 :: 		flag_t.enable_status                                  = 0;
0x3160	0x2100    MOVS	R1, #0
0x3162	0x481A    LDR	R0, [PC, #104]
0x3164	0x7001    STRB	R1, [R0, #0]
;init_func.c, 54 :: 		flag_t.request_uart_status                            = 0;
0x3166	0x2100    MOVS	R1, #0
0x3168	0x4819    LDR	R0, [PC, #100]
0x316A	0x7001    STRB	R1, [R0, #0]
;init_func.c, 55 :: 		flag_t.start_process_status                           = 0;
0x316C	0x2100    MOVS	R1, #0
0x316E	0x4819    LDR	R0, [PC, #100]
0x3170	0x7001    STRB	R1, [R0, #0]
;init_func.c, 56 :: 		flag_t.response_status                                = 0;
0x3172	0x2100    MOVS	R1, #0
0x3174	0x4818    LDR	R0, [PC, #96]
0x3176	0x7001    STRB	R1, [R0, #0]
;init_func.c, 57 :: 		flag_t.process_start_status                           = 0;
0x3178	0x2100    MOVS	R1, #0
0x317A	0x4818    LDR	R0, [PC, #96]
0x317C	0x7001    STRB	R1, [R0, #0]
;init_func.c, 58 :: 		flag_t.first_start                                    = 1;
0x317E	0x2101    MOVS	R1, #1
0x3180	0x4817    LDR	R0, [PC, #92]
0x3182	0x7001    STRB	R1, [R0, #0]
;init_func.c, 59 :: 		flag_t.alarm_sensor_status                            = 0;
0x3184	0x2100    MOVS	R1, #0
0x3186	0x4817    LDR	R0, [PC, #92]
0x3188	0x7001    STRB	R1, [R0, #0]
;init_func.c, 60 :: 		}
L_end_Init_flags:
0x318A	0x4770    BX	LR
0x318C	0x01662000  	_flag_t+0
0x3190	0x01672000  	_flag_t+1
0x3194	0x01682000  	_flag_t+2
0x3198	0x01692000  	_flag_t+3
0x319C	0x016A2000  	_flag_t+4
0x31A0	0x016B2000  	_flag_t+5
0x31A4	0x016C2000  	_flag_t+6
0x31A8	0x016D2000  	_flag_t+7
0x31AC	0x016E2000  	_flag_t+8
0x31B0	0x016F2000  	_flag_t+9
0x31B4	0x01702000  	_flag_t+10
0x31B8	0x01712000  	_flag_t+11
0x31BC	0x01722000  	_flag_t+12
0x31C0	0x01742000  	_flag_t+14
0x31C4	0x01752000  	_flag_t+15
0x31C8	0x01762000  	_flag_t+16
0x31CC	0x01772000  	_flag_t+17
0x31D0	0x01782000  	_flag_t+18
0x31D4	0x01792000  	_flag_t+19
0x31D8	0x017A2000  	_flag_t+20
0x31DC	0x017B2000  	_flag_t+21
0x31E0	0x017C2000  	_flag_t+22
0x31E4	0x017D2000  	_flag_t+23
; end of _Init_flags
_InitVar:
;init_func.c, 75 :: 		void InitVar()
;init_func.c, 77 :: 		parameters_t.forward_sensor_v0_cal_data            = 0;
0x31E8	0x2100    MOVS	R1, #0
0x31EA	0x4809    LDR	R0, [PC, #36]
0x31EC	0x8001    STRH	R1, [R0, #0]
;init_func.c, 78 :: 		parameters_t.backward_sensor_v0_cal_data           = 0;
0x31EE	0x2100    MOVS	R1, #0
0x31F0	0x4808    LDR	R0, [PC, #32]
0x31F2	0x8001    STRH	R1, [R0, #0]
;init_func.c, 79 :: 		parameters_t.board_sensor_v0_cal_data              = 0;
0x31F4	0x2100    MOVS	R1, #0
0x31F6	0x4808    LDR	R0, [PC, #32]
0x31F8	0x8001    STRH	R1, [R0, #0]
;init_func.c, 80 :: 		parameters_t.forward_sensor_cal_data               = 0;
0x31FA	0x2100    MOVS	R1, #0
0x31FC	0x4807    LDR	R0, [PC, #28]
0x31FE	0x8001    STRH	R1, [R0, #0]
;init_func.c, 81 :: 		parameters_t.backward_sensor_cal_data              = 0;
0x3200	0x2100    MOVS	R1, #0
0x3202	0x4807    LDR	R0, [PC, #28]
0x3204	0x8001    STRH	R1, [R0, #0]
;init_func.c, 82 :: 		parameters_t.board_sensor_cal_data                 = 0;
0x3206	0x2100    MOVS	R1, #0
0x3208	0x4806    LDR	R0, [PC, #24]
0x320A	0x8001    STRH	R1, [R0, #0]
;init_func.c, 86 :: 		}
L_end_InitVar:
0x320C	0x4770    BX	LR
0x320E	0xBF00    NOP
0x3210	0x017E2000  	_parameters_t+0
0x3214	0x01802000  	_parameters_t+2
0x3218	0x01822000  	_parameters_t+4
0x321C	0x01842000  	_parameters_t+6
0x3220	0x01862000  	_parameters_t+8
0x3224	0x01882000  	_parameters_t+10
; end of _InitVar
_Init_pin:
;init_func.c, 19 :: 		void Init_pin()
0x3228	0xB500    PUSH	(R14)
;init_func.c, 22 :: 		GPIO_Config(&GPIOB_BASE, _GPIO_PINMASK_4|_GPIO_PINMASK_5|_GPIO_PINMASK_6,_GPIO_CFG_DIGITAL_OUTPUT);
0x322A	0x4A0D    LDR	R2, [PC, #52]
0x322C	0x2170    MOVS	R1, #112
0x322E	0x480D    LDR	R0, [PC, #52]
0x3230	0xF7FEFEE0  BL	_GPIO_Config+0
;init_func.c, 24 :: 		GPIO_Config(&GPIOA_BASE,_GPIO_PINMASK_8,_GPIO_CFG_MODE_INPUT | _GPIO_CFG_PULL_UP);
0x3234	0x2282    MOVS	R2, #130
0x3236	0x21FF    MOVS	R1, #255
0x3238	0x3101    ADDS	R1, #1
0x323A	0x480B    LDR	R0, [PC, #44]
0x323C	0xF7FEFEDA  BL	_GPIO_Config+0
;init_func.c, 27 :: 		GPIO_Config(&GPIOB_BASE, _GPIO_PINMASK_1,_GPIO_CFG_DIGITAL_OUTPUT);
0x3240	0x4A07    LDR	R2, [PC, #28]
0x3242	0x2102    MOVS	R1, #2
0x3244	0x4807    LDR	R0, [PC, #28]
0x3246	0xF7FEFED5  BL	_GPIO_Config+0
;init_func.c, 29 :: 		GPIO_Config(&GPIOB_BASE,_GPIO_PINMASK_0|_GPIO_PINMASK_3,_GPIO_CFG_DIGITAL_OUTPUT);
0x324A	0x4A05    LDR	R2, [PC, #20]
0x324C	0x2109    MOVS	R1, #9
0x324E	0x4805    LDR	R0, [PC, #20]
0x3250	0xF7FEFED0  BL	_GPIO_Config+0
;init_func.c, 31 :: 		GPIO_Config(&GPIOA_BASE,_GPIO_PINMASK_11,_GPIO_CFG_DIGITAL_OUTPUT);
0x3254	0x4A02    LDR	R2, [PC, #8]
0x3256	0x4905    LDR	R1, [PC, #20]
0x3258	0x4803    LDR	R0, [PC, #12]
0x325A	0xF7FEFECB  BL	_GPIO_Config+0
;init_func.c, 32 :: 		}
L_end_Init_pin:
0x325E	0xBD00    POP	(R15)
0x3260	0x00140008  	#524308
0x3264	0x04004800  	#1207960576
0x3268	0x00004800  	#1207959552
0x326C	0x08000000  	#2048
; end of _Init_pin
_GPIO_Config:
;__Lib_GPIO_32F0xx.c, 251 :: 		
; port start address is: 0 (R0)
0x1FF4	0xB500    PUSH	(R14)
0x1FF6	0xB086    SUB	SP, SP, #24
0x1FF8	0x9101    STR	R1, [SP, #4]
0x1FFA	0x9202    STR	R2, [SP, #8]
; port end address is: 0 (R0)
; port start address is: 0 (R0)
;__Lib_GPIO_32F0xx.c, 254 :: 		
;__Lib_GPIO_32F0xx.c, 255 :: 		
;__Lib_GPIO_32F0xx.c, 256 :: 		
;__Lib_GPIO_32F0xx.c, 258 :: 		
;__Lib_GPIO_32F0xx.c, 259 :: 		
;__Lib_GPIO_32F0xx.c, 260 :: 		
;__Lib_GPIO_32F0xx.c, 261 :: 		
;__Lib_GPIO_32F0xx.c, 263 :: 		
;__Lib_GPIO_32F0xx.c, 264 :: 		
;__Lib_GPIO_32F0xx.c, 265 :: 		
;__Lib_GPIO_32F0xx.c, 270 :: 		
0x1FFC	0x4BA4    LDR	R3, [PC, #656]
0x1FFE	0x4003    ANDS	R3, R0
0x2000	0x9304    STR	R3, [SP, #16]
;__Lib_GPIO_32F0xx.c, 272 :: 		
; port end address is: 0 (R0)
0x2002	0xF7FFFB77  BL	_GPIO_Clk_Enable+0
;__Lib_GPIO_32F0xx.c, 275 :: 		
0x2006	0x9B01    LDR	R3, [SP, #4]
0x2008	0xB29B    UXTH	R3, R3
0x200A	0x2BFF    CMP	R3, #255
0x200C	0xD121    BNE	L_GPIO_Config25
;__Lib_GPIO_32F0xx.c, 277 :: 		
0x200E	0x9B04    LDR	R3, [SP, #16]
0x2010	0x681C    LDR	R4, [R3, #0]
;__Lib_GPIO_32F0xx.c, 278 :: 		
0x2012	0x4BA0    LDR	R3, [PC, #640]
0x2014	0x4620    MOV	R0, R4
0x2016	0x4018    ANDS	R0, R3
; tmp start address is: 0 (R0)
;__Lib_GPIO_32F0xx.c, 280 :: 		
0x2018	0x9C02    LDR	R4, [SP, #8]
0x201A	0x4B9F    LDR	R3, [PC, #636]
0x201C	0x429C    CMP	R4, R3
0x201E	0xD112    BNE	L_GPIO_Config26
;__Lib_GPIO_32F0xx.c, 283 :: 		
0x2020	0x4B9E    LDR	R3, [PC, #632]
0x2022	0x4604    MOV	R4, R0
0x2024	0x431C    ORRS	R4, R3
; tmp end address is: 0 (R0)
;__Lib_GPIO_32F0xx.c, 284 :: 		
0x2026	0x9B04    LDR	R3, [SP, #16]
0x2028	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_32F0xx.c, 287 :: 		
0x202A	0x9B04    LDR	R3, [SP, #16]
0x202C	0x1D1D    ADDS	R5, R3, #4
0x202E	0x682C    LDR	R4, [R5, #0]
0x2030	0x4B9B    LDR	R3, [PC, #620]
0x2032	0x4023    ANDS	R3, R4
0x2034	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F0xx.c, 290 :: 		
0x2036	0x9B04    LDR	R3, [SP, #16]
0x2038	0x461D    MOV	R5, R3
0x203A	0x3508    ADDS	R5, #8
0x203C	0x682C    LDR	R4, [R5, #0]
0x203E	0x4B99    LDR	R3, [PC, #612]
0x2040	0x4323    ORRS	R3, R4
0x2042	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F0xx.c, 291 :: 		
0x2044	0xE121    B	L_end_GPIO_Config
;__Lib_GPIO_32F0xx.c, 292 :: 		
L_GPIO_Config26:
;__Lib_GPIO_32F0xx.c, 294 :: 		
; tmp start address is: 0 (R0)
0x2046	0x9B02    LDR	R3, [SP, #8]
0x2048	0x2B42    CMP	R3, #66
0x204A	0xD102    BNE	L_GPIO_Config27
;__Lib_GPIO_32F0xx.c, 297 :: 		
0x204C	0x9B04    LDR	R3, [SP, #16]
0x204E	0x6018    STR	R0, [R3, #0]
; tmp end address is: 0 (R0)
;__Lib_GPIO_32F0xx.c, 298 :: 		
0x2050	0xE11B    B	L_end_GPIO_Config
;__Lib_GPIO_32F0xx.c, 299 :: 		
L_GPIO_Config27:
;__Lib_GPIO_32F0xx.c, 300 :: 		
L_GPIO_Config25:
;__Lib_GPIO_32F0xx.c, 303 :: 		
0x2052	0x9C01    LDR	R4, [SP, #4]
0x2054	0xB2A4    UXTH	R4, R4
0x2056	0x4B94    LDR	R3, [PC, #592]
0x2058	0x429C    CMP	R4, R3
0x205A	0xD121    BNE	L_GPIO_Config28
;__Lib_GPIO_32F0xx.c, 305 :: 		
0x205C	0x9B04    LDR	R3, [SP, #16]
0x205E	0x681C    LDR	R4, [R3, #0]
;__Lib_GPIO_32F0xx.c, 306 :: 		
0x2060	0x4B90    LDR	R3, [PC, #576]
0x2062	0x4023    ANDS	R3, R4
; tmp start address is: 0 (R0)
0x2064	0x4618    MOV	R0, R3
;__Lib_GPIO_32F0xx.c, 308 :: 		
0x2066	0x9C02    LDR	R4, [SP, #8]
0x2068	0x4B8B    LDR	R3, [PC, #556]
0x206A	0x429C    CMP	R4, R3
0x206C	0xD112    BNE	L_GPIO_Config29
;__Lib_GPIO_32F0xx.c, 311 :: 		
0x206E	0x4B8F    LDR	R3, [PC, #572]
0x2070	0x4604    MOV	R4, R0
0x2072	0x431C    ORRS	R4, R3
; tmp end address is: 0 (R0)
;__Lib_GPIO_32F0xx.c, 312 :: 		
0x2074	0x9B04    LDR	R3, [SP, #16]
0x2076	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_32F0xx.c, 315 :: 		
0x2078	0x9B04    LDR	R3, [SP, #16]
0x207A	0x1D1D    ADDS	R5, R3, #4
0x207C	0x682C    LDR	R4, [R5, #0]
0x207E	0x4B8C    LDR	R3, [PC, #560]
0x2080	0x4023    ANDS	R3, R4
0x2082	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F0xx.c, 318 :: 		
0x2084	0x9B04    LDR	R3, [SP, #16]
0x2086	0x461D    MOV	R5, R3
0x2088	0x3508    ADDS	R5, #8
0x208A	0x682C    LDR	R4, [R5, #0]
0x208C	0x4B81    LDR	R3, [PC, #516]
0x208E	0x4323    ORRS	R3, R4
0x2090	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F0xx.c, 319 :: 		
0x2092	0xE0FA    B	L_end_GPIO_Config
;__Lib_GPIO_32F0xx.c, 320 :: 		
L_GPIO_Config29:
;__Lib_GPIO_32F0xx.c, 322 :: 		
; tmp start address is: 0 (R0)
0x2094	0x9B02    LDR	R3, [SP, #8]
0x2096	0x2B42    CMP	R3, #66
0x2098	0xD102    BNE	L_GPIO_Config30
;__Lib_GPIO_32F0xx.c, 325 :: 		
0x209A	0x9B04    LDR	R3, [SP, #16]
0x209C	0x6018    STR	R0, [R3, #0]
; tmp end address is: 0 (R0)
;__Lib_GPIO_32F0xx.c, 326 :: 		
0x209E	0xE0F4    B	L_end_GPIO_Config
;__Lib_GPIO_32F0xx.c, 327 :: 		
L_GPIO_Config30:
;__Lib_GPIO_32F0xx.c, 328 :: 		
L_GPIO_Config28:
;__Lib_GPIO_32F0xx.c, 331 :: 		
0x20A0	0x9C01    LDR	R4, [SP, #4]
0x20A2	0xB2A4    UXTH	R4, R4
0x20A4	0x4B7F    LDR	R3, [PC, #508]
0x20A6	0x429C    CMP	R4, R3
0x20A8	0xD117    BNE	L_GPIO_Config31
;__Lib_GPIO_32F0xx.c, 333 :: 		
0x20AA	0x9C02    LDR	R4, [SP, #8]
0x20AC	0x4B7A    LDR	R3, [PC, #488]
0x20AE	0x429C    CMP	R4, R3
0x20B0	0xD10C    BNE	L_GPIO_Config32
;__Lib_GPIO_32F0xx.c, 336 :: 		
0x20B2	0x4C80    LDR	R4, [PC, #512]
0x20B4	0x9B04    LDR	R3, [SP, #16]
0x20B6	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_32F0xx.c, 339 :: 		
0x20B8	0x9B04    LDR	R3, [SP, #16]
0x20BA	0x1D1C    ADDS	R4, R3, #4
0x20BC	0x2300    MOVS	R3, #0
0x20BE	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F0xx.c, 342 :: 		
0x20C0	0x9B04    LDR	R3, [SP, #16]
0x20C2	0x461C    MOV	R4, R3
0x20C4	0x3408    ADDS	R4, #8
0x20C6	0x4B7C    LDR	R3, [PC, #496]
0x20C8	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F0xx.c, 343 :: 		
0x20CA	0xE0DE    B	L_end_GPIO_Config
;__Lib_GPIO_32F0xx.c, 344 :: 		
L_GPIO_Config32:
;__Lib_GPIO_32F0xx.c, 346 :: 		
0x20CC	0x9B02    LDR	R3, [SP, #8]
0x20CE	0x2B42    CMP	R3, #66
0x20D0	0xD103    BNE	L_GPIO_Config33
;__Lib_GPIO_32F0xx.c, 349 :: 		
0x20D2	0x2400    MOVS	R4, #0
0x20D4	0x9B04    LDR	R3, [SP, #16]
0x20D6	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_32F0xx.c, 350 :: 		
0x20D8	0xE0D7    B	L_end_GPIO_Config
;__Lib_GPIO_32F0xx.c, 351 :: 		
L_GPIO_Config33:
;__Lib_GPIO_32F0xx.c, 352 :: 		
L_GPIO_Config31:
;__Lib_GPIO_32F0xx.c, 361 :: 		
0x20DA	0x9C02    LDR	R4, [SP, #8]
0x20DC	0x2301    MOVS	R3, #1
0x20DE	0x4023    ANDS	R3, R4
0x20E0	0x2B00    CMP	R3, #0
0x20E2	0xD002    BEQ	L_GPIO_Config34
;__Lib_GPIO_32F0xx.c, 363 :: 		
; mode start address is: 0 (R0)
0x20E4	0x2003    MOVS	R0, #3
;__Lib_GPIO_32F0xx.c, 364 :: 		
0x20E6	0x4607    MOV	R7, R0
; mode end address is: 0 (R0)
0x20E8	0xE00F    B	L_GPIO_Config35
L_GPIO_Config34:
;__Lib_GPIO_32F0xx.c, 366 :: 		
0x20EA	0x9C02    LDR	R4, [SP, #8]
0x20EC	0x2308    MOVS	R3, #8
0x20EE	0x4023    ANDS	R3, R4
0x20F0	0x2B00    CMP	R3, #0
0x20F2	0xD001    BEQ	L_GPIO_Config36
;__Lib_GPIO_32F0xx.c, 368 :: 		
; mode start address is: 0 (R0)
0x20F4	0x2002    MOVS	R0, #2
;__Lib_GPIO_32F0xx.c, 369 :: 		
; mode end address is: 0 (R0)
0x20F6	0xE007    B	L_GPIO_Config37
L_GPIO_Config36:
;__Lib_GPIO_32F0xx.c, 371 :: 		
0x20F8	0x9C02    LDR	R4, [SP, #8]
0x20FA	0x2304    MOVS	R3, #4
0x20FC	0x4023    ANDS	R3, R4
0x20FE	0x2B00    CMP	R3, #0
0x2100	0xD001    BEQ	L_GPIO_Config38
;__Lib_GPIO_32F0xx.c, 373 :: 		
; mode start address is: 0 (R0)
0x2102	0x2001    MOVS	R0, #1
;__Lib_GPIO_32F0xx.c, 374 :: 		
; mode end address is: 0 (R0)
0x2104	0xE000    B	L_GPIO_Config39
L_GPIO_Config38:
;__Lib_GPIO_32F0xx.c, 378 :: 		
; mode start address is: 0 (R0)
0x2106	0x2000    MOVS	R0, #0
; mode end address is: 0 (R0)
;__Lib_GPIO_32F0xx.c, 379 :: 		
L_GPIO_Config39:
; mode start address is: 0 (R0)
; mode end address is: 0 (R0)
L_GPIO_Config37:
; mode start address is: 0 (R0)
0x2108	0x4607    MOV	R7, R0
; mode end address is: 0 (R0)
L_GPIO_Config35:
;__Lib_GPIO_32F0xx.c, 387 :: 		
; mode start address is: 28 (R7)
0x210A	0x9C02    LDR	R4, [SP, #8]
0x210C	0x4B6B    LDR	R3, [PC, #428]
0x210E	0x4023    ANDS	R3, R4
0x2110	0x2B00    CMP	R3, #0
0x2112	0xD001    BEQ	L_GPIO_Config40
;__Lib_GPIO_32F0xx.c, 389 :: 		
; speed start address is: 8 (R2)
0x2114	0x2203    MOVS	R2, #3
;__Lib_GPIO_32F0xx.c, 390 :: 		
; speed end address is: 8 (R2)
0x2116	0xE007    B	L_GPIO_Config41
L_GPIO_Config40:
;__Lib_GPIO_32F0xx.c, 392 :: 		
0x2118	0x9C02    LDR	R4, [SP, #8]
0x211A	0x4B69    LDR	R3, [PC, #420]
0x211C	0x4023    ANDS	R3, R4
0x211E	0x2B00    CMP	R3, #0
0x2120	0xD001    BEQ	L_GPIO_Config42
;__Lib_GPIO_32F0xx.c, 394 :: 		
; speed start address is: 8 (R2)
0x2122	0x2201    MOVS	R2, #1
;__Lib_GPIO_32F0xx.c, 395 :: 		
; speed end address is: 8 (R2)
0x2124	0xE000    B	L_GPIO_Config43
L_GPIO_Config42:
;__Lib_GPIO_32F0xx.c, 399 :: 		
; speed start address is: 8 (R2)
0x2126	0x2200    MOVS	R2, #0
; speed end address is: 8 (R2)
;__Lib_GPIO_32F0xx.c, 400 :: 		
L_GPIO_Config43:
; speed start address is: 8 (R2)
; speed end address is: 8 (R2)
L_GPIO_Config41:
;__Lib_GPIO_32F0xx.c, 424 :: 		
; speed start address is: 8 (R2)
0x2128	0x9C02    LDR	R4, [SP, #8]
0x212A	0x2320    MOVS	R3, #32
0x212C	0x4023    ANDS	R3, R4
0x212E	0x2B00    CMP	R3, #0
0x2130	0xD001    BEQ	L_GPIO_Config44
;__Lib_GPIO_32F0xx.c, 426 :: 		
; otype start address is: 4 (R1)
0x2132	0x2101    MOVS	R1, #1
;__Lib_GPIO_32F0xx.c, 427 :: 		
; otype end address is: 4 (R1)
0x2134	0xE000    B	L_GPIO_Config45
L_GPIO_Config44:
;__Lib_GPIO_32F0xx.c, 431 :: 		
; otype start address is: 4 (R1)
0x2136	0x2100    MOVS	R1, #0
; otype end address is: 4 (R1)
;__Lib_GPIO_32F0xx.c, 432 :: 		
L_GPIO_Config45:
;__Lib_GPIO_32F0xx.c, 440 :: 		
; otype start address is: 4 (R1)
0x2138	0x9C02    LDR	R4, [SP, #8]
0x213A	0x23FF    MOVS	R3, #255
0x213C	0x3301    ADDS	R3, #1
0x213E	0x4023    ANDS	R3, R4
0x2140	0x2B00    CMP	R3, #0
0x2142	0xD002    BEQ	L_GPIO_Config46
;__Lib_GPIO_32F0xx.c, 442 :: 		
; pull start address is: 16 (R4)
0x2144	0x2402    MOVS	R4, #2
;__Lib_GPIO_32F0xx.c, 443 :: 		
0x2146	0x4620    MOV	R0, R4
; pull end address is: 16 (R4)
0x2148	0xE008    B	L_GPIO_Config47
L_GPIO_Config46:
;__Lib_GPIO_32F0xx.c, 445 :: 		
0x214A	0x9C02    LDR	R4, [SP, #8]
0x214C	0x2380    MOVS	R3, #128
0x214E	0x4023    ANDS	R3, R4
0x2150	0x2B00    CMP	R3, #0
0x2152	0xD001    BEQ	L_GPIO_Config48
;__Lib_GPIO_32F0xx.c, 447 :: 		
; pull start address is: 16 (R4)
0x2154	0x2401    MOVS	R4, #1
;__Lib_GPIO_32F0xx.c, 448 :: 		
; pull end address is: 16 (R4)
0x2156	0xE000    B	L_GPIO_Config49
L_GPIO_Config48:
;__Lib_GPIO_32F0xx.c, 451 :: 		
; pull start address is: 16 (R4)
0x2158	0x2400    MOVS	R4, #0
; pull end address is: 16 (R4)
L_GPIO_Config49:
; pull start address is: 16 (R4)
0x215A	0x4620    MOV	R0, R4
; pull end address is: 16 (R4)
L_GPIO_Config47:
;__Lib_GPIO_32F0xx.c, 454 :: 		
; pull start address is: 0 (R0)
0x215C	0x2300    MOVS	R3, #0
0x215E	0x9303    STR	R3, [SP, #12]
L_GPIO_Config50:
; pull start address is: 0 (R0)
; pull end address is: 0 (R0)
; otype start address is: 4 (R1)
; otype end address is: 4 (R1)
; speed start address is: 8 (R2)
; speed end address is: 8 (R2)
; mode start address is: 28 (R7)
; mode end address is: 28 (R7)
0x2160	0x9B03    LDR	R3, [SP, #12]
0x2162	0x2B10    CMP	R3, #16
0x2164	0xD300    BCC	#0
0x2166	0xE090    B	L_GPIO_Config51
; pull end address is: 0 (R0)
; otype end address is: 4 (R1)
; speed end address is: 8 (R2)
; mode end address is: 28 (R7)
;__Lib_GPIO_32F0xx.c, 456 :: 		
; mode start address is: 28 (R7)
; speed start address is: 8 (R2)
; otype start address is: 4 (R1)
; pull start address is: 0 (R0)
0x2168	0x9D03    LDR	R5, [SP, #12]
0x216A	0x2301    MOVS	R3, #1
0x216C	0x461C    MOV	R4, R3
0x216E	0x40AC    LSLS	R4, R5
;__Lib_GPIO_32F0xx.c, 459 :: 		
0x2170	0x9B01    LDR	R3, [SP, #4]
0x2172	0xB29B    UXTH	R3, R3
0x2174	0x4023    ANDS	R3, R4
;__Lib_GPIO_32F0xx.c, 460 :: 		
0x2176	0x42A3    CMP	R3, R4
0x2178	0xD000    BEQ	#0
0x217A	0xE082    B	L_GPIO_Config53
;__Lib_GPIO_32F0xx.c, 463 :: 		
0x217C	0x9B03    LDR	R3, [SP, #12]
0x217E	0x005D    LSLS	R5, R3, #1
0x2180	0x2403    MOVS	R4, #3
0x2182	0x4623    MOV	R3, R4
0x2184	0x40AB    LSLS	R3, R5
0x2186	0x43DC    MVN	R4, R3
0x2188	0x9B04    LDR	R3, [SP, #16]
0x218A	0x681B    LDR	R3, [R3, #0]
0x218C	0x401C    ANDS	R4, R3
0x218E	0x9B04    LDR	R3, [SP, #16]
0x2190	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_32F0xx.c, 465 :: 		
0x2192	0x9B03    LDR	R3, [SP, #12]
0x2194	0x005B    LSLS	R3, R3, #1
0x2196	0x463C    MOV	R4, R7
0x2198	0x409C    LSLS	R4, R3
0x219A	0x9B04    LDR	R3, [SP, #16]
0x219C	0x681B    LDR	R3, [R3, #0]
0x219E	0x431C    ORRS	R4, R3
0x21A0	0x9B04    LDR	R3, [SP, #16]
0x21A2	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_32F0xx.c, 469 :: 		
0x21A4	0x9C02    LDR	R4, [SP, #8]
0x21A6	0x230C    MOVS	R3, #12
0x21A8	0x4023    ANDS	R3, R4
0x21AA	0x2B00    CMP	R3, #0
0x21AC	0xD027    BEQ	L_GPIO_Config54
;__Lib_GPIO_32F0xx.c, 472 :: 		
0x21AE	0x9B04    LDR	R3, [SP, #16]
0x21B0	0x461E    MOV	R6, R3
0x21B2	0x3608    ADDS	R6, #8
0x21B4	0x9B03    LDR	R3, [SP, #12]
0x21B6	0x005D    LSLS	R5, R3, #1
0x21B8	0x2403    MOVS	R4, #3
0x21BA	0x4623    MOV	R3, R4
0x21BC	0x40AB    LSLS	R3, R5
0x21BE	0x43DC    MVN	R4, R3
0x21C0	0x6833    LDR	R3, [R6, #0]
0x21C2	0x4023    ANDS	R3, R4
0x21C4	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F0xx.c, 474 :: 		
0x21C6	0x9B04    LDR	R3, [SP, #16]
0x21C8	0x461D    MOV	R5, R3
0x21CA	0x3508    ADDS	R5, #8
0x21CC	0x9B03    LDR	R3, [SP, #12]
0x21CE	0x005B    LSLS	R3, R3, #1
0x21D0	0x4614    MOV	R4, R2
0x21D2	0x409C    LSLS	R4, R3
0x21D4	0x682B    LDR	R3, [R5, #0]
0x21D6	0x4323    ORRS	R3, R4
0x21D8	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F0xx.c, 478 :: 		
0x21DA	0x9B04    LDR	R3, [SP, #16]
0x21DC	0x1D1E    ADDS	R6, R3, #4
0x21DE	0x9D03    LDR	R5, [SP, #12]
0x21E0	0x2401    MOVS	R4, #1
0x21E2	0x4623    MOV	R3, R4
0x21E4	0x40AB    LSLS	R3, R5
0x21E6	0x43DC    MVN	R4, R3
0x21E8	0x6833    LDR	R3, [R6, #0]
0x21EA	0x4023    ANDS	R3, R4
0x21EC	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F0xx.c, 480 :: 		
0x21EE	0x9B04    LDR	R3, [SP, #16]
0x21F0	0x1D1D    ADDS	R5, R3, #4
0x21F2	0x9B03    LDR	R3, [SP, #12]
0x21F4	0x460C    MOV	R4, R1
0x21F6	0x409C    LSLS	R4, R3
0x21F8	0x682B    LDR	R3, [R5, #0]
0x21FA	0x4323    ORRS	R3, R4
0x21FC	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F0xx.c, 481 :: 		
L_GPIO_Config54:
;__Lib_GPIO_32F0xx.c, 486 :: 		
0x21FE	0x9B04    LDR	R3, [SP, #16]
0x2200	0x461E    MOV	R6, R3
0x2202	0x360C    ADDS	R6, #12
0x2204	0x9B03    LDR	R3, [SP, #12]
0x2206	0x005D    LSLS	R5, R3, #1
0x2208	0x2403    MOVS	R4, #3
0x220A	0x4623    MOV	R3, R4
0x220C	0x40AB    LSLS	R3, R5
0x220E	0x43DC    MVN	R4, R3
0x2210	0x6833    LDR	R3, [R6, #0]
0x2212	0x4023    ANDS	R3, R4
0x2214	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F0xx.c, 488 :: 		
0x2216	0x9B04    LDR	R3, [SP, #16]
0x2218	0x461D    MOV	R5, R3
0x221A	0x350C    ADDS	R5, #12
0x221C	0x9B03    LDR	R3, [SP, #12]
0x221E	0x005B    LSLS	R3, R3, #1
0x2220	0x4604    MOV	R4, R0
0x2222	0x409C    LSLS	R4, R3
0x2224	0x682B    LDR	R3, [R5, #0]
0x2226	0x4323    ORRS	R3, R4
0x2228	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F0xx.c, 500 :: 		
0x222A	0x9C02    LDR	R4, [SP, #8]
0x222C	0x2308    MOVS	R3, #8
0x222E	0x4023    ANDS	R3, R4
0x2230	0x2B00    CMP	R3, #0
0x2232	0xD026    BEQ	L_GPIO_Config55
;__Lib_GPIO_32F0xx.c, 502 :: 		
0x2234	0x9C02    LDR	R4, [SP, #8]
0x2236	0x4B23    LDR	R3, [PC, #140]
0x2238	0x4023    ANDS	R3, R4
0x223A	0x0D1B    LSRS	R3, R3, #20
0x223C	0x9300    STR	R3, [SP, #0]
;__Lib_GPIO_32F0xx.c, 505 :: 		
0x223E	0x9B03    LDR	R3, [SP, #12]
0x2240	0x2B07    CMP	R3, #7
0x2242	0xD906    BLS	L_GPIO_Config56
;__Lib_GPIO_32F0xx.c, 507 :: 		
0x2244	0x9B04    LDR	R3, [SP, #16]
0x2246	0x3324    ADDS	R3, #36
0x2248	0x9305    STR	R3, [SP, #20]
;__Lib_GPIO_32F0xx.c, 508 :: 		
0x224A	0x9B03    LDR	R3, [SP, #12]
0x224C	0x461E    MOV	R6, R3
0x224E	0x3E08    SUBS	R6, #8
; pos start address is: 24 (R6)
;__Lib_GPIO_32F0xx.c, 509 :: 		
; pos end address is: 24 (R6)
0x2250	0xE003    B	L_GPIO_Config57
L_GPIO_Config56:
;__Lib_GPIO_32F0xx.c, 513 :: 		
0x2252	0x9B04    LDR	R3, [SP, #16]
0x2254	0x3320    ADDS	R3, #32
0x2256	0x9305    STR	R3, [SP, #20]
;__Lib_GPIO_32F0xx.c, 514 :: 		
; pos start address is: 24 (R6)
0x2258	0x9E03    LDR	R6, [SP, #12]
; pos end address is: 24 (R6)
;__Lib_GPIO_32F0xx.c, 515 :: 		
L_GPIO_Config57:
;__Lib_GPIO_32F0xx.c, 518 :: 		
; pos start address is: 24 (R6)
0x225A	0x00B5    LSLS	R5, R6, #2
0x225C	0x240F    MOVS	R4, #15
0x225E	0x4623    MOV	R3, R4
0x2260	0x40AB    LSLS	R3, R5
0x2262	0x43DC    MVN	R4, R3
0x2264	0x9B05    LDR	R3, [SP, #20]
0x2266	0x681B    LDR	R3, [R3, #0]
0x2268	0x401C    ANDS	R4, R3
0x226A	0x9B05    LDR	R3, [SP, #20]
0x226C	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_32F0xx.c, 520 :: 		
0x226E	0x9D00    LDR	R5, [SP, #0]
0x2270	0xB2ED    UXTB	R5, R5
0x2272	0x00B3    LSLS	R3, R6, #2
; pos end address is: 24 (R6)
0x2274	0x462C    MOV	R4, R5
0x2276	0x409C    LSLS	R4, R3
0x2278	0x9B05    LDR	R3, [SP, #20]
0x227A	0x681B    LDR	R3, [R3, #0]
0x227C	0x431C    ORRS	R4, R3
0x227E	0x9B05    LDR	R3, [SP, #20]
0x2280	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_32F0xx.c, 521 :: 		
L_GPIO_Config55:
;__Lib_GPIO_32F0xx.c, 522 :: 		
L_GPIO_Config53:
;__Lib_GPIO_32F0xx.c, 454 :: 		
0x2282	0x9B03    LDR	R3, [SP, #12]
0x2284	0x3301    ADDS	R3, #1
0x2286	0x9303    STR	R3, [SP, #12]
;__Lib_GPIO_32F0xx.c, 523 :: 		
; pull end address is: 0 (R0)
; otype end address is: 4 (R1)
; speed end address is: 8 (R2)
; mode end address is: 28 (R7)
0x2288	0xE76A    B	L_GPIO_Config50
L_GPIO_Config51:
;__Lib_GPIO_32F0xx.c, 524 :: 		
L_end_GPIO_Config:
0x228A	0xB006    ADD	SP, SP, #24
0x228C	0xBD00    POP	(R15)
0x228E	0xBF00    NOP
0x2290	0xFC00FFFF  	#-1024
0x2294	0x0000FFFF  	#-65536
0x2298	0x00140008  	#524308
0x229C	0x55550000  	#21845
0x22A0	0xFF00FFFF  	#-256
0x22A4	0xFFFF0000  	#65535
0x22A8	0xFF000000  	#65280
0x22AC	0x00005555  	#1431633920
0x22B0	0x00FFFFFF  	#-65281
0x22B4	0x55555555  	#1431655765
0x22B8	0xFFFFFFFF  	#-1
0x22BC	0x08000008  	#526336
0x22C0	0x04000000  	#1024
0x22C4	0x000000F0  	#15728640
; end of _GPIO_Config
_GPIO_Clk_Enable:
;__Lib_GPIO_32F0xx.c, 146 :: 		
; port start address is: 0 (R0)
0x16F4	0xB500    PUSH	(R14)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
;__Lib_GPIO_32F0xx.c, 153 :: 		
0x16F6	0x4915    LDR	R1, [PC, #84]
0x16F8	0x4001    ANDS	R1, R0
; port end address is: 0 (R0)
; portBase start address is: 0 (R0)
0x16FA	0x4608    MOV	R0, R1
;__Lib_GPIO_32F0xx.c, 155 :: 		
; pos start address is: 8 (R2)
0x16FC	0x2200    MOVS	R2, #0
;__Lib_GPIO_32F0xx.c, 156 :: 		
0x16FE	0xE00B    B	L_GPIO_Clk_Enable9
; portBase end address is: 0 (R0)
; pos end address is: 8 (R2)
;__Lib_GPIO_32F0xx.c, 158 :: 		
L_GPIO_Clk_Enable11:
;__Lib_GPIO_32F0xx.c, 160 :: 		
; pos start address is: 0 (R0)
0x1700	0x4813    LDR	R0, [PC, #76]
;__Lib_GPIO_32F0xx.c, 161 :: 		
; pos end address is: 0 (R0)
0x1702	0xE01C    B	L_GPIO_Clk_Enable10
;__Lib_GPIO_32F0xx.c, 163 :: 		
L_GPIO_Clk_Enable12:
;__Lib_GPIO_32F0xx.c, 165 :: 		
; pos start address is: 0 (R0)
0x1704	0x4813    LDR	R0, [PC, #76]
;__Lib_GPIO_32F0xx.c, 166 :: 		
; pos end address is: 0 (R0)
0x1706	0xE01A    B	L_GPIO_Clk_Enable10
;__Lib_GPIO_32F0xx.c, 168 :: 		
L_GPIO_Clk_Enable13:
;__Lib_GPIO_32F0xx.c, 170 :: 		
; pos start address is: 0 (R0)
0x1708	0x4813    LDR	R0, [PC, #76]
;__Lib_GPIO_32F0xx.c, 171 :: 		
; pos end address is: 0 (R0)
0x170A	0xE018    B	L_GPIO_Clk_Enable10
;__Lib_GPIO_32F0xx.c, 173 :: 		
L_GPIO_Clk_Enable14:
;__Lib_GPIO_32F0xx.c, 175 :: 		
; pos start address is: 0 (R0)
0x170C	0x4813    LDR	R0, [PC, #76]
;__Lib_GPIO_32F0xx.c, 176 :: 		
; pos end address is: 0 (R0)
0x170E	0xE016    B	L_GPIO_Clk_Enable10
;__Lib_GPIO_32F0xx.c, 178 :: 		
L_GPIO_Clk_Enable15:
;__Lib_GPIO_32F0xx.c, 180 :: 		
; pos start address is: 0 (R0)
0x1710	0x4813    LDR	R0, [PC, #76]
;__Lib_GPIO_32F0xx.c, 181 :: 		
; pos end address is: 0 (R0)
0x1712	0xE014    B	L_GPIO_Clk_Enable10
;__Lib_GPIO_32F0xx.c, 183 :: 		
L_GPIO_Clk_Enable16:
;__Lib_GPIO_32F0xx.c, 185 :: 		
; pos start address is: 0 (R0)
0x1714	0x4813    LDR	R0, [PC, #76]
;__Lib_GPIO_32F0xx.c, 186 :: 		
; pos end address is: 0 (R0)
0x1716	0xE012    B	L_GPIO_Clk_Enable10
;__Lib_GPIO_32F0xx.c, 188 :: 		
L_GPIO_Clk_Enable9:
; pos start address is: 8 (R2)
; portBase start address is: 0 (R0)
0x1718	0x4913    LDR	R1, [PC, #76]
0x171A	0x4288    CMP	R0, R1
0x171C	0xD0F0    BEQ	L_GPIO_Clk_Enable11
0x171E	0x4913    LDR	R1, [PC, #76]
0x1720	0x4288    CMP	R0, R1
0x1722	0xD0EF    BEQ	L_GPIO_Clk_Enable12
0x1724	0x4912    LDR	R1, [PC, #72]
0x1726	0x4288    CMP	R0, R1
0x1728	0xD0EE    BEQ	L_GPIO_Clk_Enable13
0x172A	0x4912    LDR	R1, [PC, #72]
0x172C	0x4288    CMP	R0, R1
0x172E	0xD0ED    BEQ	L_GPIO_Clk_Enable14
0x1730	0x4911    LDR	R1, [PC, #68]
0x1732	0x4288    CMP	R0, R1
0x1734	0xD0EC    BEQ	L_GPIO_Clk_Enable15
0x1736	0x4911    LDR	R1, [PC, #68]
0x1738	0x4288    CMP	R0, R1
0x173A	0xD0EB    BEQ	L_GPIO_Clk_Enable16
; portBase end address is: 0 (R0)
; pos end address is: 8 (R2)
0x173C	0x4610    MOV	R0, R2
L_GPIO_Clk_Enable10:
;__Lib_GPIO_32F0xx.c, 191 :: 		
; pos start address is: 0 (R0)
0x173E	0x4910    LDR	R1, [PC, #64]
0x1740	0x6809    LDR	R1, [R1, #0]
0x1742	0x460A    MOV	R2, R1
0x1744	0x4302    ORRS	R2, R0
; pos end address is: 0 (R0)
0x1746	0x490E    LDR	R1, [PC, #56]
0x1748	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F0xx.c, 192 :: 		
L_end_GPIO_Clk_Enable:
0x174A	0xBD00    POP	(R15)
0x174C	0xFC00FFFF  	#-1024
0x1750	0x00000002  	#131072
0x1754	0x00000004  	#262144
0x1758	0x00000008  	#524288
0x175C	0x00000010  	#1048576
0x1760	0x00000020  	#2097152
0x1764	0x00000040  	#4194304
0x1768	0x00004800  	#1207959552
0x176C	0x04004800  	#1207960576
0x1770	0x08004800  	#1207961600
0x1774	0x0C004800  	#1207962624
0x1778	0x10004800  	#1207963648
0x177C	0x14004800  	#1207964672
0x1780	0x10144002  	RCC_AHBENR+0
; end of _GPIO_Clk_Enable
_Init_ADC_chanell:
;adc_func.c, 4 :: 		void Init_ADC_chanell()
0x354C	0xB500    PUSH	(R14)
;adc_func.c, 6 :: 		ADC1_Init();
0x354E	0xF7FEFCF1  BL	_ADC1_Init+0
;adc_func.c, 7 :: 		ADC_Set_Input_Channel(_ADC_CHANNEL_1|_ADC_CHANNEL_3|_ADC_CHANNEL_4);//|_ADC_CHANNEL_3|_ADC_CHANNEL_4);
0x3552	0x201A    MOVS	R0, #26
0x3554	0xF7FEFEB8  BL	_ADC_Set_Input_Channel+0
;adc_func.c, 10 :: 		ADC_CR |= ADC_CR_ADEN; /* (1) */
0x3558	0x4803    LDR	R0, [PC, #12]
0x355A	0x6801    LDR	R1, [R0, #0]
0x355C	0x2001    MOVS	R0, #1
0x355E	0x4301    ORRS	R1, R0
0x3560	0x4801    LDR	R0, [PC, #4]
0x3562	0x6001    STR	R1, [R0, #0]
;adc_func.c, 15 :: 		}
L_end_Init_ADC_chanell:
0x3564	0xBD00    POP	(R15)
0x3566	0xBF00    NOP
0x3568	0x24084001  	1073816584
; end of _Init_ADC_chanell
_ADC1_Init:
;__Lib_ADC_32F0x_10ch.c, 170 :: 		
0x1F34	0xB500    PUSH	(R14)
;__Lib_ADC_32F0x_10ch.c, 172 :: 		
0x1F36	0x4906    LDR	R1, [PC, #24]
0x1F38	0x4806    LDR	R0, [PC, #24]
0x1F3A	0x6001    STR	R1, [R0, #0]
;__Lib_ADC_32F0x_10ch.c, 175 :: 		
0x1F3C	0x4A06    LDR	R2, [PC, #24]
0x1F3E	0x6810    LDR	R0, [R2, #0]
0x1F40	0x2101    MOVS	R1, #1
0x1F42	0x0249    LSLS	R1, R1, #9
0x1F44	0x4308    ORRS	R0, R1
0x1F46	0x6010    STR	R0, [R2, #0]
;__Lib_ADC_32F0x_10ch.c, 177 :: 		
0x1F48	0x4804    LDR	R0, [PC, #16]
0x1F4A	0xF7FFFB07  BL	__Lib_ADC_32F0x_10ch_ADCx_Init+0
;__Lib_ADC_32F0x_10ch.c, 178 :: 		
L_end_ADC1_Init:
0x1F4E	0xBD00    POP	(R15)
0x1F50	0xFFFFFFFF  	_ADC1_Get_Sample+0
0x1F54	0x01D02000  	_ADC_Get_Sample_Ptr+0
0x1F58	0x10184002  	RCC_APB2ENR+0
0x1F5C	0x24004001  	ADC_ISR+0
; end of _ADC1_Init
__Lib_ADC_32F0x_10ch_ADCx_Init:
;__Lib_ADC_32F0x_10ch.c, 87 :: 		
0x155C	0xB500    PUSH	(R14)
0x155E	0xB084    SUB	SP, SP, #16
;__Lib_ADC_32F0x_10ch.c, 90 :: 		
0x1560	0x4669    MOV	R1, SP
0x1562	0x4608    MOV	R0, R1
0x1564	0xF7FFF97A  BL	_RCC_GetClocksFrequency+0
;__Lib_ADC_32F0x_10ch.c, 93 :: 		
0x1568	0x4950    LDR	R1, [PC, #320]
0x156A	0x680A    LDR	R2, [R1, #0]
0x156C	0x2101    MOVS	R1, #1
0x156E	0x0089    LSLS	R1, R1, BitPos(ADSTART_bit+0)
0x1570	0x4011    ANDS	R1, R2
0x1572	0x0889    LSRS	R1, R1, BitPos(ADSTART_bit+0)
0x1574	0x2900    CMP	R1, #0
0x1576	0xD005    BEQ	L___Lib_ADC_32F0x_10ch_ADCx_Init10
;__Lib_ADC_32F0x_10ch.c, 94 :: 		
0x1578	0x4B4D    LDR	R3, [PC, #308]
0x157A	0x6819    LDR	R1, [R3, #0]
0x157C	0x2201    MOVS	R2, #1
0x157E	0x0112    LSLS	R2, R2, BitPos(ADSTP_bit+0)
0x1580	0x4311    ORRS	R1, R2
0x1582	0x6019    STR	R1, [R3, #0]
L___Lib_ADC_32F0x_10ch_ADCx_Init10:
;__Lib_ADC_32F0x_10ch.c, 96 :: 		
0x1584	0x494B    LDR	R1, [PC, #300]
0x1586	0x680A    LDR	R2, [R1, #0]
0x1588	0x2101    MOVS	R1, #1
0x158A	0x4011    ANDS	R1, R2
0x158C	0x2900    CMP	R1, #0
0x158E	0xD00C    BEQ	L___Lib_ADC_32F0x_10ch_ADCx_Init11
;__Lib_ADC_32F0x_10ch.c, 98 :: 		
0x1590	0x4B49    LDR	R3, [PC, #292]
0x1592	0x6819    LDR	R1, [R3, #0]
0x1594	0x2201    MOVS	R2, #1
0x1596	0x0792    LSLS	R2, R2, #30
0x1598	0x4391    BICS	R1, R2
0x159A	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 99 :: 		
0x159C	0x4B46    LDR	R3, [PC, #280]
0x159E	0x6819    LDR	R1, [R3, #0]
0x15A0	0x2201    MOVS	R2, #1
0x15A2	0x07D2    LSLS	R2, R2, #31
0x15A4	0x4391    BICS	R1, R2
0x15A6	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 100 :: 		
0x15A8	0xE01C    B	L___Lib_ADC_32F0x_10ch_ADCx_Init12
L___Lib_ADC_32F0x_10ch_ADCx_Init11:
;__Lib_ADC_32F0x_10ch.c, 101 :: 		
0x15AA	0x9A02    LDR	R2, [SP, #8]
0x15AC	0x4943    LDR	R1, [PC, #268]
0x15AE	0x428A    CMP	R2, R1
0x15B0	0xD90C    BLS	L___Lib_ADC_32F0x_10ch_ADCx_Init13
;__Lib_ADC_32F0x_10ch.c, 104 :: 		
0x15B2	0x4B41    LDR	R3, [PC, #260]
0x15B4	0x6819    LDR	R1, [R3, #0]
0x15B6	0x2201    MOVS	R2, #1
0x15B8	0x0792    LSLS	R2, R2, #30
0x15BA	0x4391    BICS	R1, R2
0x15BC	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 105 :: 		
0x15BE	0x4B3E    LDR	R3, [PC, #248]
0x15C0	0x6819    LDR	R1, [R3, #0]
0x15C2	0x2201    MOVS	R2, #1
0x15C4	0x07D2    LSLS	R2, R2, #31
0x15C6	0x4311    ORRS	R1, R2
0x15C8	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 106 :: 		
0x15CA	0xE00B    B	L___Lib_ADC_32F0x_10ch_ADCx_Init14
L___Lib_ADC_32F0x_10ch_ADCx_Init13:
;__Lib_ADC_32F0x_10ch.c, 110 :: 		
0x15CC	0x4B3A    LDR	R3, [PC, #232]
0x15CE	0x6819    LDR	R1, [R3, #0]
0x15D0	0x2201    MOVS	R2, #1
0x15D2	0x0792    LSLS	R2, R2, #30
0x15D4	0x4311    ORRS	R1, R2
0x15D6	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 111 :: 		
0x15D8	0x4B37    LDR	R3, [PC, #220]
0x15DA	0x6819    LDR	R1, [R3, #0]
0x15DC	0x2201    MOVS	R2, #1
0x15DE	0x07D2    LSLS	R2, R2, #31
0x15E0	0x4391    BICS	R1, R2
0x15E2	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 112 :: 		
L___Lib_ADC_32F0x_10ch_ADCx_Init14:
L___Lib_ADC_32F0x_10ch_ADCx_Init12:
;__Lib_ADC_32F0x_10ch.c, 116 :: 		
L___Lib_ADC_32F0x_10ch_ADCx_Init15:
0x15E4	0x4936    LDR	R1, [PC, #216]
0x15E6	0x680A    LDR	R2, [R1, #0]
0x15E8	0x2101    MOVS	R1, #1
0x15EA	0x0009    LSLS	R1, R1, BitPos(ADEN_bit+0)
0x15EC	0x4011    ANDS	R1, R2
0x15EE	0x2900    CMP	R1, #0
0x15F0	0xD000    BEQ	L___Lib_ADC_32F0x_10ch_ADCx_Init16
0x15F2	0xE7F7    B	L___Lib_ADC_32F0x_10ch_ADCx_Init15
L___Lib_ADC_32F0x_10ch_ADCx_Init16:
;__Lib_ADC_32F0x_10ch.c, 120 :: 		
0x15F4	0x4B33    LDR	R3, [PC, #204]
0x15F6	0x6819    LDR	R1, [R3, #0]
0x15F8	0x2201    MOVS	R2, #1
0x15FA	0x07D2    LSLS	R2, R2, BitPos(ADCAL_bit+0)
0x15FC	0x4311    ORRS	R1, R2
0x15FE	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 121 :: 		
L___Lib_ADC_32F0x_10ch_ADCx_Init17:
0x1600	0x4930    LDR	R1, [PC, #192]
0x1602	0x680A    LDR	R2, [R1, #0]
0x1604	0x2101    MOVS	R1, #1
0x1606	0x07C9    LSLS	R1, R1, BitPos(ADCAL_bit+0)
0x1608	0x4011    ANDS	R1, R2
0x160A	0x0FC9    LSRS	R1, R1, BitPos(ADCAL_bit+0)
0x160C	0x2900    CMP	R1, #0
0x160E	0xD000    BEQ	L___Lib_ADC_32F0x_10ch_ADCx_Init18
0x1610	0xE7F6    B	L___Lib_ADC_32F0x_10ch_ADCx_Init17
L___Lib_ADC_32F0x_10ch_ADCx_Init18:
;__Lib_ADC_32F0x_10ch.c, 124 :: 		
0x1612	0x4B2D    LDR	R3, [PC, #180]
0x1614	0x6819    LDR	R1, [R3, #0]
0x1616	0x2201    MOVS	R2, #1
0x1618	0x0012    LSLS	R2, R2, BitPos(SMPR0_bit+0)
0x161A	0x4391    BICS	R1, R2
0x161C	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 125 :: 		
0x161E	0x4B2B    LDR	R3, [PC, #172]
0x1620	0x6819    LDR	R1, [R3, #0]
0x1622	0x2201    MOVS	R2, #1
0x1624	0x0052    LSLS	R2, R2, BitPos(SMPR1_bit+0)
0x1626	0x4391    BICS	R1, R2
0x1628	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 126 :: 		
0x162A	0x4B29    LDR	R3, [PC, #164]
0x162C	0x6819    LDR	R1, [R3, #0]
0x162E	0x2201    MOVS	R2, #1
0x1630	0x0092    LSLS	R2, R2, BitPos(SMPR2_bit+0)
0x1632	0x4391    BICS	R1, R2
0x1634	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 129 :: 		
0x1636	0x4B27    LDR	R3, [PC, #156]
0x1638	0x6819    LDR	R1, [R3, #0]
0x163A	0x2201    MOVS	R2, #1
0x163C	0x00D2    LSLS	R2, R2, BitPos(RES0_bit+0)
0x163E	0x4391    BICS	R1, R2
0x1640	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 130 :: 		
0x1642	0x4B25    LDR	R3, [PC, #148]
0x1644	0x6819    LDR	R1, [R3, #0]
0x1646	0x2201    MOVS	R2, #1
0x1648	0x0112    LSLS	R2, R2, BitPos(RES1_bit+0)
0x164A	0x4391    BICS	R1, R2
0x164C	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 133 :: 		
0x164E	0x4B1C    LDR	R3, [PC, #112]
0x1650	0x6819    LDR	R1, [R3, #0]
0x1652	0x2201    MOVS	R2, #1
0x1654	0x0012    LSLS	R2, R2, BitPos(ADEN_bit+0)
0x1656	0x4311    ORRS	R1, R2
0x1658	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 134 :: 		
L___Lib_ADC_32F0x_10ch_ADCx_Init19:
0x165A	0x4920    LDR	R1, [PC, #128]
0x165C	0x680A    LDR	R2, [R1, #0]
0x165E	0x2101    MOVS	R1, #1
0x1660	0x0009    LSLS	R1, R1, BitPos(ADRDY_bit+0)
0x1662	0x4011    ANDS	R1, R2
0x1664	0x2900    CMP	R1, #0
0x1666	0xD100    BNE	L___Lib_ADC_32F0x_10ch_ADCx_Init20
0x1668	0xE7F7    B	L___Lib_ADC_32F0x_10ch_ADCx_Init19
L___Lib_ADC_32F0x_10ch_ADCx_Init20:
;__Lib_ADC_32F0x_10ch.c, 137 :: 		
0x166A	0x4B1D    LDR	R3, [PC, #116]
0x166C	0x6819    LDR	R1, [R3, #0]
0x166E	0x2201    MOVS	R2, #1
0x1670	0x0092    LSLS	R2, R2, BitPos(SCANDIR_bit+0)
0x1672	0x4391    BICS	R1, R2
0x1674	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 140 :: 		
0x1676	0x4B1B    LDR	R3, [PC, #108]
0x1678	0x6819    LDR	R1, [R3, #0]
0x167A	0x2201    MOVS	R2, #1
0x167C	0x0152    LSLS	R2, R2, BitPos(ALIGN_bit+0)
0x167E	0x4391    BICS	R1, R2
0x1680	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 143 :: 		
0x1682	0x4B19    LDR	R3, [PC, #100]
0x1684	0x6819    LDR	R1, [R3, #0]
0x1686	0x2201    MOVS	R2, #1
0x1688	0x0352    LSLS	R2, R2, BitPos(CONT_bit+0)
0x168A	0x4391    BICS	R1, R2
0x168C	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 146 :: 		
0x168E	0x4B17    LDR	R3, [PC, #92]
0x1690	0x6819    LDR	R1, [R3, #0]
0x1692	0x2201    MOVS	R2, #1
0x1694	0x0292    LSLS	R2, R2, BitPos(EXTEN0_bit+0)
0x1696	0x4391    BICS	R1, R2
0x1698	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 147 :: 		
0x169A	0x4B15    LDR	R3, [PC, #84]
0x169C	0x6819    LDR	R1, [R3, #0]
0x169E	0x2201    MOVS	R2, #1
0x16A0	0x02D2    LSLS	R2, R2, BitPos(EXTEN1_bit+0)
0x16A2	0x4391    BICS	R1, R2
0x16A4	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_32F0x_10ch.c, 148 :: 		
L_end_ADCx_Init:
0x16A6	0xB004    ADD	SP, SP, #16
0x16A8	0xBD00    POP	(R15)
0x16AA	0xBF00    NOP
0x16AC	0x24084001  	ADSTART_bit+0
0x16B0	0x24084001  	ADSTP_bit+0
0x16B4	0x10344002  	RCC_CR2bits+0
0x16B8	0x24104001  	ADC_CFGR2+0
0x16BC	0x3F0001AB  	#28000000
0x16C0	0x24084001  	ADEN_bit+0
0x16C4	0x24084001  	ADCAL_bit+0
0x16C8	0x24144001  	SMPR0_bit+0
0x16CC	0x24144001  	SMPR1_bit+0
0x16D0	0x24144001  	SMPR2_bit+0
0x16D4	0x240C4001  	RES0_bit+0
0x16D8	0x240C4001  	RES1_bit+0
0x16DC	0x24004001  	ADRDY_bit+0
0x16E0	0x240C4001  	SCANDIR_bit+0
0x16E4	0x240C4001  	ALIGN_bit+0
0x16E8	0x240C4001  	CONT_bit+0
0x16EC	0x240C4001  	EXTEN0_bit+0
0x16F0	0x240C4001  	EXTEN1_bit+0
; end of __Lib_ADC_32F0x_10ch_ADCx_Init
_RCC_GetClocksFrequency:
;__Lib_System.c, 417 :: 		
; RCC_Clocks start address is: 0 (R0)
0x085C	0xB500    PUSH	(R14)
0x085E	0xB081    SUB	SP, SP, #4
0x0860	0x4603    MOV	R3, R0
; RCC_Clocks end address is: 0 (R0)
; RCC_Clocks start address is: 12 (R3)
;__Lib_System.c, 421 :: 		
0x0862	0x4619    MOV	R1, R3
0x0864	0x9100    STR	R1, [SP, #0]
0x0866	0xF7FFFCE3  BL	_Get_Fosc_kHz+0
0x086A	0x4921    LDR	R1, [PC, #132]
0x086C	0x460A    MOV	R2, R1
0x086E	0x4342    MULS	R2, R0, R2
0x0870	0x9900    LDR	R1, [SP, #0]
0x0872	0x600A    STR	R2, [R1, #0]
;__Lib_System.c, 425 :: 		
0x0874	0x491F    LDR	R1, [PC, #124]
0x0876	0x680A    LDR	R2, [R1, #0]
0x0878	0x21F0    MOVS	R1, #240
0x087A	0x4011    ANDS	R1, R2
;__Lib_System.c, 426 :: 		
0x087C	0x090A    LSRS	R2, R1, #4
;__Lib_System.c, 427 :: 		
0x087E	0x491E    LDR	R1, [PC, #120]
0x0880	0x1889    ADDS	R1, R1, R2
0x0882	0x7808    LDRB	R0, [R1, #0]
; presc start address is: 0 (R0)
0x0884	0xB2C0    UXTB	R0, R0
;__Lib_System.c, 429 :: 		
0x0886	0x1D1A    ADDS	R2, R3, #4
0x0888	0x6819    LDR	R1, [R3, #0]
0x088A	0x40C1    LSRS	R1, R0
; presc end address is: 0 (R0)
0x088C	0x6011    STR	R1, [R2, #0]
;__Lib_System.c, 432 :: 		
0x088E	0x4919    LDR	R1, [PC, #100]
0x0890	0x680A    LDR	R2, [R1, #0]
0x0892	0x491A    LDR	R1, [PC, #104]
0x0894	0x4011    ANDS	R1, R2
;__Lib_System.c, 433 :: 		
0x0896	0x0A0A    LSRS	R2, R1, #8
;__Lib_System.c, 434 :: 		
0x0898	0x4917    LDR	R1, [PC, #92]
0x089A	0x1889    ADDS	R1, R1, R2
0x089C	0x7809    LDRB	R1, [R1, #0]
; presc start address is: 0 (R0)
0x089E	0xB2C8    UXTB	R0, R1
;__Lib_System.c, 436 :: 		
0x08A0	0x461A    MOV	R2, R3
0x08A2	0x3208    ADDS	R2, #8
0x08A4	0x1D19    ADDS	R1, R3, #4
0x08A6	0x6809    LDR	R1, [R1, #0]
0x08A8	0x40C1    LSRS	R1, R0
; presc end address is: 0 (R0)
0x08AA	0x6011    STR	R1, [R2, #0]
;__Lib_System.c, 439 :: 		
0x08AC	0x4914    LDR	R1, [PC, #80]
0x08AE	0x680A    LDR	R2, [R1, #0]
0x08B0	0x2101    MOVS	R1, #1
0x08B2	0x4011    ANDS	R1, R2
0x08B4	0x2900    CMP	R1, #0
0x08B6	0xD004    BEQ	L_RCC_GetClocksFrequency36
;__Lib_System.c, 440 :: 		
0x08B8	0x461A    MOV	R2, R3
0x08BA	0x320C    ADDS	R2, #12
; RCC_Clocks end address is: 12 (R3)
0x08BC	0x4911    LDR	R1, [PC, #68]
0x08BE	0x6011    STR	R1, [R2, #0]
0x08C0	0xE014    B	L_RCC_GetClocksFrequency37
L_RCC_GetClocksFrequency36:
;__Lib_System.c, 441 :: 		
; RCC_Clocks start address is: 12 (R3)
0x08C2	0x4619    MOV	R1, R3
0x08C4	0x3108    ADDS	R1, #8
0x08C6	0x680A    LDR	R2, [R1, #0]
0x08C8	0x490F    LDR	R1, [PC, #60]
0x08CA	0x428A    CMP	R2, R1
0x08CC	0xD907    BLS	L_RCC_GetClocksFrequency38
;__Lib_System.c, 442 :: 		
0x08CE	0x461A    MOV	R2, R3
0x08D0	0x320C    ADDS	R2, #12
0x08D2	0x4619    MOV	R1, R3
0x08D4	0x3108    ADDS	R1, #8
; RCC_Clocks end address is: 12 (R3)
0x08D6	0x6809    LDR	R1, [R1, #0]
0x08D8	0x0889    LSRS	R1, R1, #2
0x08DA	0x6011    STR	R1, [R2, #0]
0x08DC	0xE006    B	L_RCC_GetClocksFrequency39
L_RCC_GetClocksFrequency38:
;__Lib_System.c, 444 :: 		
; RCC_Clocks start address is: 12 (R3)
0x08DE	0x461A    MOV	R2, R3
0x08E0	0x320C    ADDS	R2, #12
0x08E2	0x4619    MOV	R1, R3
0x08E4	0x3108    ADDS	R1, #8
; RCC_Clocks end address is: 12 (R3)
0x08E6	0x6809    LDR	R1, [R1, #0]
0x08E8	0x0849    LSRS	R1, R1, #1
0x08EA	0x6011    STR	R1, [R2, #0]
L_RCC_GetClocksFrequency39:
L_RCC_GetClocksFrequency37:
;__Lib_System.c, 445 :: 		
L_end_RCC_GetClocksFrequency:
0x08EC	0xB001    ADD	SP, SP, #4
0x08EE	0xBD00    POP	(R15)
0x08F0	0x03E80000  	#1000
0x08F4	0x10044002  	RCC_CFGR+0
0x08F8	0x38520000  	__Lib_System_APBAHBPrescTable+0
0x08FC	0x07000000  	#1792
0x0900	0x10344002  	RCC_CR2bits+0
0x0904	0x9F8000D5  	#14000000
0x0908	0x3600016E  	#24000000
; end of _RCC_GetClocksFrequency
_Get_Fosc_kHz:
;__Lib_Delays.c, 9 :: 		unsigned long Get_Fosc_kHz(){
0x0230	0xB500    PUSH	(R14)
;__Lib_Delays.c, 10 :: 		return __System_CLOCK_IN_KHZ;
0x0232	0x4801    LDR	R0, [PC, #4]
0x0234	0x6800    LDR	R0, [R0, #0]
;__Lib_Delays.c, 11 :: 		}
L_end_Get_Fosc_kHz:
0x0236	0xBD00    POP	(R15)
0x0238	0x01D42000  	___System_CLOCK_IN_KHZ+0
; end of _Get_Fosc_kHz
_ADC_Set_Input_Channel:
;__Lib_ADC_32F0x_10ch.c, 54 :: 		
0x22C8	0xB500    PUSH	(R14)
0x22CA	0xB081    SUB	SP, SP, #4
0x22CC	0x9000    STR	R0, [SP, #0]
;__Lib_ADC_32F0x_10ch.c, 56 :: 		
0x22CE	0x9A00    LDR	R2, [SP, #0]
0x22D0	0xB292    UXTH	R2, R2
0x22D2	0x2101    MOVS	R1, #1
0x22D4	0x4011    ANDS	R1, R2
0x22D6	0x2900    CMP	R1, #0
0x22D8	0xD003    BEQ	L_ADC_Set_Input_Channel0
;__Lib_ADC_32F0x_10ch.c, 57 :: 		
0x22DA	0x2101    MOVS	R1, #1
0x22DC	0x4834    LDR	R0, [PC, #208]
0x22DE	0xF7FFF937  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel0:
;__Lib_ADC_32F0x_10ch.c, 59 :: 		
0x22E2	0x9A00    LDR	R2, [SP, #0]
0x22E4	0xB292    UXTH	R2, R2
0x22E6	0x2102    MOVS	R1, #2
0x22E8	0x4011    ANDS	R1, R2
0x22EA	0x0849    LSRS	R1, R1, #1
0x22EC	0x2900    CMP	R1, #0
0x22EE	0xD003    BEQ	L_ADC_Set_Input_Channel1
;__Lib_ADC_32F0x_10ch.c, 60 :: 		
0x22F0	0x2102    MOVS	R1, #2
0x22F2	0x482F    LDR	R0, [PC, #188]
0x22F4	0xF7FFF92C  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel1:
;__Lib_ADC_32F0x_10ch.c, 62 :: 		
0x22F8	0x9A00    LDR	R2, [SP, #0]
0x22FA	0xB292    UXTH	R2, R2
0x22FC	0x2104    MOVS	R1, #4
0x22FE	0x4011    ANDS	R1, R2
0x2300	0x0889    LSRS	R1, R1, #2
0x2302	0x2900    CMP	R1, #0
0x2304	0xD003    BEQ	L_ADC_Set_Input_Channel2
;__Lib_ADC_32F0x_10ch.c, 63 :: 		
0x2306	0x2104    MOVS	R1, #4
0x2308	0x4829    LDR	R0, [PC, #164]
0x230A	0xF7FFF921  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel2:
;__Lib_ADC_32F0x_10ch.c, 65 :: 		
0x230E	0x9A00    LDR	R2, [SP, #0]
0x2310	0xB292    UXTH	R2, R2
0x2312	0x2108    MOVS	R1, #8
0x2314	0x4011    ANDS	R1, R2
0x2316	0x08C9    LSRS	R1, R1, #3
0x2318	0x2900    CMP	R1, #0
0x231A	0xD003    BEQ	L_ADC_Set_Input_Channel3
;__Lib_ADC_32F0x_10ch.c, 66 :: 		
0x231C	0x2108    MOVS	R1, #8
0x231E	0x4824    LDR	R0, [PC, #144]
0x2320	0xF7FFF916  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel3:
;__Lib_ADC_32F0x_10ch.c, 68 :: 		
0x2324	0x9A00    LDR	R2, [SP, #0]
0x2326	0xB292    UXTH	R2, R2
0x2328	0x2110    MOVS	R1, #16
0x232A	0x4011    ANDS	R1, R2
0x232C	0x0909    LSRS	R1, R1, #4
0x232E	0x2900    CMP	R1, #0
0x2330	0xD003    BEQ	L_ADC_Set_Input_Channel4
;__Lib_ADC_32F0x_10ch.c, 69 :: 		
0x2332	0x2110    MOVS	R1, #16
0x2334	0x481E    LDR	R0, [PC, #120]
0x2336	0xF7FFF90B  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel4:
;__Lib_ADC_32F0x_10ch.c, 71 :: 		
0x233A	0x9A00    LDR	R2, [SP, #0]
0x233C	0xB292    UXTH	R2, R2
0x233E	0x2120    MOVS	R1, #32
0x2340	0x4011    ANDS	R1, R2
0x2342	0x0949    LSRS	R1, R1, #5
0x2344	0x2900    CMP	R1, #0
0x2346	0xD003    BEQ	L_ADC_Set_Input_Channel5
;__Lib_ADC_32F0x_10ch.c, 72 :: 		
0x2348	0x2120    MOVS	R1, #32
0x234A	0x4819    LDR	R0, [PC, #100]
0x234C	0xF7FFF900  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel5:
;__Lib_ADC_32F0x_10ch.c, 74 :: 		
0x2350	0x9A00    LDR	R2, [SP, #0]
0x2352	0xB292    UXTH	R2, R2
0x2354	0x2140    MOVS	R1, #64
0x2356	0x4011    ANDS	R1, R2
0x2358	0x0989    LSRS	R1, R1, #6
0x235A	0x2900    CMP	R1, #0
0x235C	0xD003    BEQ	L_ADC_Set_Input_Channel6
;__Lib_ADC_32F0x_10ch.c, 75 :: 		
0x235E	0x2140    MOVS	R1, #64
0x2360	0x4813    LDR	R0, [PC, #76]
0x2362	0xF7FFF8F5  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel6:
;__Lib_ADC_32F0x_10ch.c, 77 :: 		
0x2366	0x9A00    LDR	R2, [SP, #0]
0x2368	0xB292    UXTH	R2, R2
0x236A	0x2180    MOVS	R1, #128
0x236C	0x4011    ANDS	R1, R2
0x236E	0x09C9    LSRS	R1, R1, #7
0x2370	0x2900    CMP	R1, #0
0x2372	0xD003    BEQ	L_ADC_Set_Input_Channel7
;__Lib_ADC_32F0x_10ch.c, 78 :: 		
0x2374	0x2180    MOVS	R1, #128
0x2376	0x480E    LDR	R0, [PC, #56]
0x2378	0xF7FFF8EA  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel7:
;__Lib_ADC_32F0x_10ch.c, 80 :: 		
0x237C	0x9A00    LDR	R2, [SP, #0]
0x237E	0xB292    UXTH	R2, R2
0x2380	0x2101    MOVS	R1, #1
0x2382	0x0209    LSLS	R1, R1, #8
0x2384	0x4011    ANDS	R1, R2
0x2386	0x0A09    LSRS	R1, R1, #8
0x2388	0x2900    CMP	R1, #0
0x238A	0xD003    BEQ	L_ADC_Set_Input_Channel8
;__Lib_ADC_32F0x_10ch.c, 81 :: 		
0x238C	0x2101    MOVS	R1, #1
0x238E	0x4809    LDR	R0, [PC, #36]
0x2390	0xF7FFF8DE  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel8:
;__Lib_ADC_32F0x_10ch.c, 83 :: 		
0x2394	0x9A00    LDR	R2, [SP, #0]
0x2396	0xB292    UXTH	R2, R2
0x2398	0x2101    MOVS	R1, #1
0x239A	0x0249    LSLS	R1, R1, #9
0x239C	0x4011    ANDS	R1, R2
0x239E	0x0A49    LSRS	R1, R1, #9
0x23A0	0x2900    CMP	R1, #0
0x23A2	0xD003    BEQ	L_ADC_Set_Input_Channel9
;__Lib_ADC_32F0x_10ch.c, 84 :: 		
0x23A4	0x2102    MOVS	R1, #2
0x23A6	0x4803    LDR	R0, [PC, #12]
0x23A8	0xF7FFF8D2  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel9:
;__Lib_ADC_32F0x_10ch.c, 85 :: 		
L_end_ADC_Set_Input_Channel:
0x23AC	0xB001    ADD	SP, SP, #4
0x23AE	0xBD00    POP	(R15)
0x23B0	0x00004800  	GPIOA_BASE+0
0x23B4	0x04004800  	GPIOB_BASE+0
; end of _ADC_Set_Input_Channel
_GPIO_Analog_Input:
;__Lib_GPIO_32F0xx.c, 568 :: 		
; pinMask start address is: 4 (R1)
; port start address is: 0 (R0)
0x1550	0xB500    PUSH	(R14)
; pinMask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pinMask start address is: 4 (R1)
;__Lib_GPIO_32F0xx.c, 570 :: 		
0x1552	0x2201    MOVS	R2, #1
0x1554	0xB289    UXTH	R1, R1
; pinMask end address is: 4 (R1)
; port end address is: 0 (R0)
0x1556	0xF000FD4D  BL	_GPIO_Config+0
;__Lib_GPIO_32F0xx.c, 571 :: 		
L_end_GPIO_Analog_Input:
0x155A	0xBD00    POP	(R15)
; end of _GPIO_Analog_Input
_StartTimer3_10ms:
;timer_func.c, 4 :: 		void StartTimer3_10ms(){
0x3494	0xB500    PUSH	(R14)
;timer_func.c, 5 :: 		RCC_APB1ENRbits.TIM3EN = ON;
0x3496	0x4A0F    LDR	R2, [PC, #60]
0x3498	0x6810    LDR	R0, [R2, #0]
0x349A	0x2102    MOVS	R1, #2
0x349C	0x4308    ORRS	R0, R1
0x349E	0x6010    STR	R0, [R2, #0]
;timer_func.c, 6 :: 		TIM3_CR1bits.CEN = OFF;
0x34A0	0x4A0D    LDR	R2, [PC, #52]
0x34A2	0x6810    LDR	R0, [R2, #0]
0x34A4	0x2101    MOVS	R1, #1
0x34A6	0x4388    BICS	R0, R1
0x34A8	0x6010    STR	R0, [R2, #0]
;timer_func.c, 7 :: 		TIM3_PSC = 7;
0x34AA	0x2107    MOVS	R1, #7
0x34AC	0x480B    LDR	R0, [PC, #44]
0x34AE	0x6001    STR	R1, [R0, #0]
;timer_func.c, 8 :: 		TIM3_ARR = 59999;
0x34B0	0x490B    LDR	R1, [PC, #44]
0x34B2	0x480C    LDR	R0, [PC, #48]
0x34B4	0x6001    STR	R1, [R0, #0]
;timer_func.c, 9 :: 		NVIC_IntEnable(IVT_INT_TIM3);
0x34B6	0x2020    MOVS	R0, #32
0x34B8	0xF7FEFFE8  BL	_NVIC_IntEnable+0
;timer_func.c, 10 :: 		TIM3_DIERbits.UIE = ON;
0x34BC	0x4A0A    LDR	R2, [PC, #40]
0x34BE	0x6810    LDR	R0, [R2, #0]
0x34C0	0x2101    MOVS	R1, #1
0x34C2	0x4308    ORRS	R0, R1
0x34C4	0x6010    STR	R0, [R2, #0]
;timer_func.c, 11 :: 		TIM3_CR1bits.CEN = ON;
0x34C6	0x4A04    LDR	R2, [PC, #16]
0x34C8	0x6810    LDR	R0, [R2, #0]
0x34CA	0x2101    MOVS	R1, #1
0x34CC	0x4308    ORRS	R0, R1
0x34CE	0x6010    STR	R0, [R2, #0]
;timer_func.c, 12 :: 		}
L_end_StartTimer3_10ms:
0x34D0	0xBD00    POP	(R15)
0x34D2	0xBF00    NOP
0x34D4	0x101C4002  	#1073877020
0x34D8	0x04004000  	#1073742848
0x34DC	0x04284000  	1073742888
0x34E0	0xEA5F0000  	#59999
0x34E4	0x042C4000  	1073742892
0x34E8	0x040C4000  	#1073742860
; end of _StartTimer3_10ms
_NVIC_IntEnable:
;__Lib_System.c, 164 :: 		
; ivt start address is: 0 (R0)
0x248C	0xB500    PUSH	(R14)
; ivt end address is: 0 (R0)
; ivt start address is: 0 (R0)
;__Lib_System.c, 177 :: 		
0x248E	0x280F    CMP	R0, #15
0x2490	0xD106    BNE	L_NVIC_IntEnable6
; ivt end address is: 0 (R0)
;__Lib_System.c, 183 :: 		
0x2492	0x490B    LDR	R1, [PC, #44]
0x2494	0x680A    LDR	R2, [R1, #0]
0x2496	0x2102    MOVS	R1, #2
0x2498	0x430A    ORRS	R2, R1
0x249A	0x4909    LDR	R1, [PC, #36]
0x249C	0x600A    STR	R2, [R1, #0]
;__Lib_System.c, 184 :: 		
0x249E	0xE00D    B	L_NVIC_IntEnable7
L_NVIC_IntEnable6:
;__Lib_System.c, 185 :: 		
; ivt start address is: 0 (R0)
0x24A0	0x2810    CMP	R0, #16
0x24A2	0xD30B    BCC	L_NVIC_IntEnable8
;__Lib_System.c, 190 :: 		
0x24A4	0x4603    MOV	R3, R0
0x24A6	0x3B10    SUBS	R3, #16
; ivt end address is: 0 (R0)
0x24A8	0x0959    LSRS	R1, R3, #5
0x24AA	0x008A    LSLS	R2, R1, #2
0x24AC	0x4905    LDR	R1, [PC, #20]
0x24AE	0x188C    ADDS	R4, R1, R2
;__Lib_System.c, 191 :: 		
0x24B0	0x211F    MOVS	R1, #31
0x24B2	0x400B    ANDS	R3, R1
0x24B4	0x2201    MOVS	R2, #1
0x24B6	0x4611    MOV	R1, R2
0x24B8	0x4099    LSLS	R1, R3
0x24BA	0x6021    STR	R1, [R4, #0]
;__Lib_System.c, 192 :: 		
L_NVIC_IntEnable8:
L_NVIC_IntEnable7:
;__Lib_System.c, 193 :: 		
L_end_NVIC_IntEnable:
0x24BC	0xBD00    POP	(R15)
0x24BE	0xBF00    NOP
0x24C0	0xE010E000  	STK_CSR+0
0x24C4	0xE100E000  	NVIC_ISER+0
; end of _NVIC_IntEnable
_InitUartModuleBTU:
;uart.c, 7 :: 		void InitUartModuleBTU()
0x34EC	0xB500    PUSH	(R14)
;uart.c, 9 :: 		UART1_Init_Advanced(BAUD_RATE, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, &_GPIO_MODULE_USART1_PA9_10);
0x34EE	0x4808    LDR	R0, [PC, #32]
0x34F0	0xB401    PUSH	(R0)
0x34F2	0x2300    MOVS	R3, #0
0x34F4	0x2200    MOVS	R2, #0
0x34F6	0x2100    MOVS	R1, #0
0x34F8	0x4806    LDR	R0, [PC, #24]
0x34FA	0xF7FEFFB7  BL	_UART1_Init_Advanced+0
0x34FE	0xB001    ADD	SP, SP, #4
;uart.c, 10 :: 		USART1_CR1 = USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE|USART_CR1_TE;
0x3500	0x212D    MOVS	R1, #45
0x3502	0x4805    LDR	R0, [PC, #20]
0x3504	0x6001    STR	R1, [R0, #0]
;uart.c, 11 :: 		NVIC_IntEnable(IVT_INT_USART1);
0x3506	0x202B    MOVS	R0, #43
0x3508	0xF7FEFFC0  BL	_NVIC_IntEnable+0
;uart.c, 12 :: 		}
L_end_InitUartModuleBTU:
0x350C	0xBD00    POP	(R15)
0x350E	0xBF00    NOP
0x3510	0x375C0000  	__GPIO_MODULE_USART1_PA9_10+0
0x3514	0x25800000  	#9600
0x3518	0x38004001  	1073821696
; end of _InitUartModuleBTU
_UART1_Init_Advanced:
;__Lib_UART_1.c, 193 :: 		
; stop_bits start address is: 12 (R3)
; parity start address is: 8 (R2)
; data_bits start address is: 4 (R1)
; baud_rate start address is: 0 (R0)
0x246C	0xB500    PUSH	(R14)
; stop_bits end address is: 12 (R3)
; parity end address is: 8 (R2)
; data_bits end address is: 4 (R1)
; baud_rate end address is: 0 (R0)
; baud_rate start address is: 0 (R0)
; data_bits start address is: 4 (R1)
; parity start address is: 8 (R2)
; stop_bits start address is: 12 (R3)
; module start address is: 20 (R5)
0x246E	0x9D01    LDR	R5, [SP, #4]
;__Lib_UART_1.c, 195 :: 		
0x2470	0x462C    MOV	R4, R5
; module end address is: 20 (R5)
0x2472	0xB410    PUSH	(R4)
; parity end address is: 8 (R2)
0x2474	0xB408    PUSH	(R3)
0x2476	0xB293    UXTH	R3, R2
0x2478	0xB28A    UXTH	R2, R1
; data_bits end address is: 4 (R1)
0x247A	0x4601    MOV	R1, R0
; baud_rate end address is: 0 (R0)
0x247C	0x4802    LDR	R0, [PC, #8]
; stop_bits end address is: 12 (R3)
0x247E	0xF7FFF991  BL	__Lib_UART_1_UARTx_Init_Advanced+0
0x2482	0xB002    ADD	SP, SP, #8
;__Lib_UART_1.c, 196 :: 		
L_end_UART1_Init_Advanced:
0x2484	0xBD00    POP	(R15)
0x2486	0xBF00    NOP
0x2488	0x38004001  	USART1_CR1+0
; end of _UART1_Init_Advanced
__Lib_UART_1_UARTx_Init_Advanced:
;__Lib_UART_1.c, 151 :: 		
0x17A4	0xB500    PUSH	(R14)
0x17A6	0xB089    SUB	SP, SP, #36
0x17A8	0x9006    STR	R0, [SP, #24]
0x17AA	0x9107    STR	R1, [SP, #28]
0x17AC	0x9308    STR	R3, [SP, #32]
0x17AE	0x9C0A    LDR	R4, [SP, #40]
0x17B0	0xB2A4    UXTH	R4, R4
0x17B2	0x940A    STR	R4, [SP, #40]
0x17B4	0x9C0B    LDR	R4, [SP, #44]
0x17B6	0x940B    STR	R4, [SP, #44]
;__Lib_UART_1.c, 155 :: 		
0x17B8	0x2408    MOVS	R4, #8
0x17BA	0x446C    ADD	R4, SP, R4
0x17BC	0x4620    MOV	R0, R4
0x17BE	0xF7FFF84D  BL	_RCC_GetClocksFrequency+0
;__Lib_UART_1.c, 157 :: 		
0x17C2	0x4E33    LDR	R6, [PC, #204]
0x17C4	0x6834    LDR	R4, [R6, #0]
0x17C6	0x2501    MOVS	R5, #1
0x17C8	0x03AD    LSLS	R5, R5, #14
0x17CA	0x432C    ORRS	R4, R5
0x17CC	0x6034    STR	R4, [R6, #0]
;__Lib_UART_1.c, 158 :: 		
0x17CE	0x4D31    LDR	R5, [PC, #196]
0x17D0	0x4C31    LDR	R4, [PC, #196]
0x17D2	0x6025    STR	R5, [R4, #0]
;__Lib_UART_1.c, 159 :: 		
0x17D4	0x4D31    LDR	R5, [PC, #196]
0x17D6	0x4C32    LDR	R4, [PC, #200]
0x17D8	0x6025    STR	R5, [R4, #0]
;__Lib_UART_1.c, 160 :: 		
0x17DA	0x4D32    LDR	R5, [PC, #200]
0x17DC	0x4C32    LDR	R4, [PC, #200]
0x17DE	0x6025    STR	R5, [R4, #0]
;__Lib_UART_1.c, 161 :: 		
0x17E0	0x4D32    LDR	R5, [PC, #200]
0x17E2	0x4C33    LDR	R4, [PC, #204]
0x17E4	0x6025    STR	R5, [R4, #0]
;__Lib_UART_1.c, 162 :: 		
0x17E6	0x9C04    LDR	R4, [SP, #16]
0x17E8	0x9400    STR	R4, [SP, #0]
;__Lib_UART_1.c, 164 :: 		
0x17EA	0x980B    LDR	R0, [SP, #44]
0x17EC	0xF7FFF88E  BL	_GPIO_Alternate_Function_Enable+0
;__Lib_UART_1.c, 166 :: 		
0x17F0	0x9C06    LDR	R4, [SP, #24]
0x17F2	0x1D25    ADDS	R5, R4, #4
0x17F4	0x2400    MOVS	R4, #0
0x17F6	0x602C    STR	R4, [R5, #0]
;__Lib_UART_1.c, 167 :: 		
0x17F8	0x9C06    LDR	R4, [SP, #24]
0x17FA	0x1D26    ADDS	R6, R4, #4
0x17FC	0x6835    LDR	R5, [R6, #0]
0x17FE	0x9C0A    LDR	R4, [SP, #40]
0x1800	0xB2A4    UXTH	R4, R4
0x1802	0x432C    ORRS	R4, R5
0x1804	0x6034    STR	R4, [R6, #0]
;__Lib_UART_1.c, 168 :: 		
0x1806	0x2500    MOVS	R5, #0
0x1808	0x9C06    LDR	R4, [SP, #24]
0x180A	0x6025    STR	R5, [R4, #0]
;__Lib_UART_1.c, 170 :: 		
0x180C	0x9C08    LDR	R4, [SP, #32]
0x180E	0xB2A4    UXTH	R4, R4
0x1810	0x2C00    CMP	R4, #0
0x1812	0xD004    BEQ	L___Lib_UART_1_UARTx_Init_Advanced15
;__Lib_UART_1.c, 171 :: 		
0x1814	0x9D08    LDR	R5, [SP, #32]
0x1816	0xB2AD    UXTH	R5, R5
0x1818	0x4C26    LDR	R4, [PC, #152]
0x181A	0x432C    ORRS	R4, R5
0x181C	0x9408    STR	R4, [SP, #32]
;__Lib_UART_1.c, 172 :: 		
L___Lib_UART_1_UARTx_Init_Advanced15:
;__Lib_UART_1.c, 174 :: 		
0x181E	0x9C06    LDR	R4, [SP, #24]
0x1820	0x6825    LDR	R5, [R4, #0]
0x1822	0x9C08    LDR	R4, [SP, #32]
0x1824	0xB2A4    UXTH	R4, R4
0x1826	0x4325    ORRS	R5, R4
0x1828	0x9C06    LDR	R4, [SP, #24]
0x182A	0x6025    STR	R5, [R4, #0]
;__Lib_UART_1.c, 176 :: 		
0x182C	0x9C06    LDR	R4, [SP, #24]
0x182E	0x6825    LDR	R5, [R4, #0]
0x1830	0x240D    MOVS	R4, #13
0x1832	0x4325    ORRS	R5, R4
0x1834	0x9C06    LDR	R4, [SP, #24]
0x1836	0x6025    STR	R5, [R4, #0]
;__Lib_UART_1.c, 178 :: 		
0x1838	0x9C06    LDR	R4, [SP, #24]
0x183A	0x4625    MOV	R5, R4
0x183C	0x3508    ADDS	R5, #8
0x183E	0x2400    MOVS	R4, #0
0x1840	0x602C    STR	R4, [R5, #0]
;__Lib_UART_1.c, 183 :: 		
0x1842	0x9D00    LDR	R5, [SP, #0]
0x1844	0x2419    MOVS	R4, #25
0x1846	0x4628    MOV	R0, R5
0x1848	0x4360    MULS	R0, R4, R0
0x184A	0x9C07    LDR	R4, [SP, #28]
0x184C	0x00A2    LSLS	R2, R4, #2
0x184E	0xF7FEFF83  BL	__Div_32x32_U+0
; integerdivider start address is: 28 (R7)
0x1852	0x4607    MOV	R7, R0
;__Lib_UART_1.c, 184 :: 		
0x1854	0x2264    MOVS	R2, #100
0x1856	0xF7FEFF7F  BL	__Div_32x32_U+0
0x185A	0x0104    LSLS	R4, R0, #4
0x185C	0x9401    STR	R4, [SP, #4]
;__Lib_UART_1.c, 186 :: 		
0x185E	0x0926    LSRS	R6, R4, #4
0x1860	0x2564    MOVS	R5, #100
0x1862	0x4634    MOV	R4, R6
0x1864	0x436C    MULS	R4, R5, R4
0x1866	0x1B3C    SUBS	R4, R7, R4
; integerdivider end address is: 28 (R7)
;__Lib_UART_1.c, 187 :: 		
0x1868	0x0124    LSLS	R4, R4, #4
0x186A	0x4620    MOV	R0, R4
0x186C	0x3032    ADDS	R0, #50
0x186E	0x2264    MOVS	R2, #100
0x1870	0xF7FEFF72  BL	__Div_32x32_U+0
0x1874	0x240F    MOVS	R4, #15
0x1876	0x4605    MOV	R5, R0
0x1878	0x4025    ANDS	R5, R4
0x187A	0x9C01    LDR	R4, [SP, #4]
0x187C	0x4626    MOV	R6, R4
0x187E	0x432E    ORRS	R6, R5
;__Lib_UART_1.c, 189 :: 		
0x1880	0x9C06    LDR	R4, [SP, #24]
0x1882	0x4625    MOV	R5, R4
0x1884	0x350C    ADDS	R5, #12
0x1886	0xB2B4    UXTH	R4, R6
0x1888	0x602C    STR	R4, [R5, #0]
;__Lib_UART_1.c, 190 :: 		
L_end_UARTx_Init_Advanced:
0x188A	0xB009    ADD	SP, SP, #36
0x188C	0xBD00    POP	(R15)
0x188E	0xBF00    NOP
0x1890	0x10184002  	RCC_APB2ENR+0
0x1894	0x1A210000  	_UART1_Write+0
0x1898	0x01D82000  	_UART_Wr_Ptr+0
0x189C	0xFFFFFFFF  	_UART1_Read+0
0x18A0	0x01DC2000  	_UART_Rd_Ptr+0
0x18A4	0xFFFFFFFF  	_UART1_Data_Ready+0
0x18A8	0x01E02000  	_UART_Rdy_Ptr+0
0x18AC	0xFFFFFFFF  	_UART1_Tx_Idle+0
0x18B0	0x01E42000  	_UART_Tx_Idle_Ptr+0
0x18B4	0x04000000  	#1024
; end of __Lib_UART_1_UARTx_Init_Advanced
_GPIO_Alternate_Function_Enable:
;__Lib_GPIO_32F0xx.c, 530 :: 		
; module start address is: 0 (R0)
0x090C	0xB500    PUSH	(R14)
0x090E	0xB082    SUB	SP, SP, #8
; module end address is: 0 (R0)
; module start address is: 0 (R0)
;__Lib_GPIO_32F0xx.c, 535 :: 		
; i start address is: 16 (R4)
0x0910	0x2400    MOVS	R4, #0
; module end address is: 0 (R0)
; i end address is: 16 (R4)
;__Lib_GPIO_32F0xx.c, 536 :: 		
L_GPIO_Alternate_Function_Enable58:
; i start address is: 16 (R4)
; module start address is: 0 (R0)
0x0912	0x00A1    LSLS	R1, R4, #2
0x0914	0x1841    ADDS	R1, R0, R1
0x0916	0x680A    LDR	R2, [R1, #0]
0x0918	0x490C    LDR	R1, [PC, #48]
0x091A	0x428A    CMP	R2, R1
0x091C	0xD013    BEQ	L_GPIO_Alternate_Function_Enable59
;__Lib_GPIO_32F0xx.c, 538 :: 		
0x091E	0x4601    MOV	R1, R0
0x0920	0x3134    ADDS	R1, #52
0x0922	0x00A3    LSLS	R3, R4, #2
0x0924	0x18C9    ADDS	R1, R1, R3
0x0926	0x6809    LDR	R1, [R1, #0]
0x0928	0x460A    MOV	R2, R1
0x092A	0x18C1    ADDS	R1, R0, R3
0x092C	0x6809    LDR	R1, [R1, #0]
0x092E	0x9000    STR	R0, [SP, #0]
0x0930	0x9401    STR	R4, [SP, #4]
0x0932	0x4608    MOV	R0, R1
0x0934	0x4611    MOV	R1, R2
0x0936	0xF7FFFC1D  BL	__Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function+0
0x093A	0x9C01    LDR	R4, [SP, #4]
0x093C	0xB2A4    UXTH	R4, R4
0x093E	0x9800    LDR	R0, [SP, #0]
;__Lib_GPIO_32F0xx.c, 539 :: 		
0x0940	0x3401    ADDS	R4, #1
0x0942	0xB2A4    UXTH	R4, R4
;__Lib_GPIO_32F0xx.c, 540 :: 		
; module end address is: 0 (R0)
; i end address is: 16 (R4)
0x0944	0xE7E5    B	L_GPIO_Alternate_Function_Enable58
L_GPIO_Alternate_Function_Enable59:
;__Lib_GPIO_32F0xx.c, 541 :: 		
L_end_GPIO_Alternate_Function_Enable:
0x0946	0xB002    ADD	SP, SP, #8
0x0948	0xBD00    POP	(R15)
0x094A	0xBF00    NOP
0x094C	0xFFFFFFFF  	#-1
; end of _GPIO_Alternate_Function_Enable
__Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function:
;__Lib_GPIO_32F0xx.c, 73 :: 		
; config start address is: 4 (R1)
; afPin start address is: 0 (R0)
0x0174	0xB500    PUSH	(R14)
0x0176	0xB083    SUB	SP, SP, #12
0x0178	0x460C    MOV	R4, R1
; config end address is: 4 (R1)
; afPin end address is: 0 (R0)
; afPin start address is: 0 (R0)
; config start address is: 16 (R4)
;__Lib_GPIO_32F0xx.c, 84 :: 		
0x017A	0x22FF    MOVS	R2, #255
0x017C	0x4603    MOV	R3, R0
0x017E	0x4013    ANDS	R3, R2
0x0180	0x091A    LSRS	R2, R3, #4
; port start address is: 20 (R5)
0x0182	0x4615    MOV	R5, R2
;__Lib_GPIO_32F0xx.c, 85 :: 		
0x0184	0x220F    MOVS	R2, #15
0x0186	0x4619    MOV	R1, R3
0x0188	0x4011    ANDS	R1, R2
; pin start address is: 4 (R1)
;__Lib_GPIO_32F0xx.c, 86 :: 		
0x018A	0x0A03    LSRS	R3, R0, #8
; afPin end address is: 0 (R0)
0x018C	0x220F    MOVS	R2, #15
0x018E	0x401A    ANDS	R2, R3
; af start address is: 0 (R0)
0x0190	0x4610    MOV	R0, R2
;__Lib_GPIO_32F0xx.c, 88 :: 		
0x0192	0xE011    B	L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function0
; port end address is: 20 (R5)
;__Lib_GPIO_32F0xx.c, 90 :: 		
L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function2:
;__Lib_GPIO_32F0xx.c, 92 :: 		
0x0194	0x4A20    LDR	R2, [PC, #128]
0x0196	0x9202    STR	R2, [SP, #8]
;__Lib_GPIO_32F0xx.c, 93 :: 		
0x0198	0xE01A    B	L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function1
;__Lib_GPIO_32F0xx.c, 95 :: 		
L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function3:
;__Lib_GPIO_32F0xx.c, 97 :: 		
0x019A	0x4A20    LDR	R2, [PC, #128]
0x019C	0x9202    STR	R2, [SP, #8]
;__Lib_GPIO_32F0xx.c, 98 :: 		
0x019E	0xE017    B	L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function1
;__Lib_GPIO_32F0xx.c, 100 :: 		
L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function4:
;__Lib_GPIO_32F0xx.c, 102 :: 		
0x01A0	0x4A1F    LDR	R2, [PC, #124]
0x01A2	0x9202    STR	R2, [SP, #8]
;__Lib_GPIO_32F0xx.c, 103 :: 		
0x01A4	0xE014    B	L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function1
;__Lib_GPIO_32F0xx.c, 105 :: 		
L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function5:
;__Lib_GPIO_32F0xx.c, 107 :: 		
0x01A6	0x4A1F    LDR	R2, [PC, #124]
0x01A8	0x9202    STR	R2, [SP, #8]
;__Lib_GPIO_32F0xx.c, 108 :: 		
0x01AA	0xE011    B	L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function1
;__Lib_GPIO_32F0xx.c, 110 :: 		
L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function6:
;__Lib_GPIO_32F0xx.c, 112 :: 		
0x01AC	0x4A1E    LDR	R2, [PC, #120]
0x01AE	0x9202    STR	R2, [SP, #8]
;__Lib_GPIO_32F0xx.c, 113 :: 		
0x01B0	0xE00E    B	L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function1
;__Lib_GPIO_32F0xx.c, 115 :: 		
L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function7:
;__Lib_GPIO_32F0xx.c, 117 :: 		
0x01B2	0x4A1E    LDR	R2, [PC, #120]
0x01B4	0x9202    STR	R2, [SP, #8]
;__Lib_GPIO_32F0xx.c, 118 :: 		
0x01B6	0xE00B    B	L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function1
;__Lib_GPIO_32F0xx.c, 120 :: 		
L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function0:
; port start address is: 20 (R5)
0x01B8	0x2D00    CMP	R5, #0
0x01BA	0xD0EB    BEQ	L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function2
0x01BC	0x2D01    CMP	R5, #1
0x01BE	0xD0EC    BEQ	L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function3
0x01C0	0x2D02    CMP	R5, #2
0x01C2	0xD0ED    BEQ	L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function4
0x01C4	0x2D03    CMP	R5, #3
0x01C6	0xD0EE    BEQ	L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function5
0x01C8	0x2D04    CMP	R5, #4
0x01CA	0xD0EF    BEQ	L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function6
0x01CC	0x2D05    CMP	R5, #5
0x01CE	0xD0F0    BEQ	L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function7
; port end address is: 20 (R5)
L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function1:
;__Lib_GPIO_32F0xx.c, 123 :: 		
0x01D0	0x2201    MOVS	R2, #1
0x01D2	0x408A    LSLS	R2, R1
0x01D4	0x9000    STR	R0, [SP, #0]
; config end address is: 16 (R4)
0x01D6	0x9101    STR	R1, [SP, #4]
0x01D8	0xB291    UXTH	R1, R2
0x01DA	0x4622    MOV	R2, R4
0x01DC	0x9802    LDR	R0, [SP, #8]
0x01DE	0xF001FF09  BL	_GPIO_Config+0
0x01E2	0x9901    LDR	R1, [SP, #4]
0x01E4	0x9800    LDR	R0, [SP, #0]
;__Lib_GPIO_32F0xx.c, 126 :: 		
0x01E6	0x9A02    LDR	R2, [SP, #8]
0x01E8	0x4615    MOV	R5, R2
0x01EA	0x3520    ADDS	R5, #32
; altFcnBase start address is: 20 (R5)
;__Lib_GPIO_32F0xx.c, 127 :: 		
0x01EC	0x2907    CMP	R1, #7
0x01EE	0xD902    BLS	L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function80
;__Lib_GPIO_32F0xx.c, 129 :: 		
0x01F0	0x3504    ADDS	R5, #4
;__Lib_GPIO_32F0xx.c, 130 :: 		
0x01F2	0x3908    SUBS	R1, #8
; pin end address is: 4 (R1)
; altFcnBase end address is: 20 (R5)
;__Lib_GPIO_32F0xx.c, 131 :: 		
0x01F4	0xE7FF    B	L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function8
L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function80:
;__Lib_GPIO_32F0xx.c, 127 :: 		
;__Lib_GPIO_32F0xx.c, 131 :: 		
L___Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function8:
;__Lib_GPIO_32F0xx.c, 133 :: 		
; pin start address is: 4 (R1)
; altFcnBase start address is: 20 (R5)
0x01F6	0x008C    LSLS	R4, R1, #2
0x01F8	0x230F    MOVS	R3, #15
0x01FA	0x461A    MOV	R2, R3
0x01FC	0x40A2    LSLS	R2, R4
0x01FE	0x43D3    MVN	R3, R2
0x0200	0x682A    LDR	R2, [R5, #0]
0x0202	0x401A    ANDS	R2, R3
0x0204	0x602A    STR	R2, [R5, #0]
;__Lib_GPIO_32F0xx.c, 135 :: 		
0x0206	0x008A    LSLS	R2, R1, #2
; pin end address is: 4 (R1)
0x0208	0x4603    MOV	R3, R0
0x020A	0x4093    LSLS	R3, R2
; af end address is: 0 (R0)
0x020C	0x682A    LDR	R2, [R5, #0]
0x020E	0x431A    ORRS	R2, R3
0x0210	0x602A    STR	R2, [R5, #0]
; altFcnBase end address is: 20 (R5)
;__Lib_GPIO_32F0xx.c, 136 :: 		
L_end_GPIO_Config_Pin_Alternate_Function:
0x0212	0xB003    ADD	SP, SP, #12
0x0214	0xBD00    POP	(R15)
0x0216	0xBF00    NOP
0x0218	0x00004800  	#1207959552
0x021C	0x04004800  	#1207960576
0x0220	0x08004800  	#1207961600
0x0224	0x0C004800  	#1207962624
0x0228	0x10004800  	#1207963648
0x022C	0x14004800  	#1207964672
; end of __Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function
__Div_32x32_U:
;__Lib_Math.c, 267 :: 		
0x0758	0xB081    SUB	SP, SP, #4
;__Lib_Math.c, 269 :: 		
0x075A	0xB43A    PUSH	(R1, R3, R4, R5)
;__Lib_Math.c, 272 :: 		
0x075C	0x0014    MOVS	R4, R2
;__Lib_Math.c, 273 :: 		
0x075E	0xD102    BNE	_Div_32x32_U_Lab_3
;__Lib_Math.c, 275 :: 		
0x0760	0x4602    MOV	R2, R0
;__Lib_Math.c, 276 :: 		
0x0762	0x480C    LDR	R0, [PC, #48]
;__Lib_Math.c, 277 :: 		
0x0764	0xE013    B	_Div_32x32_U_Lab_end
;__Lib_Math.c, 281 :: 		
_Div_32x32_U_Lab_3:
;__Lib_Math.c, 282 :: 		
0x0766	0x4613    MOV	R3, R2
;__Lib_Math.c, 283 :: 		
0x0768	0x4602    MOV	R2, R0
;__Lib_Math.c, 284 :: 		
0x076A	0x2000    MOVS	R0, #0
;__Lib_Math.c, 285 :: 		
0x076C	0x2120    MOVS	R1, #32
;__Lib_Math.c, 286 :: 		
0x076E	0x2401    MOVS	R4, #1
;__Lib_Math.c, 287 :: 		
0x0770	0xE009    B	_Div_32x32_U_Lab_1
;__Lib_Math.c, 289 :: 		
_Div_32x32_U_Lab_2:
;__Lib_Math.c, 290 :: 		
0x0772	0x4615    MOV	R5, R2
;__Lib_Math.c, 291 :: 		
0x0774	0x40CD    LSRS	R5, R1
;__Lib_Math.c, 292 :: 		
0x0776	0x429D    CMP	R5, R3
;__Lib_Math.c, 293 :: 		
0x0778	0xD305    BCC	_Div_32x32_U_Lab_1
;__Lib_Math.c, 294 :: 		
0x077A	0x461D    MOV	R5, R3
;__Lib_Math.c, 295 :: 		
0x077C	0x408D    LSLS	R5, R1
;__Lib_Math.c, 296 :: 		
0x077E	0x1B52    SUBS	R2, R2, R5
;__Lib_Math.c, 297 :: 		
0x0780	0x4625    MOV	R5, R4
;__Lib_Math.c, 298 :: 		
0x0782	0x408D    LSLS	R5, R1
;__Lib_Math.c, 299 :: 		
0x0784	0x1940    ADDS	R0, R0, R5
;__Lib_Math.c, 301 :: 		
_Div_32x32_U_Lab_1:
;__Lib_Math.c, 302 :: 		
0x0786	0x460D    MOV	R5, R1
;__Lib_Math.c, 303 :: 		
0x0788	0x1E49    SUBS	R1, R1, #1
;__Lib_Math.c, 304 :: 		
0x078A	0x2D00    CMP	R5, #0
;__Lib_Math.c, 305 :: 		
0x078C	0xDCF1    BGT	_Div_32x32_U_Lab_2
;__Lib_Math.c, 307 :: 		
_Div_32x32_U_Lab_end:
;__Lib_Math.c, 308 :: 		
0x078E	0xBC3A    POP	(R1, R3, R4, R5)
;__Lib_Math.c, 309 :: 		
0x0790	0xE002    B	#4
0x0792	0xBF00    NOP
0x0794	0xFFFFFFFF  	#-1
;__Lib_Math.c, 310 :: 		
L_end__Div_32x32_U:
0x0798	0xB001    ADD	SP, SP, #4
0x079A	0x4770    BX	LR
; end of __Div_32x32_U
_WDT_Init:
;timer_func.c, 71 :: 		void WDT_Init()
0x343C	0xB500    PUSH	(R14)
;timer_func.c, 73 :: 		RCC_CSRbits.LSION = 1;
0x343E	0x4A0F    LDR	R2, [PC, #60]
0x3440	0x6810    LDR	R0, [R2, #0]
0x3442	0x2101    MOVS	R1, #1
0x3444	0x4308    ORRS	R0, R1
0x3446	0x6010    STR	R0, [R2, #0]
;timer_func.c, 74 :: 		while(!RCC_CSRbits.LSIRDY);
L_WDT_Init0:
0x3448	0x480C    LDR	R0, [PC, #48]
0x344A	0x6801    LDR	R1, [R0, #0]
0x344C	0x2002    MOVS	R0, #2
0x344E	0x4008    ANDS	R0, R1
0x3450	0x0840    LSRS	R0, R0, #1
0x3452	0x2800    CMP	R0, #0
0x3454	0xD100    BNE	L_WDT_Init1
0x3456	0xE7F7    B	L_WDT_Init0
L_WDT_Init1:
;timer_func.c, 75 :: 		IWDG_KR = 0x5555;      //write with protect
0x3458	0x4909    LDR	R1, [PC, #36]
0x345A	0x480A    LDR	R0, [PC, #40]
0x345C	0x6001    STR	R1, [R0, #0]
;timer_func.c, 76 :: 		IWDG_PRbits.PR = 0x00;  //prescaler
0x345E	0x480A    LDR	R0, [PC, #40]
0x3460	0x7801    LDRB	R1, [R0, #0]
0x3462	0x20F8    MOVS	R0, #248
0x3464	0x4001    ANDS	R1, R0
0x3466	0x0749    LSLS	R1, R1, #29
0x3468	0x0F49    LSRS	R1, R1, #29
0x346A	0x4807    LDR	R0, [PC, #28]
0x346C	0x7001    STRB	R1, [R0, #0]
;timer_func.c, 77 :: 		IWDG_KR = 0xCCCC;      //start watchdog
0x346E	0x4907    LDR	R1, [PC, #28]
0x3470	0x4804    LDR	R0, [PC, #16]
0x3472	0x6001    STR	R1, [R0, #0]
;timer_func.c, 78 :: 		IWDG_KR = 0xAAAA;      //reset watchdog
0x3474	0x4906    LDR	R1, [PC, #24]
0x3476	0x4803    LDR	R0, [PC, #12]
0x3478	0x6001    STR	R1, [R0, #0]
;timer_func.c, 89 :: 		}
L_end_WDT_Init:
0x347A	0xBD00    POP	(R15)
0x347C	0x10244002  	#1073877028
0x3480	0x55550000  	#21845
0x3484	0x30004000  	1073754112
0x3488	0x30044000  	#1073754116
0x348C	0xCCCC0000  	#52428
0x3490	0xAAAA0000  	#43690
; end of _WDT_Init
_ChekTrue:
;eeprom_func.c, 38 :: 		void ChekTrue()
0x351C	0xB500    PUSH	(R14)
;eeprom_func.c, 40 :: 		save_data_to_eeprom_one(ADDRESS2,DEMO_START_COUNT,&flag_t.enable_status);
0x351E	0x4809    LDR	R0, [PC, #36]
0x3520	0x6800    LDR	R0, [R0, #0]
0x3522	0x4A09    LDR	R2, [PC, #36]
0x3524	0x21C8    MOVS	R1, #200
0x3526	0xF7FEFAFB  BL	_save_data_to_eeprom_one+0
;eeprom_func.c, 41 :: 		if(!flag_t.enable_status)
0x352A	0x4807    LDR	R0, [PC, #28]
0x352C	0x7800    LDRB	R0, [R0, #0]
0x352E	0x2800    CMP	R0, #0
0x3530	0xD103    BNE	L_ChekTrue5
;eeprom_func.c, 43 :: 		setState(control_calibration);
0x3532	0x2001    MOVS	R0, #1
0x3534	0xF7FFFDDC  BL	_setState+0
;eeprom_func.c, 44 :: 		}
0x3538	0xE002    B	L_ChekTrue6
L_ChekTrue5:
;eeprom_func.c, 47 :: 		setState(error_calibration);
0x353A	0x2002    MOVS	R0, #2
0x353C	0xF7FFFDD8  BL	_setState+0
;eeprom_func.c, 48 :: 		}
L_ChekTrue6:
;eeprom_func.c, 49 :: 		}
L_end_ChekTrue:
0x3540	0xBD00    POP	(R15)
0x3542	0xBF00    NOP
0x3544	0x00602000  	_ADDRESS2+0
0x3548	0x01772000  	_flag_t+17
; end of _ChekTrue
_save_data_to_eeprom_one:
;eeprom_func.c, 8 :: 		char save_data_to_eeprom_one(unsigned long adr,unsigned unsigned char sample,unsigned char* status)
; sample start address is: 4 (R1)
0x1B20	0xB500    PUSH	(R14)
0x1B22	0xB082    SUB	SP, SP, #8
0x1B24	0x9000    STR	R0, [SP, #0]
0x1B26	0xB2CC    UXTB	R4, R1
0x1B28	0x9201    STR	R2, [SP, #4]
; sample end address is: 4 (R1)
; sample start address is: 16 (R4)
;eeprom_func.c, 10 :: 		unsigned int tmp_data = 0;
;eeprom_func.c, 11 :: 		DisableInterrupts();
0x1B2A	0xF7FFFE35  BL	_DisableInterrupts+0
;eeprom_func.c, 12 :: 		tmp_data = (unsigned int)read_from_eeprom_one(adr);
0x1B2E	0x9800    LDR	R0, [SP, #0]
0x1B30	0xF7FFFE28  BL	_read_from_eeprom_one+0
; tmp_data start address is: 28 (R7)
0x1B34	0xB287    UXTH	R7, R0
;eeprom_func.c, 14 :: 		if((tmp_data>=sample)&&(tmp_data!=0xFFFF))
0x1B36	0x42A0    CMP	R0, R4
0x1B38	0xD309    BCC	L__save_data_to_eeprom_one39
; sample end address is: 16 (R4)
0x1B3A	0x4B17    LDR	R3, [PC, #92]
0x1B3C	0x429F    CMP	R7, R3
0x1B3E	0xD006    BEQ	L__save_data_to_eeprom_one38
; tmp_data end address is: 28 (R7)
L__save_data_to_eeprom_one37:
;eeprom_func.c, 16 :: 		EnableInterrupts();
0x1B40	0xF001FB96  BL	_EnableInterrupts+0
;eeprom_func.c, 17 :: 		*status = SET;
0x1B44	0x2401    MOVS	R4, #1
0x1B46	0x9B01    LDR	R3, [SP, #4]
0x1B48	0x701C    STRB	R4, [R3, #0]
;eeprom_func.c, 18 :: 		return 0;
0x1B4A	0x2000    MOVS	R0, #0
0x1B4C	0xE022    B	L_end_save_data_to_eeprom_one
;eeprom_func.c, 14 :: 		if((tmp_data>=sample)&&(tmp_data!=0xFFFF))
L__save_data_to_eeprom_one39:
; tmp_data start address is: 28 (R7)
L__save_data_to_eeprom_one38:
;eeprom_func.c, 20 :: 		if(tmp_data==0xFFFF)
0x1B4E	0x4B12    LDR	R3, [PC, #72]
0x1B50	0x429F    CMP	R7, R3
0x1B52	0xD112    BNE	L_save_data_to_eeprom_one3
; tmp_data end address is: 28 (R7)
;eeprom_func.c, 22 :: 		FLASH_Unlock();
0x1B54	0xF7FFFC9C  BL	_FLASH_Unlock+0
;eeprom_func.c, 23 :: 		FLASH_ErasePage(adr);
0x1B58	0x9800    LDR	R0, [SP, #0]
0x1B5A	0xF7FFFC59  BL	_FLASH_ErasePage+0
;eeprom_func.c, 24 :: 		FLASH_Write_HalfWord(adr,0);
0x1B5E	0x2100    MOVS	R1, #0
0x1B60	0x9800    LDR	R0, [SP, #0]
0x1B62	0xF7FFFC1F  BL	_FLASH_Write_HalfWord+0
;eeprom_func.c, 25 :: 		FLASH_Write_HalfWord(adr+2, 0);
0x1B66	0x9B00    LDR	R3, [SP, #0]
0x1B68	0x3302    ADDS	R3, #2
0x1B6A	0x2100    MOVS	R1, #0
0x1B6C	0x4618    MOV	R0, R3
0x1B6E	0xF7FFFC19  BL	_FLASH_Write_HalfWord+0
;eeprom_func.c, 26 :: 		*status = RESET;
0x1B72	0x2400    MOVS	R4, #0
0x1B74	0x9B01    LDR	R3, [SP, #4]
0x1B76	0x701C    STRB	R4, [R3, #0]
;eeprom_func.c, 27 :: 		}
0x1B78	0xE00C    B	L_save_data_to_eeprom_one4
L_save_data_to_eeprom_one3:
;eeprom_func.c, 30 :: 		FLASH_Unlock();
; tmp_data start address is: 28 (R7)
0x1B7A	0xF7FFFC89  BL	_FLASH_Unlock+0
;eeprom_func.c, 31 :: 		FLASH_ErasePage(adr);
0x1B7E	0x9800    LDR	R0, [SP, #0]
0x1B80	0xF7FFFC46  BL	_FLASH_ErasePage+0
;eeprom_func.c, 32 :: 		++tmp_data;
0x1B84	0x1C7B    ADDS	R3, R7, #1
; tmp_data end address is: 28 (R7)
;eeprom_func.c, 33 :: 		FLASH_Write_HalfWord(adr,tmp_data);
0x1B86	0xB299    UXTH	R1, R3
0x1B88	0x9800    LDR	R0, [SP, #0]
0x1B8A	0xF7FFFC0B  BL	_FLASH_Write_HalfWord+0
;eeprom_func.c, 34 :: 		*status = RESET;
0x1B8E	0x2400    MOVS	R4, #0
0x1B90	0x9B01    LDR	R3, [SP, #4]
0x1B92	0x701C    STRB	R4, [R3, #0]
;eeprom_func.c, 35 :: 		}
L_save_data_to_eeprom_one4:
;eeprom_func.c, 36 :: 		}
L_end_save_data_to_eeprom_one:
0x1B94	0xB002    ADD	SP, SP, #8
0x1B96	0xBD00    POP	(R15)
0x1B98	0xFFFF0000  	#65535
; end of _save_data_to_eeprom_one
_DisableInterrupts:
;__Lib_System.c, 135 :: 		
0x1798	0xB500    PUSH	(R14)
;__Lib_System.c, 138 :: 		
0x179A	0xF3EF8710  MRS	R7, #16
0x179E	0x4638    MOV	R0, R7
; result start address is: 0 (R0)
;__Lib_System.c, 139 :: 		
0x17A0	0xB672    CPSID	i
;__Lib_System.c, 141 :: 		
; result end address is: 0 (R0)
;__Lib_System.c, 142 :: 		
L_end_DisableInterrupts:
0x17A2	0xBD00    POP	(R15)
; end of _DisableInterrupts
_read_from_eeprom_one:
;eeprom_func.c, 51 :: 		unsigned int read_from_eeprom_one(unsigned long adr)
; adr start address is: 0 (R0)
0x1784	0xB500    PUSH	(R14)
; adr end address is: 0 (R0)
; adr start address is: 0 (R0)
;eeprom_func.c, 53 :: 		unsigned int tmp_data = 0;
;eeprom_func.c, 55 :: 		ptr = (unsigned long*)adr;
; ptr start address is: 8 (R2)
0x1786	0x4602    MOV	R2, R0
; adr end address is: 0 (R0)
;eeprom_func.c, 56 :: 		DisableInterrupts();
0x1788	0xF000F806  BL	_DisableInterrupts+0
;eeprom_func.c, 57 :: 		tmp_data = (unsigned int)(*ptr);
0x178C	0x6811    LDR	R1, [R2, #0]
; ptr end address is: 8 (R2)
; tmp_data start address is: 4 (R1)
0x178E	0xB289    UXTH	R1, R1
;eeprom_func.c, 58 :: 		EnableInterrupts();
0x1790	0xF001FD6E  BL	_EnableInterrupts+0
;eeprom_func.c, 59 :: 		return  (unsigned int)tmp_data;
0x1794	0xB288    UXTH	R0, R1
; tmp_data end address is: 4 (R1)
;eeprom_func.c, 60 :: 		}
L_end_read_from_eeprom_one:
0x1796	0xBD00    POP	(R15)
; end of _read_from_eeprom_one
_FLASH_Unlock:
;__Lib_FLASH_32F0x_32.c, 132 :: 		
0x1490	0xB500    PUSH	(R14)
;__Lib_FLASH_32F0x_32.c, 134 :: 		
0x1492	0x4807    LDR	R0, [PC, #28]
0x1494	0x6801    LDR	R1, [R0, #0]
0x1496	0x2080    MOVS	R0, #128
0x1498	0x4008    ANDS	R0, R1
0x149A	0x09C0    LSRS	R0, R0, #7
0x149C	0x2800    CMP	R0, #0
0x149E	0xD005    BEQ	L_FLASH_Unlock8
;__Lib_FLASH_32F0x_32.c, 137 :: 		
0x14A0	0x4904    LDR	R1, [PC, #16]
0x14A2	0x4805    LDR	R0, [PC, #20]
0x14A4	0x6001    STR	R1, [R0, #0]
;__Lib_FLASH_32F0x_32.c, 138 :: 		
0x14A6	0x4905    LDR	R1, [PC, #20]
0x14A8	0x4803    LDR	R0, [PC, #12]
0x14AA	0x6001    STR	R1, [R0, #0]
;__Lib_FLASH_32F0x_32.c, 139 :: 		
L_FLASH_Unlock8:
;__Lib_FLASH_32F0x_32.c, 140 :: 		
L_end_FLASH_Unlock:
0x14AC	0xBD00    POP	(R15)
0x14AE	0xBF00    NOP
0x14B0	0x20104002  	FLASH_CRbits+0
0x14B4	0x01234567  	#1164378403
0x14B8	0x20044002  	FLASH_KEYR+0
0x14BC	0x89ABCDEF  	#-839939669
; end of _FLASH_Unlock
_FLASH_ErasePage:
;__Lib_FLASH_32F0x_32.c, 164 :: 		
; page start address is: 0 (R0)
0x1410	0xB500    PUSH	(R14)
0x1412	0x4604    MOV	R4, R0
; page end address is: 0 (R0)
; page start address is: 16 (R4)
;__Lib_FLASH_32F0x_32.c, 166 :: 		
;__Lib_FLASH_32F0x_32.c, 168 :: 		
0x1414	0xF7FEFFE4  BL	__Lib_FLASH_32F0x_32_FLASH_ClearFlags+0
;__Lib_FLASH_32F0x_32.c, 169 :: 		
0x1418	0xF000F83A  BL	_FLASH_Unlock+0
;__Lib_FLASH_32F0x_32.c, 172 :: 		
0x141C	0xF7FEFFF4  BL	__Lib_FLASH_32F0x_32_FLASH_WaitForLastOperation+0
; status start address is: 4 (R1)
0x1420	0x4601    MOV	R1, R0
;__Lib_FLASH_32F0x_32.c, 174 :: 		
0x1422	0x2800    CMP	R0, #0
0x1424	0xD12C    BNE	L__FLASH_ErasePage42
; status end address is: 4 (R1)
;__Lib_FLASH_32F0x_32.c, 177 :: 		
0x1426	0x4B17    LDR	R3, [PC, #92]
0x1428	0x6819    LDR	R1, [R3, #0]
0x142A	0x2202    MOVS	R2, #2
0x142C	0x4311    ORRS	R1, R2
0x142E	0x6019    STR	R1, [R3, #0]
;__Lib_FLASH_32F0x_32.c, 178 :: 		
0x1430	0x4915    LDR	R1, [PC, #84]
0x1432	0x680A    LDR	R2, [R1, #0]
0x1434	0x2100    MOVS	R1, #0
0x1436	0x400A    ANDS	R2, R1
0x1438	0x4913    LDR	R1, [PC, #76]
0x143A	0x600A    STR	R2, [R1, #0]
;__Lib_FLASH_32F0x_32.c, 179 :: 		
0x143C	0x4912    LDR	R1, [PC, #72]
0x143E	0x6809    LDR	R1, [R1, #0]
0x1440	0x460A    MOV	R2, R1
0x1442	0x4322    ORRS	R2, R4
; page end address is: 16 (R4)
0x1444	0x4910    LDR	R1, [PC, #64]
0x1446	0x600A    STR	R2, [R1, #0]
;__Lib_FLASH_32F0x_32.c, 180 :: 		
0x1448	0x4B0E    LDR	R3, [PC, #56]
0x144A	0x6819    LDR	R1, [R3, #0]
0x144C	0x2240    MOVS	R2, #64
0x144E	0x4311    ORRS	R1, R2
0x1450	0x6019    STR	R1, [R3, #0]
;__Lib_FLASH_32F0x_32.c, 181 :: 		
0x1452	0xBF00    NOP
;__Lib_FLASH_32F0x_32.c, 184 :: 		
0x1454	0xF7FEFFD8  BL	__Lib_FLASH_32F0x_32_FLASH_WaitForLastOperation+0
; status start address is: 0 (R0)
;__Lib_FLASH_32F0x_32.c, 187 :: 		
0x1458	0x490C    LDR	R1, [PC, #48]
0x145A	0x680A    LDR	R2, [R1, #0]
0x145C	0x2120    MOVS	R1, #32
0x145E	0x4011    ANDS	R1, R2
0x1460	0x0949    LSRS	R1, R1, #5
0x1462	0x2900    CMP	R1, #0
0x1464	0xD00B    BEQ	L__FLASH_ErasePage41
0x1466	0x2800    CMP	R0, #0
0x1468	0xD109    BNE	L__FLASH_ErasePage40
L__FLASH_ErasePage39:
;__Lib_FLASH_32F0x_32.c, 189 :: 		
0x146A	0x4B08    LDR	R3, [PC, #32]
0x146C	0x6819    LDR	R1, [R3, #0]
0x146E	0x2220    MOVS	R2, #32
0x1470	0x4311    ORRS	R1, R2
0x1472	0x6019    STR	R1, [R3, #0]
;__Lib_FLASH_32F0x_32.c, 190 :: 		
0x1474	0x4B03    LDR	R3, [PC, #12]
0x1476	0x6819    LDR	R1, [R3, #0]
0x1478	0x2202    MOVS	R2, #2
0x147A	0x4391    BICS	R1, R2
0x147C	0x6019    STR	R1, [R3, #0]
;__Lib_FLASH_32F0x_32.c, 187 :: 		
L__FLASH_ErasePage41:
L__FLASH_ErasePage40:
;__Lib_FLASH_32F0x_32.c, 192 :: 		
0x147E	0xE000    B	L_FLASH_ErasePage10
; status end address is: 0 (R0)
L__FLASH_ErasePage42:
;__Lib_FLASH_32F0x_32.c, 174 :: 		
0x1480	0x4608    MOV	R0, R1
;__Lib_FLASH_32F0x_32.c, 192 :: 		
L_FLASH_ErasePage10:
;__Lib_FLASH_32F0x_32.c, 195 :: 		
; status start address is: 0 (R0)
; status end address is: 0 (R0)
;__Lib_FLASH_32F0x_32.c, 196 :: 		
L_end_FLASH_ErasePage:
0x1482	0xBD00    POP	(R15)
0x1484	0x20104002  	FLASH_CR+0
0x1488	0x20144002  	FLASH_AR+0
0x148C	0x200C4002  	FLASH_SR+0
; end of _FLASH_ErasePage
__Lib_FLASH_32F0x_32_FLASH_ClearFlags:
;__Lib_FLASH_32F0x_32.c, 46 :: 		
0x03E0	0xB081    SUB	SP, SP, #4
;__Lib_FLASH_32F0x_32.c, 48 :: 		
0x03E2	0x4A08    LDR	R2, [PC, #32]
0x03E4	0x6810    LDR	R0, [R2, #0]
0x03E6	0x2120    MOVS	R1, #32
0x03E8	0x4308    ORRS	R0, R1
0x03EA	0x6010    STR	R0, [R2, #0]
;__Lib_FLASH_32F0x_32.c, 49 :: 		
0x03EC	0x4A05    LDR	R2, [PC, #20]
0x03EE	0x6810    LDR	R0, [R2, #0]
0x03F0	0x2104    MOVS	R1, #4
0x03F2	0x4308    ORRS	R0, R1
0x03F4	0x6010    STR	R0, [R2, #0]
;__Lib_FLASH_32F0x_32.c, 50 :: 		
0x03F6	0x4A03    LDR	R2, [PC, #12]
0x03F8	0x6810    LDR	R0, [R2, #0]
0x03FA	0x2110    MOVS	R1, #16
0x03FC	0x4308    ORRS	R0, R1
0x03FE	0x6010    STR	R0, [R2, #0]
;__Lib_FLASH_32F0x_32.c, 51 :: 		
L_end_FLASH_ClearFlags:
0x0400	0xB001    ADD	SP, SP, #4
0x0402	0x4770    BX	LR
0x0404	0x200C4002  	FLASH_SR+0
; end of __Lib_FLASH_32F0x_32_FLASH_ClearFlags
__Lib_FLASH_32F0x_32_FLASH_WaitForLastOperation:
;__Lib_FLASH_32F0x_32.c, 102 :: 		
0x0408	0xB500    PUSH	(R14)
;__Lib_FLASH_32F0x_32.c, 104 :: 		
;__Lib_FLASH_32F0x_32.c, 107 :: 		
0x040A	0xF7FFFE93  BL	__Lib_FLASH_32F0x_32_FLASH_GetStatus+0
; status start address is: 4 (R1)
0x040E	0x4601    MOV	R1, R0
; status end address is: 4 (R1)
0x0410	0x4608    MOV	R0, R1
;__Lib_FLASH_32F0x_32.c, 109 :: 		
L___Lib_FLASH_32F0x_32_FLASH_WaitForLastOperation6:
; status start address is: 0 (R0)
0x0412	0x2801    CMP	R0, #1
0x0414	0xD102    BNE	L___Lib_FLASH_32F0x_32_FLASH_WaitForLastOperation7
; status end address is: 0 (R0)
;__Lib_FLASH_32F0x_32.c, 111 :: 		
0x0416	0xF7FFFE8D  BL	__Lib_FLASH_32F0x_32_FLASH_GetStatus+0
; status start address is: 0 (R0)
;__Lib_FLASH_32F0x_32.c, 112 :: 		
0x041A	0xE7FA    B	L___Lib_FLASH_32F0x_32_FLASH_WaitForLastOperation6
L___Lib_FLASH_32F0x_32_FLASH_WaitForLastOperation7:
;__Lib_FLASH_32F0x_32.c, 115 :: 		
; status end address is: 0 (R0)
;__Lib_FLASH_32F0x_32.c, 116 :: 		
L_end_FLASH_WaitForLastOperation:
0x041C	0xBD00    POP	(R15)
; end of __Lib_FLASH_32F0x_32_FLASH_WaitForLastOperation
__Lib_FLASH_32F0x_32_FLASH_GetStatus:
;__Lib_FLASH_32F0x_32.c, 61 :: 		
0x0134	0xB500    PUSH	(R14)
;__Lib_FLASH_32F0x_32.c, 63 :: 		
;__Lib_FLASH_32F0x_32.c, 65 :: 		
0x0136	0x480E    LDR	R0, [PC, #56]
0x0138	0x6801    LDR	R1, [R0, #0]
0x013A	0x2001    MOVS	R0, #1
0x013C	0x4008    ANDS	R0, R1
0x013E	0x2800    CMP	R0, #0
0x0140	0xD001    BEQ	L___Lib_FLASH_32F0x_32_FLASH_GetStatus0
;__Lib_FLASH_32F0x_32.c, 67 :: 		
; flashstatus start address is: 0 (R0)
0x0142	0x2001    MOVS	R0, #1
;__Lib_FLASH_32F0x_32.c, 68 :: 		
; flashstatus end address is: 0 (R0)
0x0144	0xE012    B	L___Lib_FLASH_32F0x_32_FLASH_GetStatus1
L___Lib_FLASH_32F0x_32_FLASH_GetStatus0:
;__Lib_FLASH_32F0x_32.c, 71 :: 		
0x0146	0x480A    LDR	R0, [PC, #40]
0x0148	0x6801    LDR	R1, [R0, #0]
0x014A	0x2010    MOVS	R0, #16
0x014C	0x4008    ANDS	R0, R1
0x014E	0x0900    LSRS	R0, R0, #4
0x0150	0x2800    CMP	R0, #0
0x0152	0xD001    BEQ	L___Lib_FLASH_32F0x_32_FLASH_GetStatus2
;__Lib_FLASH_32F0x_32.c, 73 :: 		
; flashstatus start address is: 0 (R0)
0x0154	0x2003    MOVS	R0, #3
;__Lib_FLASH_32F0x_32.c, 74 :: 		
; flashstatus end address is: 0 (R0)
0x0156	0xE009    B	L___Lib_FLASH_32F0x_32_FLASH_GetStatus3
L___Lib_FLASH_32F0x_32_FLASH_GetStatus2:
;__Lib_FLASH_32F0x_32.c, 77 :: 		
0x0158	0x4805    LDR	R0, [PC, #20]
0x015A	0x6801    LDR	R1, [R0, #0]
0x015C	0x2004    MOVS	R0, #4
0x015E	0x4008    ANDS	R0, R1
0x0160	0x0880    LSRS	R0, R0, #2
0x0162	0x2800    CMP	R0, #0
0x0164	0xD001    BEQ	L___Lib_FLASH_32F0x_32_FLASH_GetStatus4
;__Lib_FLASH_32F0x_32.c, 79 :: 		
; flashstatus start address is: 0 (R0)
0x0166	0x2002    MOVS	R0, #2
;__Lib_FLASH_32F0x_32.c, 80 :: 		
; flashstatus end address is: 0 (R0)
0x0168	0xE000    B	L___Lib_FLASH_32F0x_32_FLASH_GetStatus5
L___Lib_FLASH_32F0x_32_FLASH_GetStatus4:
;__Lib_FLASH_32F0x_32.c, 83 :: 		
; flashstatus start address is: 0 (R0)
0x016A	0x2000    MOVS	R0, #0
; flashstatus end address is: 0 (R0)
;__Lib_FLASH_32F0x_32.c, 84 :: 		
L___Lib_FLASH_32F0x_32_FLASH_GetStatus5:
;__Lib_FLASH_32F0x_32.c, 85 :: 		
; flashstatus start address is: 0 (R0)
; flashstatus end address is: 0 (R0)
L___Lib_FLASH_32F0x_32_FLASH_GetStatus3:
;__Lib_FLASH_32F0x_32.c, 86 :: 		
; flashstatus start address is: 0 (R0)
; flashstatus end address is: 0 (R0)
L___Lib_FLASH_32F0x_32_FLASH_GetStatus1:
;__Lib_FLASH_32F0x_32.c, 89 :: 		
; flashstatus start address is: 0 (R0)
; flashstatus end address is: 0 (R0)
;__Lib_FLASH_32F0x_32.c, 90 :: 		
L_end_FLASH_GetStatus:
0x016C	0xBD00    POP	(R15)
0x016E	0xBF00    NOP
0x0170	0x200C4002  	FLASH_SR+0
; end of __Lib_FLASH_32F0x_32_FLASH_GetStatus
_FLASH_Write_HalfWord:
;__Lib_FLASH_32F0x_32.c, 269 :: 		
; Data start address is: 4 (R1)
; address start address is: 0 (R0)
0x13A4	0xB500    PUSH	(R14)
0x13A6	0x4605    MOV	R5, R0
0x13A8	0xB28E    UXTH	R6, R1
; Data end address is: 4 (R1)
; address end address is: 0 (R0)
; address start address is: 20 (R5)
; Data start address is: 24 (R6)
;__Lib_FLASH_32F0x_32.c, 271 :: 		
;__Lib_FLASH_32F0x_32.c, 273 :: 		
0x13AA	0xF7FFF819  BL	__Lib_FLASH_32F0x_32_FLASH_ClearFlags+0
;__Lib_FLASH_32F0x_32.c, 274 :: 		
0x13AE	0xF000F86F  BL	_FLASH_Unlock+0
;__Lib_FLASH_32F0x_32.c, 277 :: 		
0x13B2	0xF7FFF829  BL	__Lib_FLASH_32F0x_32_FLASH_WaitForLastOperation+0
; status start address is: 4 (R1)
0x13B6	0x4601    MOV	R1, R0
;__Lib_FLASH_32F0x_32.c, 279 :: 		
0x13B8	0x2800    CMP	R0, #0
0x13BA	0xD11F    BNE	L__FLASH_Write_HalfWord53
; status end address is: 4 (R1)
;__Lib_FLASH_32F0x_32.c, 283 :: 		
0x13BC	0x4C10    LDR	R4, [PC, #64]
0x13BE	0x6822    LDR	R2, [R4, #0]
0x13C0	0x2301    MOVS	R3, #1
0x13C2	0x431A    ORRS	R2, R3
0x13C4	0x6022    STR	R2, [R4, #0]
;__Lib_FLASH_32F0x_32.c, 286 :: 		
0x13C6	0x4A0F    LDR	R2, [PC, #60]
0x13C8	0x4295    CMP	R5, R2
0x13CA	0xD314    BCC	L__FLASH_Write_HalfWord52
0x13CC	0x4A0E    LDR	R2, [PC, #56]
0x13CE	0x4295    CMP	R5, R2
0x13D0	0xD811    BHI	L__FLASH_Write_HalfWord51
L__FLASH_Write_HalfWord48:
;__Lib_FLASH_32F0x_32.c, 288 :: 		
0x13D2	0x802E    STRH	R6, [R5, #0]
; address end address is: 20 (R5)
; Data end address is: 24 (R6)
;__Lib_FLASH_32F0x_32.c, 291 :: 		
0x13D4	0xF7FFF818  BL	__Lib_FLASH_32F0x_32_FLASH_WaitForLastOperation+0
; status start address is: 0 (R0)
;__Lib_FLASH_32F0x_32.c, 294 :: 		
0x13D8	0x4A0C    LDR	R2, [PC, #48]
0x13DA	0x6813    LDR	R3, [R2, #0]
0x13DC	0x2220    MOVS	R2, #32
0x13DE	0x401A    ANDS	R2, R3
0x13E0	0x0952    LSRS	R2, R2, #5
0x13E2	0x2A00    CMP	R2, #0
0x13E4	0xD006    BEQ	L__FLASH_Write_HalfWord50
0x13E6	0x2800    CMP	R0, #0
0x13E8	0xD104    BNE	L__FLASH_Write_HalfWord49
L__FLASH_Write_HalfWord47:
;__Lib_FLASH_32F0x_32.c, 295 :: 		
0x13EA	0x4C08    LDR	R4, [PC, #32]
0x13EC	0x6822    LDR	R2, [R4, #0]
0x13EE	0x2320    MOVS	R3, #32
0x13F0	0x431A    ORRS	R2, R3
0x13F2	0x6022    STR	R2, [R4, #0]
;__Lib_FLASH_32F0x_32.c, 294 :: 		
L__FLASH_Write_HalfWord50:
L__FLASH_Write_HalfWord49:
;__Lib_FLASH_32F0x_32.c, 296 :: 		
; status end address is: 0 (R0)
0x13F4	0xE001    B	L_FLASH_Write_HalfWord28
;__Lib_FLASH_32F0x_32.c, 286 :: 		
L__FLASH_Write_HalfWord52:
L__FLASH_Write_HalfWord51:
;__Lib_FLASH_32F0x_32.c, 298 :: 		
; status start address is: 0 (R0)
0x13F6	0x2000    MOVS	R0, #0
0x13F8	0x43C0    MVN	R0, R0
; status end address is: 0 (R0)
L_FLASH_Write_HalfWord28:
;__Lib_FLASH_32F0x_32.c, 299 :: 		
; status start address is: 0 (R0)
; status end address is: 0 (R0)
0x13FA	0xE000    B	L_FLASH_Write_HalfWord21
L__FLASH_Write_HalfWord53:
;__Lib_FLASH_32F0x_32.c, 279 :: 		
0x13FC	0x4608    MOV	R0, R1
;__Lib_FLASH_32F0x_32.c, 299 :: 		
L_FLASH_Write_HalfWord21:
;__Lib_FLASH_32F0x_32.c, 302 :: 		
; status start address is: 0 (R0)
; status end address is: 0 (R0)
;__Lib_FLASH_32F0x_32.c, 303 :: 		
L_end_FLASH_Write_HalfWord:
0x13FE	0xBD00    POP	(R15)
0x1400	0x20104002  	FLASH_CR+0
0x1404	0x00000800  	#134217728
0x1408	0x7FFF0800  	#134250495
0x140C	0x200C4002  	FLASH_SR+0
; end of _FLASH_Write_HalfWord
_setState:
;func.c, 69 :: 		void setState(state_n newState)
; newState start address is: 0 (R0)
; newState end address is: 0 (R0)
; newState start address is: 0 (R0)
;func.c, 71 :: 		state =  newState;
0x30F0	0x4901    LDR	R1, [PC, #4]
0x30F2	0x7008    STRB	R0, [R1, #0]
; newState end address is: 0 (R0)
;func.c, 72 :: 		}
L_end_setState:
0x30F4	0x4770    BX	LR
0x30F6	0xBF00    NOP
0x30F8	0x003A2000  	_state+0
; end of _setState
_globalProcess:
;func.c, 23 :: 		void globalProcess()
0x3340	0xB500    PUSH	(R14)
;func.c, 25 :: 		ControlInputData();
0x3342	0xF7FFFA09  BL	_ControlInputData+0
;func.c, 26 :: 		WriteDataToAndroid();
0x3346	0xF7FFFAD9  BL	_WriteDataToAndroid+0
;func.c, 27 :: 		if(flag_t.ovf_flag==SET)
0x334A	0x4830    LDR	R0, [PC, #192]
0x334C	0x7800    LDRB	R0, [R0, #0]
0x334E	0x2801    CMP	R0, #1
0x3350	0xD000    BEQ	#0
0x3352	0xE059    B	L_globalProcess3
;func.c, 29 :: 		flag_t.ovf_flag = RESET;
0x3354	0x2100    MOVS	R1, #0
0x3356	0x482D    LDR	R0, [PC, #180]
0x3358	0x7001    STRB	R1, [R0, #0]
;func.c, 31 :: 		clear_WDT();
0x335A	0xF7FFFA2D  BL	_clear_WDT+0
;func.c, 32 :: 		ReadAnalogInput();
0x335E	0xF7FFFC37  BL	_ReadAnalogInput+0
;func.c, 33 :: 		ControlAnalogFlags();
0x3362	0xF7FEFD3D  BL	_ControlAnalogFlags+0
;func.c, 34 :: 		ControlDigitalFlags();
0x3366	0xF7FFFC03  BL	_ControlDigitalFlags+0
;func.c, 35 :: 		ControlSensorDamage();
0x336A	0xF7FFF8AD  BL	_ControlSensorDamage+0
;func.c, 37 :: 		ControlCalibrate(3600);
0x336E	0x4828    LDR	R0, [PC, #160]
0x3370	0xF7FFFA2A  BL	_ControlCalibrate+0
;func.c, 38 :: 		ControlRecalFlags();
0x3374	0xF7FFFA64  BL	_ControlRecalFlags+0
;func.c, 42 :: 		switch(state)
0x3378	0xE01E    B	L_globalProcess4
;func.c, 44 :: 		case control_calibration :    controlCalibration();                  break;
L_globalProcess6:
0x337A	0xF7FFF949  BL	_controlCalibration+0
0x337E	0xE043    B	L_globalProcess5
;func.c, 45 :: 		case error_calibration   :    ErrorCalibration();                    break;
L_globalProcess7:
0x3380	0xF7FFF9B0  BL	_ErrorCalibration+0
0x3384	0xE040    B	L_globalProcess5
;func.c, 46 :: 		case start_sound         :    StartSound(TRUE);                      break;
L_globalProcess8:
0x3386	0x2001    MOVS	R0, #1
0x3388	0xF7FFFBCE  BL	_StartSound+0
0x338C	0xE03C    B	L_globalProcess5
;func.c, 47 :: 		case preheat             :    Preheat_f();                           break;
L_globalProcess9:
0x338E	0xF7FFFE59  BL	_Preheat_f+0
0x3392	0xE039    B	L_globalProcess5
;func.c, 48 :: 		case calibration         :    Calibration_f();                       break;
L_globalProcess10:
0x3394	0xF7FFFDAE  BL	_Calibration_f+0
0x3398	0xE036    B	L_globalProcess5
;func.c, 49 :: 		case getV0               :    Calibrate();                           break;
L_globalProcess11:
0x339A	0xF7FEFBFF  BL	_Calibrate+0
0x339E	0xE033    B	L_globalProcess5
;func.c, 50 :: 		case ready_alarm         :    ReadyAlarm_f();                        break;
L_globalProcess12:
0x33A0	0xF7FEFB58  BL	_ReadyAlarm_f+0
0x33A4	0xE030    B	L_globalProcess5
;func.c, 51 :: 		case process             :    Process_f();                           break;
L_globalProcess13:
0x33A6	0xF7FEFB9B  BL	_Process_f+0
0x33AA	0xE02D    B	L_globalProcess5
;func.c, 52 :: 		case sensor_alarm        :    SensorAlarm();                         break;
L_globalProcess14:
0x33AC	0xF7FFF804  BL	_SensorAlarm+0
0x33B0	0xE02A    B	L_globalProcess5
;func.c, 53 :: 		case sensor_damage       :    SensorDamage();                        break;
L_globalProcess15:
0x33B2	0xF7FEFDD5  BL	_SensorDamage+0
0x33B6	0xE027    B	L_globalProcess5
;func.c, 54 :: 		}
L_globalProcess4:
0x33B8	0x4816    LDR	R0, [PC, #88]
0x33BA	0x7800    LDRB	R0, [R0, #0]
0x33BC	0x2801    CMP	R0, #1
0x33BE	0xD0DC    BEQ	L_globalProcess6
0x33C0	0x4814    LDR	R0, [PC, #80]
0x33C2	0x7800    LDRB	R0, [R0, #0]
0x33C4	0x2802    CMP	R0, #2
0x33C6	0xD0DB    BEQ	L_globalProcess7
0x33C8	0x4812    LDR	R0, [PC, #72]
0x33CA	0x7800    LDRB	R0, [R0, #0]
0x33CC	0x2805    CMP	R0, #5
0x33CE	0xD0DA    BEQ	L_globalProcess8
0x33D0	0x4810    LDR	R0, [PC, #64]
0x33D2	0x7800    LDRB	R0, [R0, #0]
0x33D4	0x2806    CMP	R0, #6
0x33D6	0xD0DA    BEQ	L_globalProcess9
0x33D8	0x480E    LDR	R0, [PC, #56]
0x33DA	0x7800    LDRB	R0, [R0, #0]
0x33DC	0x2804    CMP	R0, #4
0x33DE	0xD0D9    BEQ	L_globalProcess10
0x33E0	0x480C    LDR	R0, [PC, #48]
0x33E2	0x7800    LDRB	R0, [R0, #0]
0x33E4	0x2808    CMP	R0, #8
0x33E6	0xD0D8    BEQ	L_globalProcess11
0x33E8	0x480A    LDR	R0, [PC, #40]
0x33EA	0x7800    LDRB	R0, [R0, #0]
0x33EC	0x2807    CMP	R0, #7
0x33EE	0xD0D7    BEQ	L_globalProcess12
0x33F0	0x4808    LDR	R0, [PC, #32]
0x33F2	0x7800    LDRB	R0, [R0, #0]
0x33F4	0x2809    CMP	R0, #9
0x33F6	0xD0D6    BEQ	L_globalProcess13
0x33F8	0x4806    LDR	R0, [PC, #24]
0x33FA	0x7800    LDRB	R0, [R0, #0]
0x33FC	0x280A    CMP	R0, #10
0x33FE	0xD0D5    BEQ	L_globalProcess14
0x3400	0x4804    LDR	R0, [PC, #16]
0x3402	0x7800    LDRB	R0, [R0, #0]
0x3404	0x280B    CMP	R0, #11
0x3406	0xD0D4    BEQ	L_globalProcess15
L_globalProcess5:
;func.c, 56 :: 		}
L_globalProcess3:
;func.c, 57 :: 		}
L_end_globalProcess:
0x3408	0xBD00    POP	(R15)
0x340A	0xBF00    NOP
0x340C	0x01662000  	_flag_t+0
0x3410	0x0E100000  	#3600
0x3414	0x003A2000  	_state+0
; end of _globalProcess
_ControlInputData:
;uart.c, 34 :: 		void ControlInputData()
0x2758	0xB500    PUSH	(R14)
;uart.c, 37 :: 		if(flag_t.start_process_status)
0x275A	0x4811    LDR	R0, [PC, #68]
0x275C	0x7800    LDRB	R0, [R0, #0]
0x275E	0x2800    CMP	R0, #0
0x2760	0xD01D    BEQ	L_ControlInputData3
;uart.c, 39 :: 		if(strstr(input_buffer,request_string))
0x2762	0x4910    LDR	R1, [PC, #64]
0x2764	0x4810    LDR	R0, [PC, #64]
0x2766	0xF7FEFED3  BL	_strstr+0
0x276A	0x2800    CMP	R0, #0
0x276C	0xD009    BEQ	L_ControlInputData4
;uart.c, 41 :: 		flag_t.response_status = SET;
0x276E	0x2101    MOVS	R1, #1
0x2770	0x480E    LDR	R0, [PC, #56]
0x2772	0x7001    STRB	R1, [R0, #0]
;uart.c, 42 :: 		Clear_buffer(input_buffer,INPUT_BUFFER_SIZE );
0x2774	0x2119    MOVS	R1, #25
0x2776	0x480C    LDR	R0, [PC, #48]
0x2778	0xF000FE4E  BL	_Clear_buffer+0
;uart.c, 43 :: 		in = 0;
0x277C	0x2100    MOVS	R1, #0
0x277E	0x480C    LDR	R0, [PC, #48]
0x2780	0x7001    STRB	R1, [R0, #0]
;uart.c, 44 :: 		}
L_ControlInputData4:
;uart.c, 45 :: 		if(strstr(input_buffer,"CONNECT"))
0x2782	0x480C    LDR	R0, [PC, #48]
0x2784	0x4601    MOV	R1, R0
0x2786	0x4808    LDR	R0, [PC, #32]
0x2788	0xF7FEFEC2  BL	_strstr+0
0x278C	0x2800    CMP	R0, #0
0x278E	0xD006    BEQ	L_ControlInputData5
;uart.c, 47 :: 		Clear_buffer(input_buffer,INPUT_BUFFER_SIZE );
0x2790	0x2119    MOVS	R1, #25
0x2792	0x4805    LDR	R0, [PC, #20]
0x2794	0xF000FE40  BL	_Clear_buffer+0
;uart.c, 48 :: 		in = 0;
0x2798	0x2100    MOVS	R1, #0
0x279A	0x4805    LDR	R0, [PC, #20]
0x279C	0x7001    STRB	R1, [R0, #0]
;uart.c, 49 :: 		}
L_ControlInputData5:
;uart.c, 50 :: 		}
L_ControlInputData3:
;uart.c, 51 :: 		}
L_end_ControlInputData:
0x279E	0xBD00    POP	(R15)
0x27A0	0x01792000  	_flag_t+19
0x27A4	0x007D2000  	_request_string+0
0x27A8	0x00642000  	_input_buffer+0
0x27AC	0x017A2000  	_flag_t+20
0x27B0	0x00392000  	uart_in+0
0x27B4	0x00852000  	?lstr1_uart+0
; end of _ControlInputData
_strstr:
;__Lib_CString.c, 280 :: 		
; s2 start address is: 4 (R1)
; s1 start address is: 0 (R0)
0x1510	0xB500    PUSH	(R14)
; s2 end address is: 4 (R1)
; s1 end address is: 0 (R0)
; s1 start address is: 0 (R0)
; s2 start address is: 4 (R1)
0x1512	0x4606    MOV	R6, R0
; s1 end address is: 0 (R0)
; s2 end address is: 4 (R1)
0x1514	0x460D    MOV	R5, R1
;__Lib_CString.c, 281 :: 		
L_strstr70:
; s2 start address is: 20 (R5)
; s2 start address is: 20 (R5)
; s2 end address is: 20 (R5)
; s1 start address is: 24 (R6)
0x1516	0x2E00    CMP	R6, #0
0x1518	0xD017    BEQ	L__strstr138
; s2 end address is: 20 (R5)
; s2 start address is: 20 (R5)
0x151A	0x7832    LDRB	R2, [R6, #0]
0x151C	0x2A00    CMP	R2, #0
0x151E	0xD014    BEQ	L__strstr137
L__strstr136:
;__Lib_CString.c, 282 :: 		
0x1520	0x4628    MOV	R0, R5
0x1522	0xF7FEFF7D  BL	_strlen+0
0x1526	0xB2C2    UXTB	R2, R0
0x1528	0x4629    MOV	R1, R5
0x152A	0x4630    MOV	R0, R6
0x152C	0xF7FFF8AC  BL	_strncmp+0
0x1530	0x2800    CMP	R0, #0
0x1532	0xD101    BNE	L_strstr74
; s2 end address is: 20 (R5)
;__Lib_CString.c, 283 :: 		
0x1534	0x4630    MOV	R0, R6
; s1 end address is: 24 (R6)
0x1536	0xE009    B	L_end_strstr
L_strstr74:
;__Lib_CString.c, 284 :: 		
; s1 start address is: 24 (R6)
; s2 start address is: 20 (R5)
0x1538	0x782A    LDRB	R2, [R5, #0]
0x153A	0xB2D3    UXTB	R3, R2
0x153C	0x1C72    ADDS	R2, R6, #1
; s1 end address is: 24 (R6)
0x153E	0xB2D9    UXTB	R1, R3
0x1540	0x4610    MOV	R0, R2
0x1542	0xF7FFF88D  BL	_strchr+0
; s1 start address is: 24 (R6)
0x1546	0x4606    MOV	R6, R0
;__Lib_CString.c, 285 :: 		
; s2 end address is: 20 (R5)
; s1 end address is: 24 (R6)
0x1548	0xE7E5    B	L_strstr70
;__Lib_CString.c, 281 :: 		
L__strstr138:
L__strstr137:
;__Lib_CString.c, 286 :: 		
0x154A	0x2000    MOVS	R0, #0
;__Lib_CString.c, 287 :: 		
L_end_strstr:
0x154C	0xBD00    POP	(R15)
; end of _strstr
_strlen:
;__Lib_CString.c, 143 :: 		
; s start address is: 0 (R0)
0x0420	0xB500    PUSH	(R14)
0x0422	0x4601    MOV	R1, R0
; s end address is: 0 (R0)
; s start address is: 4 (R1)
;__Lib_CString.c, 146 :: 		
; cp start address is: 0 (R0)
0x0424	0x4608    MOV	R0, R1
; s end address is: 4 (R1)
; cp end address is: 0 (R0)
0x0426	0x460B    MOV	R3, R1
;__Lib_CString.c, 147 :: 		
L_strlen36:
; cp start address is: 0 (R0)
; s start address is: 12 (R3)
0x0428	0x4602    MOV	R2, R0
0x042A	0x3001    ADDS	R0, #1
0x042C	0x7811    LDRB	R1, [R2, #0]
0x042E	0x2900    CMP	R1, #0
0x0430	0xD000    BEQ	L_strlen37
;__Lib_CString.c, 148 :: 		
0x0432	0xE7F9    B	L_strlen36
L_strlen37:
;__Lib_CString.c, 149 :: 		
0x0434	0x1AC1    SUBS	R1, R0, R3
; s end address is: 12 (R3)
; cp end address is: 0 (R0)
0x0436	0x1E49    SUBS	R1, R1, #1
0x0438	0xB208    SXTH	R0, R1
;__Lib_CString.c, 150 :: 		
L_end_strlen:
0x043A	0xBD00    POP	(R15)
; end of _strlen
_strncmp:
;__Lib_CString.c, 226 :: 		
; len start address is: 8 (R2)
; s2 start address is: 4 (R1)
; s1 start address is: 0 (R0)
0x0688	0xB500    PUSH	(R14)
0x068A	0xB081    SUB	SP, SP, #4
; len end address is: 8 (R2)
; s2 end address is: 4 (R1)
; s1 end address is: 0 (R0)
; s1 start address is: 0 (R0)
; s2 start address is: 4 (R1)
; len start address is: 8 (R2)
0x068C	0x9200    STR	R2, [SP, #0]
; s1 end address is: 0 (R0)
; len end address is: 8 (R2)
; s2 end address is: 4 (R1)
0x068E	0x4602    MOV	R2, R0
0x0690	0x9800    LDR	R0, [SP, #0]
0x0692	0xB2C0    UXTB	R0, R0
;__Lib_CString.c, 228 :: 		
L_strncmp58:
; len start address is: 0 (R0)
; len start address is: 0 (R0)
; s2 start address is: 4 (R1)
; s1 start address is: 8 (R2)
0x0694	0xB2C4    UXTB	R4, R0
0x0696	0x1E43    SUBS	R3, R0, #1
0x0698	0xB2D8    UXTB	R0, R3
; len end address is: 0 (R0)
0x069A	0x2C00    CMP	R4, #0
0x069C	0xD00F    BEQ	L_strncmp59
; len end address is: 0 (R0)
;__Lib_CString.c, 229 :: 		
; len start address is: 0 (R0)
0x069E	0x7813    LDRB	R3, [R2, #0]
0x06A0	0x2B00    CMP	R3, #0
0x06A2	0xD004    BEQ	L__strncmp134
0x06A4	0x780C    LDRB	R4, [R1, #0]
0x06A6	0x7813    LDRB	R3, [R2, #0]
0x06A8	0x42A3    CMP	R3, R4
0x06AA	0xD100    BNE	L__strncmp133
0x06AC	0xE004    B	L_strncmp62
; len end address is: 0 (R0)
L__strncmp134:
L__strncmp133:
;__Lib_CString.c, 230 :: 		
0x06AE	0x7814    LDRB	R4, [R2, #0]
; s1 end address is: 8 (R2)
0x06B0	0x780B    LDRB	R3, [R1, #0]
; s2 end address is: 4 (R1)
0x06B2	0x1AE3    SUBS	R3, R4, R3
0x06B4	0xB218    SXTH	R0, R3
0x06B6	0xE003    B	L_end_strncmp
L_strncmp62:
;__Lib_CString.c, 231 :: 		
; s2 start address is: 4 (R1)
; s1 start address is: 8 (R2)
; len start address is: 0 (R0)
0x06B8	0x3201    ADDS	R2, #1
;__Lib_CString.c, 232 :: 		
0x06BA	0x3101    ADDS	R1, #1
;__Lib_CString.c, 233 :: 		
; len end address is: 0 (R0)
; s1 end address is: 8 (R2)
; s2 end address is: 4 (R1)
0x06BC	0xE7EA    B	L_strncmp58
L_strncmp59:
;__Lib_CString.c, 234 :: 		
0x06BE	0x2000    MOVS	R0, #0
;__Lib_CString.c, 235 :: 		
L_end_strncmp:
0x06C0	0xB001    ADD	SP, SP, #4
0x06C2	0xBD00    POP	(R15)
; end of _strncmp
_strchr:
;__Lib_CString.c, 109 :: 		
; chr start address is: 4 (R1)
; ptr start address is: 0 (R0)
0x0660	0xB500    PUSH	(R14)
0x0662	0xB081    SUB	SP, SP, #4
; chr end address is: 4 (R1)
; ptr end address is: 0 (R0)
; ptr start address is: 0 (R0)
; chr start address is: 4 (R1)
0x0664	0x9100    STR	R1, [SP, #0]
; ptr end address is: 0 (R0)
; chr end address is: 4 (R1)
0x0666	0x4601    MOV	R1, R0
0x0668	0x9800    LDR	R0, [SP, #0]
0x066A	0xB2C0    UXTB	R0, R0
;__Lib_CString.c, 110 :: 		
0x066C	0xE7FF    B	L_strchr26
L__strchr117:
;__Lib_CString.c, 113 :: 		
;__Lib_CString.c, 110 :: 		
L_strchr26:
;__Lib_CString.c, 111 :: 		
; chr start address is: 0 (R0)
; ptr start address is: 4 (R1)
0x066E	0x780A    LDRB	R2, [R1, #0]
0x0670	0x4282    CMP	R2, R0
0x0672	0xD101    BNE	L_strchr29
; chr end address is: 0 (R0)
;__Lib_CString.c, 112 :: 		
0x0674	0x4608    MOV	R0, R1
; ptr end address is: 4 (R1)
0x0676	0xE005    B	L_end_strchr
L_strchr29:
;__Lib_CString.c, 113 :: 		
; ptr start address is: 4 (R1)
; chr start address is: 0 (R0)
0x0678	0x460B    MOV	R3, R1
0x067A	0x3101    ADDS	R1, #1
0x067C	0x781A    LDRB	R2, [R3, #0]
0x067E	0x2A00    CMP	R2, #0
0x0680	0xD1F5    BNE	L__strchr117
; chr end address is: 0 (R0)
; ptr end address is: 4 (R1)
;__Lib_CString.c, 115 :: 		
0x0682	0x2000    MOVS	R0, #0
;__Lib_CString.c, 116 :: 		
L_end_strchr:
0x0684	0xB001    ADD	SP, SP, #4
0x0686	0xBD00    POP	(R15)
; end of _strchr
_Clear_buffer:
;uart.c, 119 :: 		void Clear_buffer(char* buf,unsigned int len)
; len start address is: 4 (R1)
; buf start address is: 0 (R0)
0x3418	0xB500    PUSH	(R14)
0x341A	0xB081    SUB	SP, SP, #4
; len end address is: 4 (R1)
; buf end address is: 0 (R0)
; buf start address is: 0 (R0)
; len start address is: 4 (R1)
;uart.c, 122 :: 		for(count_buf = 0;count_buf<len;count_buf++)
; count_buf start address is: 16 (R4)
0x341C	0x2400    MOVS	R4, #0
; buf end address is: 0 (R0)
; len end address is: 4 (R1)
; count_buf end address is: 16 (R4)
0x341E	0x9100    STR	R1, [SP, #0]
0x3420	0x4601    MOV	R1, R0
0x3422	0x9800    LDR	R0, [SP, #0]
0x3424	0xB280    UXTH	R0, R0
L_Clear_buffer15:
; count_buf start address is: 16 (R4)
; buf start address is: 4 (R1)
; len start address is: 0 (R0)
; buf start address is: 4 (R1)
; buf end address is: 4 (R1)
0x3426	0x4284    CMP	R4, R0
0x3428	0xD205    BCS	L_Clear_buffer16
; buf end address is: 4 (R1)
;uart.c, 124 :: 		buf[count_buf] = 0;
; buf start address is: 4 (R1)
0x342A	0x190B    ADDS	R3, R1, R4
0x342C	0x2200    MOVS	R2, #0
0x342E	0x701A    STRB	R2, [R3, #0]
;uart.c, 122 :: 		for(count_buf = 0;count_buf<len;count_buf++)
0x3430	0x3401    ADDS	R4, #1
0x3432	0xB2E4    UXTB	R4, R4
;uart.c, 125 :: 		}
; len end address is: 0 (R0)
; buf end address is: 4 (R1)
; count_buf end address is: 16 (R4)
0x3434	0xE7F7    B	L_Clear_buffer15
L_Clear_buffer16:
;uart.c, 126 :: 		}
L_end_Clear_buffer:
0x3436	0xB001    ADD	SP, SP, #4
0x3438	0xBD00    POP	(R15)
; end of _Clear_buffer
_WriteDataToAndroid:
;uart.c, 65 :: 		void WriteDataToAndroid()
0x28FC	0xB500    PUSH	(R14)
;uart.c, 68 :: 		unsigned int tmp = 0;
;uart.c, 69 :: 		if(flag_t.response_status)
0x28FE	0x4865    LDR	R0, [PC, #404]
0x2900	0x7800    LDRB	R0, [R0, #0]
0x2902	0x2800    CMP	R0, #0
0x2904	0xD100    BNE	#0
0x2906	0xE0C3    B	L_WriteDataToAndroid8
;uart.c, 71 :: 		LED_UART_TR = ON;
0x2908	0x4A63    LDR	R2, [PC, #396]
0x290A	0x6810    LDR	R0, [R2, #0]
0x290C	0x2101    MOVS	R1, #1
0x290E	0x02C9    LSLS	R1, R1, BitPos(LED_UART_TR+0)
0x2910	0x4308    ORRS	R0, R1
0x2912	0x6010    STR	R0, [R2, #0]
;uart.c, 72 :: 		for(out_count=0;out_count<OUT_BUFFER_SIZE;out_count++)
0x2914	0x2100    MOVS	R1, #0
0x2916	0x4861    LDR	R0, [PC, #388]
0x2918	0x7001    STRB	R1, [R0, #0]
L_WriteDataToAndroid9:
0x291A	0x4860    LDR	R0, [PC, #384]
0x291C	0x7800    LDRB	R0, [R0, #0]
0x291E	0x2816    CMP	R0, #22
0x2920	0xD20A    BCS	L_WriteDataToAndroid10
;uart.c, 74 :: 		out_buffer[out_count] = 0;
0x2922	0x4A5E    LDR	R2, [PC, #376]
0x2924	0x7811    LDRB	R1, [R2, #0]
0x2926	0x485E    LDR	R0, [PC, #376]
0x2928	0x1841    ADDS	R1, R0, R1
0x292A	0x2000    MOVS	R0, #0
0x292C	0x7008    STRB	R0, [R1, #0]
;uart.c, 72 :: 		for(out_count=0;out_count<OUT_BUFFER_SIZE;out_count++)
0x292E	0x4610    MOV	R0, R2
0x2930	0x7800    LDRB	R0, [R0, #0]
0x2932	0x3001    ADDS	R0, #1
0x2934	0x7010    STRB	R0, [R2, #0]
;uart.c, 75 :: 		}
0x2936	0xE7F0    B	L_WriteDataToAndroid9
L_WriteDataToAndroid10:
;uart.c, 76 :: 		out_buffer[0] = 0;
0x2938	0x2100    MOVS	R1, #0
0x293A	0x4859    LDR	R0, [PC, #356]
0x293C	0x7001    STRB	R1, [R0, #0]
;uart.c, 77 :: 		out_buffer[1] = 0;
0x293E	0x2100    MOVS	R1, #0
0x2940	0x4858    LDR	R0, [PC, #352]
0x2942	0x7001    STRB	R1, [R0, #0]
;uart.c, 78 :: 		tmp = (unsigned int)(NegativeLimiter(BoardSensorPPM));
0x2944	0x4858    LDR	R0, [PC, #352]
0x2946	0x6800    LDR	R0, [R0, #0]
0x2948	0xF7FEFDD2  BL	_NegativeLimiter+0
0x294C	0xF7FEFDB8  BL	__FloatToUnsignedIntegral+0
0x2950	0xB280    UXTH	R0, R0
;uart.c, 79 :: 		out_buffer[2] = (unsigned char)(tmp>>8);
0x2952	0x0A01    LSRS	R1, R0, #8
0x2954	0xB2CA    UXTB	R2, R1
0x2956	0x4955    LDR	R1, [PC, #340]
0x2958	0x700A    STRB	R2, [R1, #0]
;uart.c, 80 :: 		out_buffer[3] = (unsigned char)(tmp);
0x295A	0xB2C1    UXTB	R1, R0
0x295C	0x4854    LDR	R0, [PC, #336]
0x295E	0x7001    STRB	R1, [R0, #0]
;uart.c, 82 :: 		tmp = (unsigned int)(NegativeLimiter(ForwardSensorPPM));
0x2960	0x4854    LDR	R0, [PC, #336]
0x2962	0x6800    LDR	R0, [R0, #0]
0x2964	0xF7FEFDC4  BL	_NegativeLimiter+0
0x2968	0xF7FEFDAA  BL	__FloatToUnsignedIntegral+0
0x296C	0xB280    UXTH	R0, R0
;uart.c, 83 :: 		out_buffer[4] = (unsigned char)(tmp>>8);
0x296E	0x0A01    LSRS	R1, R0, #8
0x2970	0xB2CA    UXTB	R2, R1
0x2972	0x4951    LDR	R1, [PC, #324]
0x2974	0x700A    STRB	R2, [R1, #0]
;uart.c, 84 :: 		out_buffer[5] = (unsigned char)(tmp);
0x2976	0xB2C1    UXTB	R1, R0
0x2978	0x4850    LDR	R0, [PC, #320]
0x297A	0x7001    STRB	R1, [R0, #0]
;uart.c, 86 :: 		tmp = (unsigned int)(NegativeLimiter(BackwardSensorPPM));
0x297C	0x4850    LDR	R0, [PC, #320]
0x297E	0x6800    LDR	R0, [R0, #0]
0x2980	0xF7FEFDB6  BL	_NegativeLimiter+0
0x2984	0xF7FEFD9C  BL	__FloatToUnsignedIntegral+0
0x2988	0xB280    UXTH	R0, R0
;uart.c, 87 :: 		out_buffer[6] = (unsigned char)(tmp>>8);
0x298A	0x0A01    LSRS	R1, R0, #8
0x298C	0xB2CA    UXTB	R2, R1
0x298E	0x494D    LDR	R1, [PC, #308]
0x2990	0x700A    STRB	R2, [R1, #0]
;uart.c, 88 :: 		out_buffer[7] = (unsigned char)(tmp);
0x2992	0xB2C1    UXTB	R1, R0
0x2994	0x484C    LDR	R0, [PC, #304]
0x2996	0x7001    STRB	R1, [R0, #0]
;uart.c, 90 :: 		out_buffer[8] = (unsigned char)(((unsigned int)BoardSensorR0)>>8);
0x2998	0x484C    LDR	R0, [PC, #304]
0x299A	0x6800    LDR	R0, [R0, #0]
0x299C	0xF7FEFD90  BL	__FloatToUnsignedIntegral+0
0x29A0	0xB280    UXTH	R0, R0
0x29A2	0x0A00    LSRS	R0, R0, #8
0x29A4	0xB2C1    UXTB	R1, R0
0x29A6	0x484A    LDR	R0, [PC, #296]
0x29A8	0x7001    STRB	R1, [R0, #0]
;uart.c, 91 :: 		out_buffer[9] = (unsigned char)((unsigned int)BoardSensorR0);
0x29AA	0x4848    LDR	R0, [PC, #288]
0x29AC	0x6800    LDR	R0, [R0, #0]
0x29AE	0xF7FEFD87  BL	__FloatToUnsignedIntegral+0
0x29B2	0xB280    UXTH	R0, R0
0x29B4	0xB2C1    UXTB	R1, R0
0x29B6	0x4847    LDR	R0, [PC, #284]
0x29B8	0x7001    STRB	R1, [R0, #0]
;uart.c, 93 :: 		out_buffer[10] = (unsigned char)(((unsigned int)ForwardSensorR0)>>8);
0x29BA	0x4847    LDR	R0, [PC, #284]
0x29BC	0x6800    LDR	R0, [R0, #0]
0x29BE	0xF7FEFD7F  BL	__FloatToUnsignedIntegral+0
0x29C2	0xB280    UXTH	R0, R0
0x29C4	0x0A00    LSRS	R0, R0, #8
0x29C6	0xB2C1    UXTB	R1, R0
0x29C8	0x4844    LDR	R0, [PC, #272]
0x29CA	0x7001    STRB	R1, [R0, #0]
;uart.c, 94 :: 		out_buffer[11] = (unsigned char)((unsigned int)ForwardSensorR0);
0x29CC	0x4842    LDR	R0, [PC, #264]
0x29CE	0x6800    LDR	R0, [R0, #0]
0x29D0	0xF7FEFD76  BL	__FloatToUnsignedIntegral+0
0x29D4	0xB280    UXTH	R0, R0
0x29D6	0xB2C1    UXTB	R1, R0
0x29D8	0x4841    LDR	R0, [PC, #260]
0x29DA	0x7001    STRB	R1, [R0, #0]
;uart.c, 96 :: 		out_buffer[12] = (unsigned char)(((unsigned int)BackwardSensorR0)>>8);
0x29DC	0x4841    LDR	R0, [PC, #260]
0x29DE	0x6800    LDR	R0, [R0, #0]
0x29E0	0xF7FEFD6E  BL	__FloatToUnsignedIntegral+0
0x29E4	0xB280    UXTH	R0, R0
0x29E6	0x0A00    LSRS	R0, R0, #8
0x29E8	0xB2C1    UXTB	R1, R0
0x29EA	0x483F    LDR	R0, [PC, #252]
0x29EC	0x7001    STRB	R1, [R0, #0]
;uart.c, 97 :: 		out_buffer[13] = (unsigned char)((unsigned int)BackwardSensorR0);
0x29EE	0x483D    LDR	R0, [PC, #244]
0x29F0	0x6800    LDR	R0, [R0, #0]
0x29F2	0xF7FEFD65  BL	__FloatToUnsignedIntegral+0
0x29F6	0xB280    UXTH	R0, R0
0x29F8	0xB2C1    UXTB	R1, R0
0x29FA	0x483C    LDR	R0, [PC, #240]
0x29FC	0x7001    STRB	R1, [R0, #0]
;uart.c, 99 :: 		out_buffer[14] = (unsigned char)flag_t.board_sensor_status;
0x29FE	0x483C    LDR	R0, [PC, #240]
0x2A00	0x7801    LDRB	R1, [R0, #0]
0x2A02	0x483C    LDR	R0, [PC, #240]
0x2A04	0x7001    STRB	R1, [R0, #0]
;uart.c, 100 :: 		out_buffer[15] = (unsigned char)flag_t.forward_sensor_status;
0x2A06	0x483C    LDR	R0, [PC, #240]
0x2A08	0x7801    LDRB	R1, [R0, #0]
0x2A0A	0x483C    LDR	R0, [PC, #240]
0x2A0C	0x7001    STRB	R1, [R0, #0]
;uart.c, 101 :: 		out_buffer[16] = (unsigned char)flag_t.backward_sensor_status;
0x2A0E	0x483C    LDR	R0, [PC, #240]
0x2A10	0x7801    LDRB	R1, [R0, #0]
0x2A12	0x483C    LDR	R0, [PC, #240]
0x2A14	0x7001    STRB	R1, [R0, #0]
;uart.c, 103 :: 		out_buffer[17] = (unsigned char)(!flag_t.board_sensor_damage);
0x2A16	0x483C    LDR	R0, [PC, #240]
0x2A18	0x7800    LDRB	R0, [R0, #0]
0x2A1A	0x2800    CMP	R0, #0
0x2A1C	0xD101    BNE	L__WriteDataToAndroid25
0x2A1E	0x2101    MOVS	R1, #1
0x2A20	0xE000    B	L__WriteDataToAndroid26
L__WriteDataToAndroid25:
0x2A22	0x2100    MOVS	R1, #0
L__WriteDataToAndroid26:
0x2A24	0x4839    LDR	R0, [PC, #228]
0x2A26	0x7001    STRB	R1, [R0, #0]
;uart.c, 104 :: 		out_buffer[18] = (unsigned char)(!flag_t.forward_sensor_damage);
0x2A28	0x4839    LDR	R0, [PC, #228]
0x2A2A	0x7800    LDRB	R0, [R0, #0]
0x2A2C	0x2800    CMP	R0, #0
0x2A2E	0xD101    BNE	L__WriteDataToAndroid27
0x2A30	0x2101    MOVS	R1, #1
0x2A32	0xE000    B	L__WriteDataToAndroid28
L__WriteDataToAndroid27:
0x2A34	0x2100    MOVS	R1, #0
L__WriteDataToAndroid28:
0x2A36	0x4837    LDR	R0, [PC, #220]
0x2A38	0x7001    STRB	R1, [R0, #0]
;uart.c, 105 :: 		out_buffer[19] = (unsigned char)(!flag_t.backward_sensor_damage);
0x2A3A	0x4837    LDR	R0, [PC, #220]
0x2A3C	0x7800    LDRB	R0, [R0, #0]
0x2A3E	0x2800    CMP	R0, #0
0x2A40	0xD101    BNE	L__WriteDataToAndroid29
0x2A42	0x2101    MOVS	R1, #1
0x2A44	0xE000    B	L__WriteDataToAndroid30
L__WriteDataToAndroid29:
0x2A46	0x2100    MOVS	R1, #0
L__WriteDataToAndroid30:
0x2A48	0x4834    LDR	R0, [PC, #208]
0x2A4A	0x7001    STRB	R1, [R0, #0]
;uart.c, 107 :: 		out_buffer[20] = (unsigned char)13;
0x2A4C	0x210D    MOVS	R1, #13
0x2A4E	0x4834    LDR	R0, [PC, #208]
0x2A50	0x7001    STRB	R1, [R0, #0]
;uart.c, 108 :: 		out_buffer[21] = (unsigned char)10;
0x2A52	0x210A    MOVS	R1, #10
0x2A54	0x4833    LDR	R0, [PC, #204]
0x2A56	0x7001    STRB	R1, [R0, #0]
;uart.c, 110 :: 		for(out_count=0;out_count<OUT_BUFFER_SIZE;out_count++)
0x2A58	0x2100    MOVS	R1, #0
0x2A5A	0x4810    LDR	R0, [PC, #64]
0x2A5C	0x7001    STRB	R1, [R0, #0]
L_WriteDataToAndroid12:
0x2A5E	0x480F    LDR	R0, [PC, #60]
0x2A60	0x7800    LDRB	R0, [R0, #0]
0x2A62	0x2816    CMP	R0, #22
0x2A64	0xD20B    BCS	L_WriteDataToAndroid13
;uart.c, 112 :: 		UART1_Write(out_buffer[out_count]);
0x2A66	0x480D    LDR	R0, [PC, #52]
0x2A68	0x7801    LDRB	R1, [R0, #0]
0x2A6A	0x480D    LDR	R0, [PC, #52]
0x2A6C	0x1840    ADDS	R0, R0, R1
0x2A6E	0x7800    LDRB	R0, [R0, #0]
0x2A70	0xF7FEFFD6  BL	_UART1_Write+0
;uart.c, 110 :: 		for(out_count=0;out_count<OUT_BUFFER_SIZE;out_count++)
0x2A74	0x4909    LDR	R1, [PC, #36]
0x2A76	0x7808    LDRB	R0, [R1, #0]
0x2A78	0x3001    ADDS	R0, #1
0x2A7A	0x7008    STRB	R0, [R1, #0]
;uart.c, 113 :: 		}
0x2A7C	0xE7EF    B	L_WriteDataToAndroid12
L_WriteDataToAndroid13:
;uart.c, 114 :: 		flag_t.response_status = RESET;
0x2A7E	0x2100    MOVS	R1, #0
0x2A80	0x4804    LDR	R0, [PC, #16]
0x2A82	0x7001    STRB	R1, [R0, #0]
;uart.c, 115 :: 		LED_UART_TR = OFF;
0x2A84	0x4A04    LDR	R2, [PC, #16]
0x2A86	0x6810    LDR	R0, [R2, #0]
0x2A88	0x2101    MOVS	R1, #1
0x2A8A	0x02C9    LSLS	R1, R1, BitPos(LED_UART_TR+0)
0x2A8C	0x4388    BICS	R0, R1
0x2A8E	0x6010    STR	R0, [R2, #0]
;uart.c, 116 :: 		}
L_WriteDataToAndroid8:
;uart.c, 117 :: 		}
L_end_WriteDataToAndroid:
0x2A90	0xBD00    POP	(R15)
0x2A92	0xBF00    NOP
0x2A94	0x017A2000  	_flag_t+20
0x2A98	0x00144800  	LED_UART_TR+0
0x2A9C	0x00942000  	WriteDataToAndroid_out_count_L0+0
0x2AA0	0x01B82000  	_out_buffer+0
0x2AA4	0x01B92000  	_out_buffer+1
0x2AA8	0x000C2000  	_BoardSensorPPM+0
0x2AAC	0x01BA2000  	_out_buffer+2
0x2AB0	0x01BB2000  	_out_buffer+3
0x2AB4	0x00102000  	_ForwardSensorPPM+0
0x2AB8	0x01BC2000  	_out_buffer+4
0x2ABC	0x01BD2000  	_out_buffer+5
0x2AC0	0x00142000  	_BackwardSensorPPM+0
0x2AC4	0x01BE2000  	_out_buffer+6
0x2AC8	0x01BF2000  	_out_buffer+7
0x2ACC	0x00182000  	_BoardSensorR0+0
0x2AD0	0x01C02000  	_out_buffer+8
0x2AD4	0x01C12000  	_out_buffer+9
0x2AD8	0x001C2000  	_ForwardSensorR0+0
0x2ADC	0x01C22000  	_out_buffer+10
0x2AE0	0x01C32000  	_out_buffer+11
0x2AE4	0x00202000  	_BackwardSensorR0+0
0x2AE8	0x01C42000  	_out_buffer+12
0x2AEC	0x01C52000  	_out_buffer+13
0x2AF0	0x01672000  	_flag_t+1
0x2AF4	0x01C62000  	_out_buffer+14
0x2AF8	0x01682000  	_flag_t+2
0x2AFC	0x01C72000  	_out_buffer+15
0x2B00	0x01692000  	_flag_t+3
0x2B04	0x01C82000  	_out_buffer+16
0x2B08	0x016F2000  	_flag_t+9
0x2B0C	0x01C92000  	_out_buffer+17
0x2B10	0x01702000  	_flag_t+10
0x2B14	0x01CA2000  	_out_buffer+18
0x2B18	0x01712000  	_flag_t+11
0x2B1C	0x01CB2000  	_out_buffer+19
0x2B20	0x01CC2000  	_out_buffer+20
0x2B24	0x01CD2000  	_out_buffer+21
; end of _WriteDataToAndroid
_NegativeLimiter:
;uart.c, 53 :: 		float NegativeLimiter(float value)
; value start address is: 0 (R0)
0x14F0	0xB500    PUSH	(R14)
0x14F2	0x4603    MOV	R3, R0
; value end address is: 0 (R0)
; value start address is: 12 (R3)
;uart.c, 55 :: 		if(value<=0)
0x14F4	0x2000    MOVS	R0, #0
0x14F6	0x461A    MOV	R2, R3
0x14F8	0xF7FFF8E4  BL	__Compare_FP+0
0x14FC	0xDB01    BLT	L__NegativeLimiter22
0x14FE	0x2001    MOVS	R0, #1
0x1500	0xE000    B	L__NegativeLimiter23
L__NegativeLimiter22:
0x1502	0x2000    MOVS	R0, #0
L__NegativeLimiter23:
0x1504	0x2800    CMP	R0, #0
0x1506	0xD001    BEQ	L_NegativeLimiter6
; value end address is: 12 (R3)
;uart.c, 57 :: 		return 0;
0x1508	0x2000    MOVS	R0, #0
0x150A	0xE000    B	L_end_NegativeLimiter
;uart.c, 58 :: 		}
L_NegativeLimiter6:
;uart.c, 61 :: 		return value;
; value start address is: 12 (R3)
0x150C	0x4618    MOV	R0, R3
; value end address is: 12 (R3)
;uart.c, 63 :: 		}
L_end_NegativeLimiter:
0x150E	0xBD00    POP	(R15)
; end of _NegativeLimiter
__Compare_FP:
;__Lib_MathDouble.c, 697 :: 		
0x06C4	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 700 :: 		
0x06C6	0xB410    PUSH	(R4)
;__Lib_MathDouble.c, 702 :: 		
0x06C8	0x4290    CMP	R0, R2
;__Lib_MathDouble.c, 706 :: 		
0x06CA	0xD023    BEQ	__me_lab_end
;__Lib_MathDouble.c, 711 :: 		
0x06CC	0x4604    MOV	R4, R0
;__Lib_MathDouble.c, 712 :: 		
0x06CE	0x4314    ORRS	R4, R2
;__Lib_MathDouble.c, 713 :: 		
0x06D0	0x0064    LSLS	R4, R4, #1
;__Lib_MathDouble.c, 714 :: 		
0x06D2	0x2C00    CMP	R4, #0
;__Lib_MathDouble.c, 718 :: 		
0x06D4	0xD01E    BEQ	__me_lab_end
;__Lib_MathDouble.c, 720 :: 		
0x06D6	0x0044    LSLS	R4, R0, #1
;__Lib_MathDouble.c, 721 :: 		
0x06D8	0xD104    BNE	__me_ct2_
;__Lib_MathDouble.c, 723 :: 		
0x06DA	0x4294    CMP	R4, R2
;__Lib_MathDouble.c, 724 :: 		
0x06DC	0xD401    BMI	__me_labop2_pos
;__Lib_MathDouble.c, 725 :: 		
0x06DE	0x1CA4    ADDS	R4, R4, #2
;__Lib_MathDouble.c, 726 :: 		
0x06E0	0x2C01    CMP	R4, #1
;__Lib_MathDouble.c, 727 :: 		
__me_labop2_pos:
;__Lib_MathDouble.c, 730 :: 		
0x06E2	0xE017    B	__me_lab_end
;__Lib_MathDouble.c, 732 :: 		
__me_ct2_:
;__Lib_MathDouble.c, 733 :: 		
0x06E4	0x0044    LSLS	R4, R0, #1
;__Lib_MathDouble.c, 734 :: 		
0x06E6	0x0E24    LSRS	R4, R4, #24
;__Lib_MathDouble.c, 735 :: 		
0x06E8	0x2CFF    CMP	R4, #255
;__Lib_MathDouble.c, 736 :: 		
0x06EA	0xD107    BNE	__me_ct1_
;__Lib_MathDouble.c, 737 :: 		
0x06EC	0x0054    LSLS	R4, R2, #1
;__Lib_MathDouble.c, 738 :: 		
0x06EE	0x0E24    LSRS	R4, R4, #24
;__Lib_MathDouble.c, 739 :: 		
0x06F0	0x2CFF    CMP	R4, #255
;__Lib_MathDouble.c, 740 :: 		
0x06F2	0xD103    BNE	__me_ct1_
;__Lib_MathDouble.c, 742 :: 		
0x06F4	0x0FD4    LSRS	R4, R2, #31
;__Lib_MathDouble.c, 744 :: 		
0x06F6	0x0FC1    LSRS	R1, R0, #31
;__Lib_MathDouble.c, 745 :: 		
0x06F8	0x1A64    SUBS	R4, R4, R1
;__Lib_MathDouble.c, 748 :: 		
0x06FA	0xE00B    B	__me_lab_end
;__Lib_MathDouble.c, 750 :: 		
__me_ct1_:
;__Lib_MathDouble.c, 751 :: 		
0x06FC	0x2A00    CMP	R2, #0
;__Lib_MathDouble.c, 752 :: 		
0x06FE	0xD406    BMI	__me_op2_m
;__Lib_MathDouble.c, 754 :: 		
0x0700	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 755 :: 		
0x0702	0xDC02    BGT	__me_labop1_pos
;__Lib_MathDouble.c, 756 :: 		
0x0704	0x2400    MOVS	R4, #0
;__Lib_MathDouble.c, 757 :: 		
0x0706	0x2C01    CMP	R4, #1
;__Lib_MathDouble.c, 760 :: 		
0x0708	0xE004    B	__me_lab_end
;__Lib_MathDouble.c, 763 :: 		
__me_labop1_pos:
;__Lib_MathDouble.c, 764 :: 		
0x070A	0x4290    CMP	R0, R2
;__Lib_MathDouble.c, 767 :: 		
0x070C	0xE002    B	__me_lab_end
;__Lib_MathDouble.c, 769 :: 		
__me_op2_m:
;__Lib_MathDouble.c, 770 :: 		
0x070E	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 774 :: 		
0x0710	0xD500    BPL	__me_lab_end
;__Lib_MathDouble.c, 775 :: 		
0x0712	0x4282    CMP	R2, R0
;__Lib_MathDouble.c, 777 :: 		
__me_lab_end:
;__Lib_MathDouble.c, 778 :: 		
0x0714	0xBC10    POP	(R4)
;__Lib_MathDouble.c, 781 :: 		
L_end__Compare_FP:
0x0716	0xB001    ADD	SP, SP, #4
0x0718	0x4770    BX	LR
; end of __Compare_FP
__FloatToUnsignedIntegral:
;__Lib_MathDouble.c, 62 :: 		
0x14C0	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 64 :: 		
0x14C2	0x0040    LSLS	R0, R0, #1
;__Lib_MathDouble.c, 65 :: 		
0x14C4	0x0840    LSRS	R0, R0, #1
;__Lib_MathDouble.c, 66 :: 		
0x14C6	0x0DC1    LSRS	R1, R0, #23
;__Lib_MathDouble.c, 67 :: 		
0x14C8	0x0240    LSLS	R0, R0, #9
;__Lib_MathDouble.c, 68 :: 		
0x14CA	0x2201    MOVS	R2, #1
;__Lib_MathDouble.c, 69 :: 		
0x14CC	0x0A40    LSRS	R0, R0, #9
;__Lib_MathDouble.c, 70 :: 		
0x14CE	0x05D2    LSLS	R2, R2, #23
;__Lib_MathDouble.c, 71 :: 		
0x14D0	0x1880    ADDS	R0, R0, R2
;__Lib_MathDouble.c, 72 :: 		
0x14D2	0x297F    CMP	R1, #127
;__Lib_MathDouble.c, 73 :: 		
0x14D4	0xDA01    BGE	_FloatToUnsignedIntegral_Lab_1
;__Lib_MathDouble.c, 74 :: 		
0x14D6	0x2000    MOVS	R0, #0
;__Lib_MathDouble.c, 75 :: 		
0x14D8	0xE007    B	_FloatToUnsignedIntegral_Lab_end
;__Lib_MathDouble.c, 76 :: 		
_FloatToUnsignedIntegral_Lab_1:
;__Lib_MathDouble.c, 77 :: 		
0x14DA	0x2996    CMP	R1, #150
;__Lib_MathDouble.c, 78 :: 		
0x14DC	0xDC03    BGT	_FloatToUnsignedIntegral_Lab_2
;__Lib_MathDouble.c, 79 :: 		
0x14DE	0x2296    MOVS	R2, #150
;__Lib_MathDouble.c, 80 :: 		
0x14E0	0x1A51    SUBS	R1, R2, R1
;__Lib_MathDouble.c, 81 :: 		
0x14E2	0x40C8    LSRS	R0, R1
;__Lib_MathDouble.c, 82 :: 		
0x14E4	0xE001    B	_FloatToUnsignedIntegral_Lab_end
;__Lib_MathDouble.c, 83 :: 		
_FloatToUnsignedIntegral_Lab_2:
;__Lib_MathDouble.c, 84 :: 		
0x14E6	0x3996    SUBS	R1, #150
;__Lib_MathDouble.c, 85 :: 		
0x14E8	0x4088    LSLS	R0, R1
;__Lib_MathDouble.c, 87 :: 		
_FloatToUnsignedIntegral_Lab_end:
;__Lib_MathDouble.c, 89 :: 		
L_end__FloatToUnsignedIntegral:
0x14EA	0xB001    ADD	SP, SP, #4
0x14EC	0x4770    BX	LR
; end of __FloatToUnsignedIntegral
_UART1_Write:
;__Lib_UART_1.c, 43 :: 		
; _data start address is: 0 (R0)
0x1A20	0xB500    PUSH	(R14)
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_1.c, 44 :: 		
0x1A22	0xB281    UXTH	R1, R0
; _data end address is: 0 (R0)
0x1A24	0x4801    LDR	R0, [PC, #4]
0x1A26	0xF7FEFE83  BL	__Lib_UART_1_UARTx_Write+0
;__Lib_UART_1.c, 45 :: 		
L_end_UART1_Write:
0x1A2A	0xBD00    POP	(R15)
0x1A2C	0x38004001  	USART1_CR1+0
; end of _UART1_Write
__Lib_UART_1_UARTx_Write:
;__Lib_UART_1.c, 37 :: 		
; _data start address is: 4 (R1)
; UART_Base start address is: 0 (R0)
0x0730	0xB500    PUSH	(R14)
0x0732	0xB081    SUB	SP, SP, #4
; _data end address is: 4 (R1)
; UART_Base end address is: 0 (R0)
; UART_Base start address is: 0 (R0)
; _data start address is: 4 (R1)
0x0734	0x9100    STR	R1, [SP, #0]
; UART_Base end address is: 0 (R0)
; _data end address is: 4 (R1)
0x0736	0x4601    MOV	R1, R0
0x0738	0x9800    LDR	R0, [SP, #0]
0x073A	0xB280    UXTH	R0, R0
;__Lib_UART_1.c, 38 :: 		
L___Lib_UART_1_UARTx_Write0:
; _data start address is: 0 (R0)
; UART_Base start address is: 4 (R1)
0x073C	0x460A    MOV	R2, R1
0x073E	0x321C    ADDS	R2, #28
0x0740	0x6813    LDR	R3, [R2, #0]
0x0742	0x2280    MOVS	R2, #128
0x0744	0x401A    ANDS	R2, R3
0x0746	0x09D2    LSRS	R2, R2, #7
0x0748	0x2A00    CMP	R2, #0
0x074A	0xD100    BNE	L___Lib_UART_1_UARTx_Write1
;__Lib_UART_1.c, 39 :: 		
0x074C	0xE7F6    B	L___Lib_UART_1_UARTx_Write0
L___Lib_UART_1_UARTx_Write1:
;__Lib_UART_1.c, 40 :: 		
0x074E	0x460A    MOV	R2, R1
0x0750	0x3228    ADDS	R2, #40
; UART_Base end address is: 4 (R1)
0x0752	0x6010    STR	R0, [R2, #0]
; _data end address is: 0 (R0)
;__Lib_UART_1.c, 41 :: 		
L_end_UARTx_Write:
0x0754	0xB001    ADD	SP, SP, #4
0x0756	0xBD00    POP	(R15)
; end of __Lib_UART_1_UARTx_Write
_clear_WDT:
;timer_func.c, 91 :: 		void clear_WDT()
;timer_func.c, 93 :: 		IWDG_KR = 0xAAAA;      //reset watchdog
0x27B8	0x4901    LDR	R1, [PC, #4]
0x27BA	0x4802    LDR	R0, [PC, #8]
0x27BC	0x6001    STR	R1, [R0, #0]
;timer_func.c, 94 :: 		}
L_end_clear_WDT:
0x27BE	0x4770    BX	LR
0x27C0	0xAAAA0000  	#43690
0x27C4	0x30004000  	1073754112
; end of _clear_WDT
_ReadAnalogInput:
;adc_func.c, 35 :: 		void ReadAnalogInput()
0x2BD0	0xB500    PUSH	(R14)
0x2BD2	0xB083    SUB	SP, SP, #12
;adc_func.c, 39 :: 		if((rai_count++)>=2)
0x2BD4	0x4A98    LDR	R2, [PC, #608]
0x2BD6	0x7811    LDRB	R1, [R2, #0]
0x2BD8	0x4610    MOV	R0, R2
0x2BDA	0x7800    LDRB	R0, [R0, #0]
0x2BDC	0x3001    ADDS	R0, #1
0x2BDE	0x7010    STRB	R0, [R2, #0]
0x2BE0	0x2902    CMP	R1, #2
0x2BE2	0xD200    BCS	#0
0x2BE4	0xE17F    B	L_ReadAnalogInput0
;adc_func.c, 41 :: 		rai_count=0;
0x2BE6	0x2100    MOVS	R1, #0
0x2BE8	0x4893    LDR	R0, [PC, #588]
0x2BEA	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 42 :: 		switch(read_count++)
0x2BEC	0x4993    LDR	R1, [PC, #588]
0x2BEE	0x7808    LDRB	R0, [R1, #0]
0x2BF0	0x9002    STR	R0, [SP, #8]
0x2BF2	0x4608    MOV	R0, R1
0x2BF4	0x7800    LDRB	R0, [R0, #0]
0x2BF6	0x3001    ADDS	R0, #1
0x2BF8	0x7008    STRB	R0, [R1, #0]
0x2BFA	0xE15D    B	L_ReadAnalogInput1
;adc_func.c, 44 :: 		case 0:  tmpBoardSensorValue = BoardSensorValue;
L_ReadAnalogInput3:
;adc_func.c, 45 :: 		BoardSensorValue    = (float)Read_ADC_chanell(BOARD_SENSOR,ADC_AVG);
0x2BFC	0x4990    LDR	R1, [PC, #576]
0x2BFE	0x2001    MOVS	R0, #1
0x2C00	0xF7FEFEF8  BL	_Read_ADC_chanell+0
0x2C04	0xF7FEFE9A  BL	__UnsignedIntegralToFloat+0
0x2C08	0x498E    LDR	R1, [PC, #568]
0x2C0A	0x6008    STR	R0, [R1, #0]
;adc_func.c, 46 :: 		if(flag_t.process_start_status)
0x2C0C	0x488E    LDR	R0, [PC, #568]
0x2C0E	0x7800    LDRB	R0, [R0, #0]
0x2C10	0x2800    CMP	R0, #0
0x2C12	0xD02D    BEQ	L_ReadAnalogInput4
;adc_func.c, 48 :: 		if(BoardSensorValue > BoardSensorR0)
0x2C14	0x488D    LDR	R0, [PC, #564]
0x2C16	0x6802    LDR	R2, [R0, #0]
0x2C18	0x488A    LDR	R0, [PC, #552]
0x2C1A	0x6800    LDR	R0, [R0, #0]
0x2C1C	0xF7FDFD52  BL	__Compare_FP+0
0x2C20	0xDD01    BLE	L__ReadAnalogInput154
0x2C22	0x2001    MOVS	R0, #1
0x2C24	0xE000    B	L__ReadAnalogInput155
L__ReadAnalogInput154:
0x2C26	0x2000    MOVS	R0, #0
L__ReadAnalogInput155:
0x2C28	0x2800    CMP	R0, #0
0x2C2A	0xD021    BEQ	L_ReadAnalogInput5
;adc_func.c, 50 :: 		if(((BoardSensorValue - BoardSensorR0) >= 1)&&((BoardSensorValue - BoardSensorR0) <= 4))
0x2C2C	0x4887    LDR	R0, [PC, #540]
0x2C2E	0x6802    LDR	R2, [R0, #0]
0x2C30	0x4884    LDR	R0, [PC, #528]
0x2C32	0x6800    LDR	R0, [R0, #0]
0x2C34	0xF7FEFEFC  BL	__Sub_FP+0
0x2C38	0x4A85    LDR	R2, [PC, #532]
0x2C3A	0xF7FDFD43  BL	__Compare_FP+0
0x2C3E	0xDB01    BLT	L__ReadAnalogInput156
0x2C40	0x2001    MOVS	R0, #1
0x2C42	0xE000    B	L__ReadAnalogInput157
L__ReadAnalogInput156:
0x2C44	0x2000    MOVS	R0, #0
L__ReadAnalogInput157:
0x2C46	0x2800    CMP	R0, #0
0x2C48	0xD012    BEQ	L__ReadAnalogInput136
0x2C4A	0x4880    LDR	R0, [PC, #512]
0x2C4C	0x6802    LDR	R2, [R0, #0]
0x2C4E	0x487D    LDR	R0, [PC, #500]
0x2C50	0x6800    LDR	R0, [R0, #0]
0x2C52	0xF7FEFEED  BL	__Sub_FP+0
0x2C56	0x4A7F    LDR	R2, [PC, #508]
0x2C58	0xF7FDFD34  BL	__Compare_FP+0
0x2C5C	0xDC01    BGT	L__ReadAnalogInput158
0x2C5E	0x2001    MOVS	R0, #1
0x2C60	0xE000    B	L__ReadAnalogInput159
L__ReadAnalogInput158:
0x2C62	0x2000    MOVS	R0, #0
L__ReadAnalogInput159:
0x2C64	0x2800    CMP	R0, #0
0x2C66	0xD003    BEQ	L__ReadAnalogInput135
L__ReadAnalogInput134:
;adc_func.c, 52 :: 		BoardSensorValue = BoardSensorR0;
0x2C68	0x4878    LDR	R0, [PC, #480]
0x2C6A	0x6801    LDR	R1, [R0, #0]
0x2C6C	0x4875    LDR	R0, [PC, #468]
0x2C6E	0x6001    STR	R1, [R0, #0]
;adc_func.c, 50 :: 		if(((BoardSensorValue - BoardSensorR0) >= 1)&&((BoardSensorValue - BoardSensorR0) <= 4))
L__ReadAnalogInput136:
L__ReadAnalogInput135:
;adc_func.c, 54 :: 		}
L_ReadAnalogInput5:
;adc_func.c, 55 :: 		}
L_ReadAnalogInput4:
;adc_func.c, 56 :: 		BoardSensorVrl = ((float)BoardSensorValue *  (float)(VrefIntVoltage/ADC_RANGE*1000));
0x2C70	0x4874    LDR	R0, [PC, #464]
0x2C72	0x6800    LDR	R0, [R0, #0]
0x2C74	0x9001    STR	R0, [SP, #4]
0x2C76	0x4878    LDR	R0, [PC, #480]
0x2C78	0x6800    LDR	R0, [R0, #0]
0x2C7A	0x4A78    LDR	R2, [PC, #480]
0x2C7C	0xF7FEFE68  BL	__Div_FP+0
0x2C80	0x4A77    LDR	R2, [PC, #476]
0x2C82	0xF7FEFE19  BL	__Mul_FP+0
0x2C86	0x9A01    LDR	R2, [SP, #4]
0x2C88	0xF7FEFE16  BL	__Mul_FP+0
0x2C8C	0x4975    LDR	R1, [PC, #468]
0x2C8E	0x6008    STR	R0, [R1, #0]
;adc_func.c, 57 :: 		break;
0x2C90	0xE129    B	L_ReadAnalogInput2
;adc_func.c, 58 :: 		case 1:  BoardSensorPPM  = calculatePPM((float)BoardSensorValue,(float)parameters_t.board_sensor_v0_cal_data,(float)parameters_t.board_sensor_cal_data);
L_ReadAnalogInput9:
0x2C92	0x4875    LDR	R0, [PC, #468]
0x2C94	0x8800    LDRH	R0, [R0, #0]
0x2C96	0xF7FEFE51  BL	__UnsignedIntegralToFloat+0
0x2C9A	0x9001    STR	R0, [SP, #4]
0x2C9C	0x4873    LDR	R0, [PC, #460]
0x2C9E	0x8800    LDRH	R0, [R0, #0]
0x2CA0	0xF7FEFE4C  BL	__UnsignedIntegralToFloat+0
0x2CA4	0x4967    LDR	R1, [PC, #412]
0x2CA6	0x680A    LDR	R2, [R1, #0]
0x2CA8	0x9901    LDR	R1, [SP, #4]
0x2CAA	0x9000    STR	R0, [SP, #0]
0x2CAC	0x4610    MOV	R0, R2
0x2CAE	0x460A    MOV	R2, R1
0x2CB0	0x9900    LDR	R1, [SP, #0]
0x2CB2	0xF7FEFEC5  BL	_calculatePPM+0
0x2CB6	0x496E    LDR	R1, [PC, #440]
0x2CB8	0x6008    STR	R0, [R1, #0]
;adc_func.c, 59 :: 		break;
0x2CBA	0xE114    B	L_ReadAnalogInput2
;adc_func.c, 60 :: 		case 2:  tmpForwardSensorValue = ForwardSensorValue;
L_ReadAnalogInput10:
;adc_func.c, 61 :: 		ForwardSensorValue  = (float)Read_ADC_chanell(FORWARD_SENSOR,ADC_AVG);
0x2CBC	0x4960    LDR	R1, [PC, #384]
0x2CBE	0x2003    MOVS	R0, #3
0x2CC0	0xF7FEFE98  BL	_Read_ADC_chanell+0
0x2CC4	0xF7FEFE3A  BL	__UnsignedIntegralToFloat+0
0x2CC8	0x496A    LDR	R1, [PC, #424]
0x2CCA	0x6008    STR	R0, [R1, #0]
;adc_func.c, 62 :: 		if(flag_t.process_start_status)
0x2CCC	0x485E    LDR	R0, [PC, #376]
0x2CCE	0x7800    LDRB	R0, [R0, #0]
0x2CD0	0x2800    CMP	R0, #0
0x2CD2	0xD02D    BEQ	L_ReadAnalogInput11
;adc_func.c, 64 :: 		if(ForwardSensorValue > ForwardSensorR0)
0x2CD4	0x4868    LDR	R0, [PC, #416]
0x2CD6	0x6802    LDR	R2, [R0, #0]
0x2CD8	0x4866    LDR	R0, [PC, #408]
0x2CDA	0x6800    LDR	R0, [R0, #0]
0x2CDC	0xF7FDFCF2  BL	__Compare_FP+0
0x2CE0	0xDD01    BLE	L__ReadAnalogInput160
0x2CE2	0x2001    MOVS	R0, #1
0x2CE4	0xE000    B	L__ReadAnalogInput161
L__ReadAnalogInput160:
0x2CE6	0x2000    MOVS	R0, #0
L__ReadAnalogInput161:
0x2CE8	0x2800    CMP	R0, #0
0x2CEA	0xD021    BEQ	L_ReadAnalogInput12
;adc_func.c, 66 :: 		if(((ForwardSensorValue - ForwardSensorR0) >= 1)&&((ForwardSensorValue - ForwardSensorR0) <= 4))
0x2CEC	0x4862    LDR	R0, [PC, #392]
0x2CEE	0x6802    LDR	R2, [R0, #0]
0x2CF0	0x4860    LDR	R0, [PC, #384]
0x2CF2	0x6800    LDR	R0, [R0, #0]
0x2CF4	0xF7FEFE9C  BL	__Sub_FP+0
0x2CF8	0x4A55    LDR	R2, [PC, #340]
0x2CFA	0xF7FDFCE3  BL	__Compare_FP+0
0x2CFE	0xDB01    BLT	L__ReadAnalogInput162
0x2D00	0x2001    MOVS	R0, #1
0x2D02	0xE000    B	L__ReadAnalogInput163
L__ReadAnalogInput162:
0x2D04	0x2000    MOVS	R0, #0
L__ReadAnalogInput163:
0x2D06	0x2800    CMP	R0, #0
0x2D08	0xD012    BEQ	L__ReadAnalogInput138
0x2D0A	0x485B    LDR	R0, [PC, #364]
0x2D0C	0x6802    LDR	R2, [R0, #0]
0x2D0E	0x4859    LDR	R0, [PC, #356]
0x2D10	0x6800    LDR	R0, [R0, #0]
0x2D12	0xF7FEFE8D  BL	__Sub_FP+0
0x2D16	0x4A4F    LDR	R2, [PC, #316]
0x2D18	0xF7FDFCD4  BL	__Compare_FP+0
0x2D1C	0xDC01    BGT	L__ReadAnalogInput164
0x2D1E	0x2001    MOVS	R0, #1
0x2D20	0xE000    B	L__ReadAnalogInput165
L__ReadAnalogInput164:
0x2D22	0x2000    MOVS	R0, #0
L__ReadAnalogInput165:
0x2D24	0x2800    CMP	R0, #0
0x2D26	0xD003    BEQ	L__ReadAnalogInput137
L__ReadAnalogInput133:
;adc_func.c, 68 :: 		ForwardSensorValue = ForwardSensorR0;
0x2D28	0x4853    LDR	R0, [PC, #332]
0x2D2A	0x6801    LDR	R1, [R0, #0]
0x2D2C	0x4851    LDR	R0, [PC, #324]
0x2D2E	0x6001    STR	R1, [R0, #0]
;adc_func.c, 66 :: 		if(((ForwardSensorValue - ForwardSensorR0) >= 1)&&((ForwardSensorValue - ForwardSensorR0) <= 4))
L__ReadAnalogInput138:
L__ReadAnalogInput137:
;adc_func.c, 70 :: 		}
L_ReadAnalogInput12:
;adc_func.c, 71 :: 		}
L_ReadAnalogInput11:
;adc_func.c, 72 :: 		ForwardSensorVrl  =  ((float)ForwardSensorValue *  (float)(VrefIntVoltage/ADC_RANGE*1000));
0x2D30	0x4850    LDR	R0, [PC, #320]
0x2D32	0x6800    LDR	R0, [R0, #0]
0x2D34	0x9001    STR	R0, [SP, #4]
0x2D36	0x4848    LDR	R0, [PC, #288]
0x2D38	0x6800    LDR	R0, [R0, #0]
0x2D3A	0x4A48    LDR	R2, [PC, #288]
0x2D3C	0xF7FEFE08  BL	__Div_FP+0
0x2D40	0x4A47    LDR	R2, [PC, #284]
0x2D42	0xF7FEFDB9  BL	__Mul_FP+0
0x2D46	0x9A01    LDR	R2, [SP, #4]
0x2D48	0xF7FEFDB6  BL	__Mul_FP+0
0x2D4C	0x494B    LDR	R1, [PC, #300]
0x2D4E	0x6008    STR	R0, [R1, #0]
;adc_func.c, 73 :: 		break;
0x2D50	0xE0C9    B	L_ReadAnalogInput2
;adc_func.c, 74 :: 		case 3:  ForwardSensorPPM    = calculatePPM((float)ForwardSensorValue, (float)parameters_t.forward_sensor_v0_cal_data,(float)parameters_t.forward_sensor_cal_data);
L_ReadAnalogInput16:
0x2D52	0x484B    LDR	R0, [PC, #300]
0x2D54	0x8800    LDRH	R0, [R0, #0]
0x2D56	0xF7FEFDF1  BL	__UnsignedIntegralToFloat+0
0x2D5A	0x9001    STR	R0, [SP, #4]
0x2D5C	0x4849    LDR	R0, [PC, #292]
0x2D5E	0x8800    LDRH	R0, [R0, #0]
0x2D60	0xF7FEFDEC  BL	__UnsignedIntegralToFloat+0
0x2D64	0x4943    LDR	R1, [PC, #268]
0x2D66	0x680A    LDR	R2, [R1, #0]
0x2D68	0x9901    LDR	R1, [SP, #4]
0x2D6A	0x9000    STR	R0, [SP, #0]
0x2D6C	0x4610    MOV	R0, R2
0x2D6E	0x460A    MOV	R2, R1
0x2D70	0x9900    LDR	R1, [SP, #0]
0x2D72	0xF7FEFE65  BL	_calculatePPM+0
0x2D76	0x4944    LDR	R1, [PC, #272]
0x2D78	0x6008    STR	R0, [R1, #0]
;adc_func.c, 75 :: 		break;
0x2D7A	0xE0B4    B	L_ReadAnalogInput2
;adc_func.c, 76 :: 		case 4:  tmpBackwardSensorValue = BackwardSensorValue;
L_ReadAnalogInput17:
;adc_func.c, 77 :: 		BackwardSensorValue = Read_ADC_chanell(BACKWARD_SENSOR,ADC_AVG);
0x2D7C	0x4930    LDR	R1, [PC, #192]
0x2D7E	0x2004    MOVS	R0, #4
0x2D80	0xF7FEFE38  BL	_Read_ADC_chanell+0
0x2D84	0xF7FEFDDA  BL	__UnsignedIntegralToFloat+0
0x2D88	0x4940    LDR	R1, [PC, #256]
0x2D8A	0x6008    STR	R0, [R1, #0]
;adc_func.c, 78 :: 		if(flag_t.process_start_status)
0x2D8C	0x482E    LDR	R0, [PC, #184]
0x2D8E	0x7800    LDRB	R0, [R0, #0]
0x2D90	0x2800    CMP	R0, #0
0x2D92	0xD02D    BEQ	L_ReadAnalogInput18
;adc_func.c, 80 :: 		if(BackwardSensorValue > BackwardSensorR0)
0x2D94	0x483E    LDR	R0, [PC, #248]
0x2D96	0x6802    LDR	R2, [R0, #0]
0x2D98	0x483C    LDR	R0, [PC, #240]
0x2D9A	0x6800    LDR	R0, [R0, #0]
0x2D9C	0xF7FDFC92  BL	__Compare_FP+0
0x2DA0	0xDD01    BLE	L__ReadAnalogInput166
0x2DA2	0x2001    MOVS	R0, #1
0x2DA4	0xE000    B	L__ReadAnalogInput167
L__ReadAnalogInput166:
0x2DA6	0x2000    MOVS	R0, #0
L__ReadAnalogInput167:
0x2DA8	0x2800    CMP	R0, #0
0x2DAA	0xD021    BEQ	L_ReadAnalogInput19
;adc_func.c, 82 :: 		if(((BackwardSensorValue - BackwardSensorR0) >= 1)&&((BackwardSensorValue - BackwardSensorR0) <= 4))
0x2DAC	0x4838    LDR	R0, [PC, #224]
0x2DAE	0x6802    LDR	R2, [R0, #0]
0x2DB0	0x4836    LDR	R0, [PC, #216]
0x2DB2	0x6800    LDR	R0, [R0, #0]
0x2DB4	0xF7FEFE3C  BL	__Sub_FP+0
0x2DB8	0x4A25    LDR	R2, [PC, #148]
0x2DBA	0xF7FDFC83  BL	__Compare_FP+0
0x2DBE	0xDB01    BLT	L__ReadAnalogInput168
0x2DC0	0x2001    MOVS	R0, #1
0x2DC2	0xE000    B	L__ReadAnalogInput169
L__ReadAnalogInput168:
0x2DC4	0x2000    MOVS	R0, #0
L__ReadAnalogInput169:
0x2DC6	0x2800    CMP	R0, #0
0x2DC8	0xD012    BEQ	L__ReadAnalogInput140
0x2DCA	0x4831    LDR	R0, [PC, #196]
0x2DCC	0x6802    LDR	R2, [R0, #0]
0x2DCE	0x482F    LDR	R0, [PC, #188]
0x2DD0	0x6800    LDR	R0, [R0, #0]
0x2DD2	0xF7FEFE2D  BL	__Sub_FP+0
0x2DD6	0x4A1F    LDR	R2, [PC, #124]
0x2DD8	0xF7FDFC74  BL	__Compare_FP+0
0x2DDC	0xDC01    BGT	L__ReadAnalogInput170
0x2DDE	0x2001    MOVS	R0, #1
0x2DE0	0xE000    B	L__ReadAnalogInput171
L__ReadAnalogInput170:
0x2DE2	0x2000    MOVS	R0, #0
L__ReadAnalogInput171:
0x2DE4	0x2800    CMP	R0, #0
0x2DE6	0xD003    BEQ	L__ReadAnalogInput139
L__ReadAnalogInput132:
;adc_func.c, 84 :: 		BackwardSensorValue = BackwardSensorR0;
0x2DE8	0x4829    LDR	R0, [PC, #164]
0x2DEA	0x6801    LDR	R1, [R0, #0]
0x2DEC	0x4827    LDR	R0, [PC, #156]
0x2DEE	0x6001    STR	R1, [R0, #0]
;adc_func.c, 82 :: 		if(((BackwardSensorValue - BackwardSensorR0) >= 1)&&((BackwardSensorValue - BackwardSensorR0) <= 4))
L__ReadAnalogInput140:
L__ReadAnalogInput139:
;adc_func.c, 86 :: 		}
L_ReadAnalogInput19:
;adc_func.c, 87 :: 		}
L_ReadAnalogInput18:
;adc_func.c, 88 :: 		BackwardSensorVrl =  ((float)BackwardSensorValue *  (float)(VrefIntVoltage/ADC_RANGE*1000));
0x2DF0	0x4826    LDR	R0, [PC, #152]
0x2DF2	0x6800    LDR	R0, [R0, #0]
0x2DF4	0x9001    STR	R0, [SP, #4]
0x2DF6	0x4818    LDR	R0, [PC, #96]
0x2DF8	0x6800    LDR	R0, [R0, #0]
0x2DFA	0x4A18    LDR	R2, [PC, #96]
0x2DFC	0xF7FEFDA8  BL	__Div_FP+0
0x2E00	0x4A17    LDR	R2, [PC, #92]
0x2E02	0xF7FEFD59  BL	__Mul_FP+0
0x2E06	0x9A01    LDR	R2, [SP, #4]
0x2E08	0xF7FEFD56  BL	__Mul_FP+0
0x2E0C	0x4921    LDR	R1, [PC, #132]
0x2E0E	0x6008    STR	R0, [R1, #0]
;adc_func.c, 89 :: 		break;
0x2E10	0xE069    B	L_ReadAnalogInput2
;adc_func.c, 90 :: 		case 5:  BackwardSensorPPM   = calculatePPM((float)BackwardSensorValue, (float)parameters_t.backward_sensor_v0_cal_data,(float)parameters_t.backward_sensor_cal_data);
L_ReadAnalogInput23:
0x2E12	0x4821    LDR	R0, [PC, #132]
0x2E14	0x8800    LDRH	R0, [R0, #0]
0x2E16	0xF7FEFD91  BL	__UnsignedIntegralToFloat+0
0x2E1A	0x9001    STR	R0, [SP, #4]
0x2E1C	0x481F    LDR	R0, [PC, #124]
0x2E1E	0x8800    LDRH	R0, [R0, #0]
0x2E20	0xF7FEFD8C  BL	__UnsignedIntegralToFloat+0
0x2E24	0x4919    LDR	R1, [PC, #100]
0x2E26	0x680A    LDR	R2, [R1, #0]
0x2E28	0x9901    LDR	R1, [SP, #4]
0x2E2A	0x9000    STR	R0, [SP, #0]
0x2E2C	0x4610    MOV	R0, R2
0x2E2E	0x460A    MOV	R2, R1
0x2E30	0x9900    LDR	R1, [SP, #0]
0x2E32	0xF7FEFE05  BL	_calculatePPM+0
0x2E36	0xE033    B	#102
0x2E38	0x00982000  	ReadAnalogInput_rai_count_L0+0
0x2E3C	0x009C2000  	ReadAnalogInput_read_count_L0+0
0x2E40	0x02000000  	#512
0x2E44	0x00002000  	536870912
0x2E48	0x017B2000  	_flag_t+21
0x2E4C	0x00182000  	536870936
0x2E50	0x00003F80  	#1065353216
0x2E54	0x00004080  	#1082130432
0x2E58	0x00302000  	536870960
0x2E5C	0xC000447F  	#1149222912
0x2E60	0x0000447A  	#1148846080
0x2E64	0x00242000  	536870948
0x2E68	0x01882000  	_parameters_t+10
0x2E6C	0x01822000  	_parameters_t+4
0x2E70	0x000C2000  	536870924
0x2E74	0x00042000  	536870916
0x2E78	0x001C2000  	536870940
0x2E7C	0x00282000  	536870952
0x2E80	0x01842000  	_parameters_t+6
0x2E84	0x017E2000  	_parameters_t+0
0x2E88	0x00102000  	536870928
0x2E8C	0x00082000  	536870920
0x2E90	0x00202000  	536870944
0x2E94	0x002C2000  	536870956
0x2E98	0x01862000  	_parameters_t+8
0x2E9C	0x01802000  	_parameters_t+2
0x2EA0	0x4912    LDR	R1, [PC, #72]
0x2EA2	0x6008    STR	R0, [R1, #0]
;adc_func.c, 91 :: 		break;
0x2EA4	0xE01F    B	L_ReadAnalogInput2
;adc_func.c, 92 :: 		case 6:  ReadVrefIntValue();                                                 break;
L_ReadAnalogInput24:
0x2EA6	0xF7FDFF51  BL	_ReadVrefIntValue+0
0x2EAA	0xE01C    B	L_ReadAnalogInput2
;adc_func.c, 93 :: 		case 7:  ComputeTemperature();       read_count = 0;                         break;
L_ReadAnalogInput25:
0x2EAC	0xF7FDFED2  BL	_ComputeTemperature+0
0x2EB0	0x2100    MOVS	R1, #0
0x2EB2	0x480F    LDR	R0, [PC, #60]
0x2EB4	0x7001    STRB	R1, [R0, #0]
0x2EB6	0xE016    B	L_ReadAnalogInput2
;adc_func.c, 94 :: 		}
L_ReadAnalogInput1:
0x2EB8	0x9802    LDR	R0, [SP, #8]
0x2EBA	0xB2C0    UXTB	R0, R0
0x2EBC	0x2800    CMP	R0, #0
0x2EBE	0xD100    BNE	#0
0x2EC0	0xE69C    B	L_ReadAnalogInput3
0x2EC2	0x2801    CMP	R0, #1
0x2EC4	0xD100    BNE	#0
0x2EC6	0xE6E4    B	L_ReadAnalogInput9
0x2EC8	0x2802    CMP	R0, #2
0x2ECA	0xD100    BNE	#0
0x2ECC	0xE6F6    B	L_ReadAnalogInput10
0x2ECE	0x2803    CMP	R0, #3
0x2ED0	0xD100    BNE	#0
0x2ED2	0xE73E    B	L_ReadAnalogInput16
0x2ED4	0x2804    CMP	R0, #4
0x2ED6	0xD100    BNE	#0
0x2ED8	0xE750    B	L_ReadAnalogInput17
0x2EDA	0x2805    CMP	R0, #5
0x2EDC	0xD099    BEQ	L_ReadAnalogInput23
0x2EDE	0x2806    CMP	R0, #6
0x2EE0	0xD0E1    BEQ	L_ReadAnalogInput24
0x2EE2	0x2807    CMP	R0, #7
0x2EE4	0xD0E2    BEQ	L_ReadAnalogInput25
L_ReadAnalogInput2:
;adc_func.c, 96 :: 		}
L_ReadAnalogInput0:
;adc_func.c, 97 :: 		}
L_end_ReadAnalogInput:
0x2EE6	0xB003    ADD	SP, SP, #12
0x2EE8	0xBD00    POP	(R15)
0x2EEA	0xBF00    NOP
0x2EEC	0x00142000  	536870932
0x2EF0	0x009C2000  	ReadAnalogInput_read_count_L0+0
; end of _ReadAnalogInput
_Read_ADC_chanell:
;adc_func.c, 521 :: 		unsigned long Read_ADC_chanell(unsigned char chanell,unsigned int samples)
; samples start address is: 4 (R1)
; chanell start address is: 0 (R0)
0x19F4	0xB500    PUSH	(R14)
; samples end address is: 4 (R1)
; chanell end address is: 0 (R0)
; chanell start address is: 0 (R0)
; samples start address is: 4 (R1)
;adc_func.c, 523 :: 		unsigned long  temp = 0;
; temp start address is: 24 (R6)
0x19F6	0x2600    MOVS	R6, #0
;adc_func.c, 524 :: 		unsigned int i = 0;
;adc_func.c, 525 :: 		for(i=0;i<samples;i++)
; i start address is: 20 (R5)
0x19F8	0x2500    MOVS	R5, #0
; chanell end address is: 0 (R0)
; samples end address is: 4 (R1)
; temp end address is: 24 (R6)
; i end address is: 20 (R5)
0x19FA	0xB2C4    UXTB	R4, R0
0x19FC	0xB28B    UXTH	R3, R1
L_Read_ADC_chanell108:
; i start address is: 20 (R5)
; chanell start address is: 16 (R4)
; temp start address is: 24 (R6)
; samples start address is: 12 (R3)
; chanell start address is: 16 (R4)
; chanell end address is: 16 (R4)
0x19FE	0x429D    CMP	R5, R3
0x1A00	0xD208    BCS	L_Read_ADC_chanell109
; chanell end address is: 16 (R4)
;adc_func.c, 527 :: 		temp+= (unsigned long)(Read_ADC_sample(chanell)>>2);
; chanell start address is: 16 (R4)
0x1A02	0xB2E0    UXTB	R0, R4
0x1A04	0xF7FEFD58  BL	_Read_ADC_sample+0
0x1A08	0x0882    LSRS	R2, R0, #2
0x1A0A	0xB292    UXTH	R2, R2
0x1A0C	0x18B6    ADDS	R6, R6, R2
;adc_func.c, 525 :: 		for(i=0;i<samples;i++)
0x1A0E	0x3501    ADDS	R5, #1
0x1A10	0xB2AD    UXTH	R5, R5
;adc_func.c, 529 :: 		}
; chanell end address is: 16 (R4)
; i end address is: 20 (R5)
0x1A12	0xE7F4    B	L_Read_ADC_chanell108
L_Read_ADC_chanell109:
;adc_func.c, 530 :: 		return (unsigned long)(temp/samples);
0x1A14	0xB29A    UXTH	R2, R3
0x1A16	0x4630    MOV	R0, R6
0x1A18	0xF7FEFE9E  BL	__Div_32x32_U+0
; samples end address is: 12 (R3)
; temp end address is: 24 (R6)
;adc_func.c, 531 :: 		}
L_end_Read_ADC_chanell:
0x1A1C	0xBD00    POP	(R15)
; end of _Read_ADC_chanell
___CC2DW:
;__Lib_System.c, 28 :: 		
0x071C	0xB081    SUB	SP, SP, #4
;__Lib_System.c, 30 :: 		
L_loopDW:
;__Lib_System.c, 31 :: 		
0x071E	0x783C    LDRB	R4, [R7, #0]
;__Lib_System.c, 32 :: 		
0x0720	0x1C7F    ADDS	R7, R7, #1
;__Lib_System.c, 33 :: 		
0x0722	0x7034    STRB	R4, [R6, #0]
;__Lib_System.c, 34 :: 		
0x0724	0x1C76    ADDS	R6, R6, #1
;__Lib_System.c, 35 :: 		
0x0726	0x42AE    CMP	R6, R5
;__Lib_System.c, 36 :: 		
0x0728	0xD1F9    BNE	L_loopDW
;__Lib_System.c, 38 :: 		
L_end___CC2DW:
0x072A	0xB001    ADD	SP, SP, #4
0x072C	0x4770    BX	LR
; end of ___CC2DW
_Read_ADC_sample:
;adc_func.c, 481 :: 		unsigned int Read_ADC_sample(unsigned char chanell)
; chanell start address is: 0 (R0)
0x04B8	0xB500    PUSH	(R14)
; chanell end address is: 0 (R0)
; chanell start address is: 0 (R0)
;adc_func.c, 489 :: 		switch(chanell)
0x04BA	0xE01B    B	L_Read_ADC_sample97
; chanell end address is: 0 (R0)
;adc_func.c, 491 :: 		case 0:           ADC_CHSELR = ADC_CHSELR_CHSEL0;                    break;
L_Read_ADC_sample99:
0x04BC	0x2201    MOVS	R2, #1
0x04BE	0x491E    LDR	R1, [PC, #120]
0x04C0	0x600A    STR	R2, [R1, #0]
0x04C2	0xE025    B	L_Read_ADC_sample98
;adc_func.c, 492 :: 		case 1:           ADC_CHSELR = ADC_CHSELR_CHSEL1;                    break;
L_Read_ADC_sample100:
0x04C4	0x2202    MOVS	R2, #2
0x04C6	0x491C    LDR	R1, [PC, #112]
0x04C8	0x600A    STR	R2, [R1, #0]
0x04CA	0xE021    B	L_Read_ADC_sample98
;adc_func.c, 493 :: 		case 2:           ADC_CHSELR = ADC_CHSELR_CHSEL2;                    break;
L_Read_ADC_sample101:
0x04CC	0x2204    MOVS	R2, #4
0x04CE	0x491A    LDR	R1, [PC, #104]
0x04D0	0x600A    STR	R2, [R1, #0]
0x04D2	0xE01D    B	L_Read_ADC_sample98
;adc_func.c, 494 :: 		case 3:           ADC_CHSELR = ADC_CHSELR_CHSEL3;                    break;
L_Read_ADC_sample102:
0x04D4	0x2208    MOVS	R2, #8
0x04D6	0x4918    LDR	R1, [PC, #96]
0x04D8	0x600A    STR	R2, [R1, #0]
0x04DA	0xE019    B	L_Read_ADC_sample98
;adc_func.c, 495 :: 		case 4:           ADC_CHSELR = ADC_CHSELR_CHSEL4;                    break;
L_Read_ADC_sample103:
0x04DC	0x2210    MOVS	R2, #16
0x04DE	0x4916    LDR	R1, [PC, #88]
0x04E0	0x600A    STR	R2, [R1, #0]
0x04E2	0xE015    B	L_Read_ADC_sample98
;adc_func.c, 496 :: 		case 16:          ADC_CHSELR = ADC_CHSELR_CHSEL16;                   break;
L_Read_ADC_sample104:
0x04E4	0x4A15    LDR	R2, [PC, #84]
0x04E6	0x4914    LDR	R1, [PC, #80]
0x04E8	0x600A    STR	R2, [R1, #0]
0x04EA	0xE011    B	L_Read_ADC_sample98
;adc_func.c, 497 :: 		case 17:          ADC_CHSELR = ADC_CHSELR_CHSEL17;                   break;
L_Read_ADC_sample105:
0x04EC	0x4A14    LDR	R2, [PC, #80]
0x04EE	0x4912    LDR	R1, [PC, #72]
0x04F0	0x600A    STR	R2, [R1, #0]
0x04F2	0xE00D    B	L_Read_ADC_sample98
;adc_func.c, 498 :: 		}
L_Read_ADC_sample97:
; chanell start address is: 0 (R0)
0x04F4	0x2800    CMP	R0, #0
0x04F6	0xD0E1    BEQ	L_Read_ADC_sample99
0x04F8	0x2801    CMP	R0, #1
0x04FA	0xD0E3    BEQ	L_Read_ADC_sample100
0x04FC	0x2802    CMP	R0, #2
0x04FE	0xD0E5    BEQ	L_Read_ADC_sample101
0x0500	0x2803    CMP	R0, #3
0x0502	0xD0E7    BEQ	L_Read_ADC_sample102
0x0504	0x2804    CMP	R0, #4
0x0506	0xD0E9    BEQ	L_Read_ADC_sample103
0x0508	0x2810    CMP	R0, #16
0x050A	0xD0EB    BEQ	L_Read_ADC_sample104
0x050C	0x2811    CMP	R0, #17
0x050E	0xD0ED    BEQ	L_Read_ADC_sample105
; chanell end address is: 0 (R0)
L_Read_ADC_sample98:
;adc_func.c, 500 :: 		ADC_SMPR = ADC_SMPR_SMP_0 |ADC_SMPR_SMP_1 | ADC_SMPR_SMP_2; /* (3) */
0x0510	0x2207    MOVS	R2, #7
0x0512	0x490C    LDR	R1, [PC, #48]
0x0514	0x600A    STR	R2, [R1, #0]
;adc_func.c, 512 :: 		ADC_CR |= ADC_CR_ADSTART; /* Start the ADC conversion */
0x0516	0x490C    LDR	R1, [PC, #48]
0x0518	0x680A    LDR	R2, [R1, #0]
0x051A	0x2104    MOVS	R1, #4
0x051C	0x430A    ORRS	R2, R1
0x051E	0x490A    LDR	R1, [PC, #40]
0x0520	0x600A    STR	R2, [R1, #0]
;adc_func.c, 513 :: 		while ((ADC_ISR & ADC_ISR_EOC) == 0 ) /* Wait end of conversion */
L_Read_ADC_sample106:
0x0522	0x490A    LDR	R1, [PC, #40]
0x0524	0x680A    LDR	R2, [R1, #0]
0x0526	0x2104    MOVS	R1, #4
0x0528	0x4011    ANDS	R1, R2
0x052A	0x2900    CMP	R1, #0
0x052C	0xD100    BNE	L_Read_ADC_sample107
;adc_func.c, 516 :: 		}
0x052E	0xE7F8    B	L_Read_ADC_sample106
L_Read_ADC_sample107:
;adc_func.c, 517 :: 		return (unsigned int)ADC_DR; /* Store the ADC conversion result */
0x0530	0x4907    LDR	R1, [PC, #28]
0x0532	0x6809    LDR	R1, [R1, #0]
0x0534	0xB288    UXTH	R0, R1
;adc_func.c, 519 :: 		}
L_end_Read_ADC_sample:
0x0536	0xBD00    POP	(R15)
0x0538	0x24284001  	1073816616
0x053C	0x00000001  	#65536
0x0540	0x00000002  	#131072
0x0544	0x24144001  	1073816596
0x0548	0x24084001  	1073816584
0x054C	0x24004001  	1073816576
0x0550	0x24404001  	1073816640
; end of _Read_ADC_sample
__UnsignedIntegralToFloat:
;__Lib_MathDouble.c, 249 :: 		
0x193C	0xB500    PUSH	(R14)
;__Lib_MathDouble.c, 251 :: 		
0x193E	0xB410    PUSH	(R4)
;__Lib_MathDouble.c, 252 :: 		
0x1940	0x2200    MOVS	R2, #0
;__Lib_MathDouble.c, 253 :: 		
0x1942	0x2396    MOVS	R3, #150
;__Lib_MathDouble.c, 254 :: 		
0x1944	0x4611    MOV	R1, R2
;__Lib_MathDouble.c, 255 :: 		
0x1946	0xF7FEFD79  BL	__Lib_MathDouble___Float_Aux+0
;__Lib_MathDouble.c, 256 :: 		
0x194A	0xBC10    POP	(R4)
;__Lib_MathDouble.c, 258 :: 		
L_end__UnsignedIntegralToFloat:
0x194C	0xBD00    POP	(R15)
; end of __UnsignedIntegralToFloat
__Lib_MathDouble___Float_Aux:
;__Lib_MathDouble.c, 1764 :: 		
0x043C	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 1766 :: 		
0x043E	0xB470    PUSH	(R4, R5, R6)
;__Lib_MathDouble.c, 1767 :: 		
0x0440	0x2400    MOVS	R4, #0
;__Lib_MathDouble.c, 1768 :: 		
0x0442	0x0C05    LSRS	R5, R0, #16
;__Lib_MathDouble.c, 1769 :: 		
0x0444	0xD105    BNE	__Float_Aux_Lab_1
;__Lib_MathDouble.c, 1770 :: 		
0x0446	0x2410    MOVS	R4, #16
;__Lib_MathDouble.c, 1771 :: 		
0x0448	0x0400    LSLS	R0, R0, #16
;__Lib_MathDouble.c, 1772 :: 		
0x044A	0xD102    BNE	__Float_Aux_Lab_1
;__Lib_MathDouble.c, 1773 :: 		
0x044C	0x2900    CMP	R1, #0
;__Lib_MathDouble.c, 1774 :: 		
0x044E	0xD022    BEQ	__Float_Aux_Lab_2
;__Lib_MathDouble.c, 1775 :: 		
0x0450	0x2411    MOVS	R4, #17
;__Lib_MathDouble.c, 1777 :: 		
__Float_Aux_Lab_1:
;__Lib_MathDouble.c, 1778 :: 		
0x0452	0x0E05    LSRS	R5, R0, #24
;__Lib_MathDouble.c, 1779 :: 		
0x0454	0xD101    BNE	__Float_Aux_Lab_3
;__Lib_MathDouble.c, 1780 :: 		
0x0456	0x3408    ADDS	R4, #8
;__Lib_MathDouble.c, 1781 :: 		
0x0458	0x0200    LSLS	R0, R0, #8
;__Lib_MathDouble.c, 1783 :: 		
__Float_Aux_Lab_3:
;__Lib_MathDouble.c, 1784 :: 		
0x045A	0x0F05    LSRS	R5, R0, #28
;__Lib_MathDouble.c, 1785 :: 		
0x045C	0xD101    BNE	__Float_Aux_Lab_4
;__Lib_MathDouble.c, 1786 :: 		
0x045E	0x1D24    ADDS	R4, R4, #4
;__Lib_MathDouble.c, 1787 :: 		
0x0460	0x0100    LSLS	R0, R0, #4
;__Lib_MathDouble.c, 1789 :: 		
__Float_Aux_Lab_4:
;__Lib_MathDouble.c, 1790 :: 		
0x0462	0x0F85    LSRS	R5, R0, #30
;__Lib_MathDouble.c, 1791 :: 		
0x0464	0xD101    BNE	__Float_Aux_Lab_5
;__Lib_MathDouble.c, 1792 :: 		
0x0466	0x1CA4    ADDS	R4, R4, #2
;__Lib_MathDouble.c, 1793 :: 		
0x0468	0x0080    LSLS	R0, R0, #2
;__Lib_MathDouble.c, 1795 :: 		
__Float_Aux_Lab_5:
;__Lib_MathDouble.c, 1796 :: 		
0x046A	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 1797 :: 		
0x046C	0xDB01    BLT	__Float_Aux_Lab_6
;__Lib_MathDouble.c, 1798 :: 		
0x046E	0x1C64    ADDS	R4, R4, #1
;__Lib_MathDouble.c, 1799 :: 		
0x0470	0x0040    LSLS	R0, R0, #1
;__Lib_MathDouble.c, 1801 :: 		
__Float_Aux_Lab_6:
;__Lib_MathDouble.c, 1802 :: 		
0x0472	0x2900    CMP	R1, #0
;__Lib_MathDouble.c, 1803 :: 		
0x0474	0xD008    BEQ	__Float_Aux_Lab_7
;__Lib_MathDouble.c, 1804 :: 		
0x0476	0x2520    MOVS	R5, #32
;__Lib_MathDouble.c, 1805 :: 		
0x0478	0x1B2E    SUBS	R6, R5, R4
;__Lib_MathDouble.c, 1806 :: 		
0x047A	0x460D    MOV	R5, R1
;__Lib_MathDouble.c, 1807 :: 		
0x047C	0x40F5    LSRS	R5, R6
;__Lib_MathDouble.c, 1808 :: 		
0x047E	0x40A1    LSLS	R1, R4
;__Lib_MathDouble.c, 1809 :: 		
0x0480	0xD000    BEQ	__Float_Aux_Lab_9
;__Lib_MathDouble.c, 1810 :: 		
0x0482	0x2101    MOVS	R1, #1
;__Lib_MathDouble.c, 1812 :: 		
__Float_Aux_Lab_9:
;__Lib_MathDouble.c, 1813 :: 		
0x0484	0x430D    ORRS	R5, R1
;__Lib_MathDouble.c, 1814 :: 		
0x0486	0x4328    ORRS	R0, R5
;__Lib_MathDouble.c, 1816 :: 		
__Float_Aux_Lab_7:
;__Lib_MathDouble.c, 1817 :: 		
0x0488	0x1B1B    SUBS	R3, R3, R4
;__Lib_MathDouble.c, 1818 :: 		
0x048A	0x0601    LSLS	R1, R0, #24
;__Lib_MathDouble.c, 1819 :: 		
0x048C	0x1DDB    ADDS	R3, R3, #7
;__Lib_MathDouble.c, 1820 :: 		
0x048E	0x0A00    LSRS	R0, R0, #8
;__Lib_MathDouble.c, 1821 :: 		
0x0490	0x2B00    CMP	R3, #0
;__Lib_MathDouble.c, 1822 :: 		
0x0492	0xDA02    BGE	__Float_Aux_Lab_8
;__Lib_MathDouble.c, 1823 :: 		
0x0494	0x2000    MOVS	R0, #0
;__Lib_MathDouble.c, 1825 :: 		
__Float_Aux_Lab_2:
;__Lib_MathDouble.c, 1826 :: 		
0x0496	0xBC70    POP	(R4, R5, R6)
;__Lib_MathDouble.c, 1828 :: 		
0x0498	0xE00C    B	__Float_Aux_Lab_end
;__Lib_MathDouble.c, 1830 :: 		
__Float_Aux_Lab_8:
;__Lib_MathDouble.c, 1831 :: 		
0x049A	0x05DB    LSLS	R3, R3, #23
;__Lib_MathDouble.c, 1832 :: 		
0x049C	0x1818    ADDS	R0, R3, R0
;__Lib_MathDouble.c, 1833 :: 		
0x049E	0x1880    ADDS	R0, R0, R2
;__Lib_MathDouble.c, 1834 :: 		
0x04A0	0x2900    CMP	R1, #0
;__Lib_MathDouble.c, 1835 :: 		
0x04A2	0xDAF8    BGE	__Float_Aux_Lab_2
;__Lib_MathDouble.c, 1836 :: 		
0x04A4	0x1C40    ADDS	R0, R0, #1
;__Lib_MathDouble.c, 1837 :: 		
0x04A6	0x0049    LSLS	R1, R1, #1
;__Lib_MathDouble.c, 1838 :: 		
0x04A8	0xD1F5    BNE	__Float_Aux_Lab_2
;__Lib_MathDouble.c, 1839 :: 		
0x04AA	0xBC70    POP	(R4, R5, R6)
;__Lib_MathDouble.c, 1840 :: 		
0x04AC	0x0840    LSRS	R0, R0, #1
;__Lib_MathDouble.c, 1841 :: 		
0x04AE	0x0040    LSLS	R0, R0, #1
;__Lib_MathDouble.c, 1842 :: 		
0x04B0	0xE000    B	__Float_Aux_Lab_end
;__Lib_MathDouble.c, 1843 :: 		
0x04B2	0x0000    MOVS	R0, R0
;__Lib_MathDouble.c, 1845 :: 		
__Float_Aux_Lab_end:
;__Lib_MathDouble.c, 1847 :: 		
L_end___Float_Aux:
0x04B4	0xB001    ADD	SP, SP, #4
0x04B6	0x4770    BX	LR
; end of __Lib_MathDouble___Float_Aux
__Sub_FP:
;__Lib_MathDouble.c, 481 :: 		
0x1A30	0xB500    PUSH	(R14)
;__Lib_MathDouble.c, 483 :: 		
0x1A32	0x2101    MOVS	R1, #1
;__Lib_MathDouble.c, 484 :: 		
0x1A34	0x07C9    LSLS	R1, R1, #31
;__Lib_MathDouble.c, 485 :: 		
0x1A36	0x404A    EORS	R2, R1
;__Lib_MathDouble.c, 486 :: 		
0x1A38	0xF7FEFD8C  BL	__Add_FP+0
;__Lib_MathDouble.c, 488 :: 		
L_end__Sub_FP:
0x1A3C	0xBD00    POP	(R15)
; end of __Sub_FP
__Add_FP:
;__Lib_MathDouble.c, 369 :: 		
0x0554	0xB500    PUSH	(R14)
;__Lib_MathDouble.c, 371 :: 		
0x0556	0xB4F8    PUSH	(R3, R4, R5, R6, R7)
;__Lib_MathDouble.c, 373 :: 		
0x0558	0x4611    MOV	R1, R2
;__Lib_MathDouble.c, 375 :: 		
0x055A	0x4602    MOV	R2, R0
;__Lib_MathDouble.c, 376 :: 		
0x055C	0x404A    EORS	R2, R1
;__Lib_MathDouble.c, 377 :: 		
0x055E	0x0FD4    LSRS	R4, R2, #31
;__Lib_MathDouble.c, 378 :: 		
0x0560	0x0042    LSLS	R2, R0, #1
;__Lib_MathDouble.c, 379 :: 		
0x0562	0x004B    LSLS	R3, R1, #1
;__Lib_MathDouble.c, 380 :: 		
0x0564	0x0852    LSRS	R2, R2, #1
;__Lib_MathDouble.c, 381 :: 		
0x0566	0x085B    LSRS	R3, R3, #1
;__Lib_MathDouble.c, 382 :: 		
0x0568	0x429A    CMP	R2, R3
;__Lib_MathDouble.c, 383 :: 		
0x056A	0xD202    BCS	_Add_FP_Lab_1
;__Lib_MathDouble.c, 384 :: 		
0x056C	0x4602    MOV	R2, R0
;__Lib_MathDouble.c, 385 :: 		
0x056E	0x4608    MOV	R0, R1
;__Lib_MathDouble.c, 386 :: 		
0x0570	0x4611    MOV	R1, R2
;__Lib_MathDouble.c, 388 :: 		
_Add_FP_Lab_1:
;__Lib_MathDouble.c, 389 :: 		
0x0572	0x004A    LSLS	R2, R1, #1
;__Lib_MathDouble.c, 391 :: 		
0x0574	0xD041    BEQ	_Add_FP_Lab_end
;__Lib_MathDouble.c, 392 :: 		
0x0576	0x0DC3    LSRS	R3, R0, #23
;__Lib_MathDouble.c, 393 :: 		
0x0578	0x004A    LSLS	R2, R1, #1
;__Lib_MathDouble.c, 394 :: 		
0x057A	0xB2DD    UXTB	R5, R3
;__Lib_MathDouble.c, 395 :: 		
0x057C	0x0E12    LSRS	R2, R2, #24
;__Lib_MathDouble.c, 396 :: 		
0x057E	0x1AAD    SUBS	R5, R5, R2
;__Lib_MathDouble.c, 397 :: 		
0x0580	0x2D20    CMP	R5, #32
;__Lib_MathDouble.c, 398 :: 		
0x0582	0xDA35    BGE	_Add_FP_Lab_2
;__Lib_MathDouble.c, 399 :: 		
0x0584	0x0249    LSLS	R1, R1, #9
;__Lib_MathDouble.c, 400 :: 		
0x0586	0x2601    MOVS	R6, #1
;__Lib_MathDouble.c, 401 :: 		
0x0588	0x0A49    LSRS	R1, R1, #9
;__Lib_MathDouble.c, 402 :: 		
0x058A	0x05F6    LSLS	R6, R6, #23
;__Lib_MathDouble.c, 403 :: 		
0x058C	0x198A    ADDS	R2, R1, R6
;__Lib_MathDouble.c, 404 :: 		
0x058E	0x2C00    CMP	R4, #0
;__Lib_MathDouble.c, 405 :: 		
0x0590	0xD000    BEQ	_Add_FP_Lab_3
;__Lib_MathDouble.c, 406 :: 		
0x0592	0x4252    RSBS	R2, R2, #0
;__Lib_MathDouble.c, 408 :: 		
_Add_FP_Lab_3:
;__Lib_MathDouble.c, 409 :: 		
0x0594	0x2120    MOVS	R1, #32
;__Lib_MathDouble.c, 410 :: 		
0x0596	0x1B4F    SUBS	R7, R1, R5
;__Lib_MathDouble.c, 411 :: 		
0x0598	0x4611    MOV	R1, R2
;__Lib_MathDouble.c, 412 :: 		
0x059A	0x40B9    LSLS	R1, R7
;__Lib_MathDouble.c, 413 :: 		
0x059C	0x412A    ASRS	R2, R5
;__Lib_MathDouble.c, 414 :: 		
0x059E	0x1810    ADDS	R0, R2, R0
;__Lib_MathDouble.c, 415 :: 		
0x05A0	0x0DC2    LSRS	R2, R0, #23
;__Lib_MathDouble.c, 416 :: 		
0x05A2	0x429A    CMP	R2, R3
;__Lib_MathDouble.c, 417 :: 		
0x05A4	0xD021    BEQ	_Add_FP_Lab_4
;__Lib_MathDouble.c, 418 :: 		
0x05A6	0x2C00    CMP	R4, #0
;__Lib_MathDouble.c, 419 :: 		
0x05A8	0xD017    BEQ	_Add_FP_Lab_5
;__Lib_MathDouble.c, 420 :: 		
0x05AA	0x2D01    CMP	R5, #1
;__Lib_MathDouble.c, 421 :: 		
0x05AC	0xDC08    BGT	_Add_FP_Lab_6
;__Lib_MathDouble.c, 422 :: 		
0x05AE	0x05DA    LSLS	R2, R3, #23
;__Lib_MathDouble.c, 423 :: 		
0x05B0	0x1A80    SUBS	R0, R0, R2
;__Lib_MathDouble.c, 424 :: 		
0x05B2	0x0FD2    LSRS	R2, R2, #31
;__Lib_MathDouble.c, 425 :: 		
0x05B4	0x1980    ADDS	R0, R0, R6
;__Lib_MathDouble.c, 426 :: 		
0x05B6	0x07D2    LSLS	R2, R2, #31
;__Lib_MathDouble.c, 427 :: 		
0x05B8	0xB2DB    UXTB	R3, R3
;__Lib_MathDouble.c, 428 :: 		
0x05BA	0xF7FFFF3F  BL	__Lib_MathDouble___Float_Aux+0
;__Lib_MathDouble.c, 430 :: 		
0x05BE	0xE01C    B	_Add_FP_Lab_end
;__Lib_MathDouble.c, 433 :: 		
_Add_FP_Lab_6:
;__Lib_MathDouble.c, 434 :: 		
0x05C0	0x05DA    LSLS	R2, R3, #23
;__Lib_MathDouble.c, 435 :: 		
0x05C2	0x1A80    SUBS	R0, R0, R2
;__Lib_MathDouble.c, 436 :: 		
0x05C4	0x2301    MOVS	R3, #1
;__Lib_MathDouble.c, 437 :: 		
0x05C6	0x0040    LSLS	R0, R0, #1
;__Lib_MathDouble.c, 438 :: 		
0x05C8	0x061B    LSLS	R3, R3, #24
;__Lib_MathDouble.c, 439 :: 		
0x05CA	0x18C0    ADDS	R0, R0, R3
;__Lib_MathDouble.c, 440 :: 		
0x05CC	0x1880    ADDS	R0, R0, R2
;__Lib_MathDouble.c, 441 :: 		
0x05CE	0x425A    RSBS	R2, R3, #0
;__Lib_MathDouble.c, 442 :: 		
0x05D0	0x1880    ADDS	R0, R0, R2
;__Lib_MathDouble.c, 443 :: 		
0x05D2	0x0FCA    LSRS	R2, R1, #31
;__Lib_MathDouble.c, 444 :: 		
0x05D4	0x4310    ORRS	R0, R2
;__Lib_MathDouble.c, 445 :: 		
0x05D6	0x0049    LSLS	R1, R1, #1
;__Lib_MathDouble.c, 446 :: 		
0x05D8	0xE007    B	_Add_FP_Lab_4
;__Lib_MathDouble.c, 448 :: 		
_Add_FP_Lab_5:
;__Lib_MathDouble.c, 449 :: 		
0x05DA	0x0849    LSRS	R1, R1, #1
;__Lib_MathDouble.c, 450 :: 		
0x05DC	0x07C2    LSLS	R2, R0, #31
;__Lib_MathDouble.c, 451 :: 		
0x05DE	0x4311    ORRS	R1, R2
;__Lib_MathDouble.c, 452 :: 		
0x05E0	0x05DA    LSLS	R2, R3, #23
;__Lib_MathDouble.c, 453 :: 		
0x05E2	0x1A80    SUBS	R0, R0, R2
;__Lib_MathDouble.c, 454 :: 		
0x05E4	0x1980    ADDS	R0, R0, R6
;__Lib_MathDouble.c, 455 :: 		
0x05E6	0x0840    LSRS	R0, R0, #1
;__Lib_MathDouble.c, 456 :: 		
0x05E8	0x1880    ADDS	R0, R0, R2
;__Lib_MathDouble.c, 458 :: 		
_Add_FP_Lab_4:
;__Lib_MathDouble.c, 459 :: 		
0x05EA	0xF7FFFE27  BL	__Lib_MathDouble___Fp+0
;__Lib_MathDouble.c, 461 :: 		
0x05EE	0xE004    B	_Add_FP_Lab_end
;__Lib_MathDouble.c, 464 :: 		
_Add_FP_Lab_2:
;__Lib_MathDouble.c, 465 :: 		
0x05F0	0x0061    LSLS	R1, R4, #1
;__Lib_MathDouble.c, 466 :: 		
0x05F2	0x2201    MOVS	R2, #1
;__Lib_MathDouble.c, 467 :: 		
0x05F4	0x1A51    SUBS	R1, R2, R1
;__Lib_MathDouble.c, 468 :: 		
0x05F6	0x1B00    SUBS	R0, R0, R4
;__Lib_MathDouble.c, 469 :: 		
0x05F8	0xE7F7    B	_Add_FP_Lab_4
;__Lib_MathDouble.c, 471 :: 		
_Add_FP_Lab_end:
;__Lib_MathDouble.c, 472 :: 		
0x05FA	0xBCF8    POP	(R3, R4, R5, R6, R7)
;__Lib_MathDouble.c, 474 :: 		
L_end__Add_FP:
0x05FC	0xBD00    POP	(R15)
; end of __Add_FP
__Lib_MathDouble___Fp:
;__Lib_MathDouble.c, 2028 :: 		
0x023C	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 2030 :: 		
0x023E	0x2900    CMP	R1, #0
;__Lib_MathDouble.c, 2031 :: 		
0x0240	0xDA04    BGE	__Fp_Lab_end
;__Lib_MathDouble.c, 2032 :: 		
0x0242	0x1C40    ADDS	R0, R0, #1
;__Lib_MathDouble.c, 2033 :: 		
0x0244	0x0049    LSLS	R1, R1, #1
;__Lib_MathDouble.c, 2034 :: 		
0x0246	0xD101    BNE	__Fp_Lab_end
;__Lib_MathDouble.c, 2035 :: 		
0x0248	0x0840    LSRS	R0, R0, #1
;__Lib_MathDouble.c, 2036 :: 		
0x024A	0x0040    LSLS	R0, R0, #1
;__Lib_MathDouble.c, 2038 :: 		
__Fp_Lab_end:
;__Lib_MathDouble.c, 2040 :: 		
L_end___Fp:
0x024C	0xB001    ADD	SP, SP, #4
0x024E	0x4770    BX	LR
; end of __Lib_MathDouble___Fp
__Div_FP:
;__Lib_MathDouble.c, 582 :: 		
0x1950	0xB500    PUSH	(R14)
;__Lib_MathDouble.c, 584 :: 		
0x1952	0xB470    PUSH	(R4, R5, R6)
;__Lib_MathDouble.c, 588 :: 		
0x1954	0x0014    MOVS	R4, R2
;__Lib_MathDouble.c, 589 :: 		
0x1956	0xD105    BNE	_Div_FP_Lab_10
;__Lib_MathDouble.c, 591 :: 		
0x1958	0x0000    MOVS	R0, R0
;__Lib_MathDouble.c, 592 :: 		
0x195A	0xD501    BPL	_Div_FP_Lab_11
;__Lib_MathDouble.c, 594 :: 		
0x195C	0x4822    LDR	R0, [PC, #136]
;__Lib_MathDouble.c, 595 :: 		
0x195E	0xE040    B	_Div_FP_end
;__Lib_MathDouble.c, 597 :: 		
_Div_FP_Lab_11:
;__Lib_MathDouble.c, 598 :: 		
0x1960	0x4822    LDR	R0, [PC, #136]
;__Lib_MathDouble.c, 599 :: 		
0x1962	0xE03E    B	_Div_FP_end
;__Lib_MathDouble.c, 602 :: 		
_Div_FP_Lab_10:
;__Lib_MathDouble.c, 604 :: 		
0x1964	0x4611    MOV	R1, R2
;__Lib_MathDouble.c, 605 :: 		
0x1966	0x4602    MOV	R2, R0
;__Lib_MathDouble.c, 606 :: 		
0x1968	0x404A    EORS	R2, R1
;__Lib_MathDouble.c, 607 :: 		
0x196A	0x0FD5    LSRS	R5, R2, #31
;__Lib_MathDouble.c, 608 :: 		
0x196C	0x0040    LSLS	R0, R0, #1
;__Lib_MathDouble.c, 609 :: 		
0x196E	0x004A    LSLS	R2, R1, #1
;__Lib_MathDouble.c, 610 :: 		
0x1970	0x07ED    LSLS	R5, R5, #31
;__Lib_MathDouble.c, 611 :: 		
0x1972	0x0840    LSRS	R0, R0, #1
;__Lib_MathDouble.c, 612 :: 		
0x1974	0x0852    LSRS	R2, R2, #1
;__Lib_MathDouble.c, 613 :: 		
0x1976	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 614 :: 		
0x1978	0xD016    BEQ	_Div_FP_Lab_1
;__Lib_MathDouble.c, 615 :: 		
0x197A	0x2A00    CMP	R2, #0
;__Lib_MathDouble.c, 616 :: 		
0x197C	0xD014    BEQ	_Div_FP_Lab_1
;__Lib_MathDouble.c, 617 :: 		
0x197E	0x0041    LSLS	R1, R0, #1
;__Lib_MathDouble.c, 618 :: 		
0x1980	0x0E0C    LSRS	R4, R1, #24
;__Lib_MathDouble.c, 619 :: 		
0x1982	0x0051    LSLS	R1, R2, #1
;__Lib_MathDouble.c, 620 :: 		
0x1984	0x0E0B    LSRS	R3, R1, #24
;__Lib_MathDouble.c, 621 :: 		
0x1986	0x0241    LSLS	R1, R0, #9
;__Lib_MathDouble.c, 622 :: 		
0x1988	0x2001    MOVS	R0, #1
;__Lib_MathDouble.c, 623 :: 		
0x198A	0x05C0    LSLS	R0, R0, #23
;__Lib_MathDouble.c, 624 :: 		
0x198C	0x0252    LSLS	R2, R2, #9
;__Lib_MathDouble.c, 625 :: 		
0x198E	0x0A49    LSRS	R1, R1, #9
;__Lib_MathDouble.c, 626 :: 		
0x1990	0x0A52    LSRS	R2, R2, #9
;__Lib_MathDouble.c, 627 :: 		
0x1992	0x1AE4    SUBS	R4, R4, R3
;__Lib_MathDouble.c, 628 :: 		
0x1994	0x1809    ADDS	R1, R1, R0
;__Lib_MathDouble.c, 629 :: 		
0x1996	0x1812    ADDS	R2, R2, R0
;__Lib_MathDouble.c, 630 :: 		
0x1998	0x347D    ADDS	R4, #125
;__Lib_MathDouble.c, 631 :: 		
0x199A	0x4291    CMP	R1, R2
;__Lib_MathDouble.c, 632 :: 		
0x199C	0xD301    BCC	_Div_FP_Lab_2
;__Lib_MathDouble.c, 633 :: 		
0x199E	0x1C64    ADDS	R4, R4, #1
;__Lib_MathDouble.c, 634 :: 		
0x19A0	0xE000    B	_Div_FP_Lab_3
;__Lib_MathDouble.c, 636 :: 		
_Div_FP_Lab_2:
;__Lib_MathDouble.c, 637 :: 		
0x19A2	0x0049    LSLS	R1, R1, #1
;__Lib_MathDouble.c, 639 :: 		
_Div_FP_Lab_3:
;__Lib_MathDouble.c, 640 :: 		
0x19A4	0x2C00    CMP	R4, #0
;__Lib_MathDouble.c, 641 :: 		
0x19A6	0xDA01    BGE	_Div_FP_Lab_4
;__Lib_MathDouble.c, 643 :: 		
_Div_FP_Lab_1:
;__Lib_MathDouble.c, 644 :: 		
0x19A8	0x2000    MOVS	R0, #0
;__Lib_MathDouble.c, 646 :: 		
0x19AA	0xE01A    B	_Div_FP_end
;__Lib_MathDouble.c, 649 :: 		
_Div_FP_Lab_4:
;__Lib_MathDouble.c, 650 :: 		
0x19AC	0x2300    MOVS	R3, #0
;__Lib_MathDouble.c, 652 :: 		
_Div_FP_Lab_6:
;__Lib_MathDouble.c, 653 :: 		
0x19AE	0x4291    CMP	R1, R2
;__Lib_MathDouble.c, 654 :: 		
0x19B0	0xD301    BCC	_Div_FP_Lab_5
;__Lib_MathDouble.c, 655 :: 		
0x19B2	0x1A89    SUBS	R1, R1, R2
;__Lib_MathDouble.c, 656 :: 		
0x19B4	0x4303    ORRS	R3, R0
;__Lib_MathDouble.c, 658 :: 		
_Div_FP_Lab_5:
;__Lib_MathDouble.c, 659 :: 		
0x19B6	0x0840    LSRS	R0, R0, #1
;__Lib_MathDouble.c, 660 :: 		
0x19B8	0x0049    LSLS	R1, R1, #1
;__Lib_MathDouble.c, 661 :: 		
0x19BA	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 662 :: 		
0x19BC	0xD1F7    BNE	_Div_FP_Lab_6
;__Lib_MathDouble.c, 663 :: 		
0x19BE	0x2900    CMP	R1, #0
;__Lib_MathDouble.c, 664 :: 		
0x19C0	0xD00A    BEQ	_Div_FP_Lab_7
;__Lib_MathDouble.c, 665 :: 		
0x19C2	0x4291    CMP	R1, R2
;__Lib_MathDouble.c, 666 :: 		
0x19C4	0xD102    BNE	_Div_FP_Lab_8
;__Lib_MathDouble.c, 667 :: 		
0x19C6	0x2101    MOVS	R1, #1
;__Lib_MathDouble.c, 668 :: 		
0x19C8	0x07C9    LSLS	R1, R1, #31
;__Lib_MathDouble.c, 669 :: 		
0x19CA	0xE005    B	_Div_FP_Lab_7
;__Lib_MathDouble.c, 671 :: 		
_Div_FP_Lab_8:
;__Lib_MathDouble.c, 672 :: 		
0x19CC	0x4291    CMP	R1, R2
;__Lib_MathDouble.c, 673 :: 		
0x19CE	0xD201    BCS	_Div_FP_Lab_9
;__Lib_MathDouble.c, 674 :: 		
0x19D0	0x2101    MOVS	R1, #1
;__Lib_MathDouble.c, 675 :: 		
0x19D2	0xE001    B	_Div_FP_Lab_7
;__Lib_MathDouble.c, 677 :: 		
_Div_FP_Lab_9:
;__Lib_MathDouble.c, 678 :: 		
0x19D4	0x2101    MOVS	R1, #1
;__Lib_MathDouble.c, 679 :: 		
0x19D6	0x43C9    MVNS	R1, R1
;__Lib_MathDouble.c, 681 :: 		
_Div_FP_Lab_7:
;__Lib_MathDouble.c, 682 :: 		
0x19D8	0x05E0    LSLS	R0, R4, #23
;__Lib_MathDouble.c, 683 :: 		
0x19DA	0x18C0    ADDS	R0, R0, R3
;__Lib_MathDouble.c, 684 :: 		
0x19DC	0x1940    ADDS	R0, R0, R5
;__Lib_MathDouble.c, 685 :: 		
0x19DE	0xF7FEFC2D  BL	__Lib_MathDouble___Fp+0
;__Lib_MathDouble.c, 687 :: 		
_Div_FP_end:
;__Lib_MathDouble.c, 688 :: 		
0x19E2	0xBC70    POP	(R4, R5, R6)
;__Lib_MathDouble.c, 689 :: 		
0x19E4	0xE004    B	#8
0x19E6	0xBF00    NOP
0x19E8	0x0000FF80  	#-8388608
0x19EC	0x00007F80  	#2139095040
;__Lib_MathDouble.c, 690 :: 		
L_end__Div_FP:
0x19F0	0xBD00    POP	(R15)
; end of __Div_FP
__Mul_FP:
;__Lib_MathDouble.c, 494 :: 		
0x18B8	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 496 :: 		
0x18BA	0x4611    MOV	R1, R2
;__Lib_MathDouble.c, 498 :: 		
0x18BC	0x4602    MOV	R2, R0
;__Lib_MathDouble.c, 499 :: 		
0x18BE	0xB470    PUSH	(R4, R5, R6)
;__Lib_MathDouble.c, 500 :: 		
0x18C0	0x404A    EORS	R2, R1
;__Lib_MathDouble.c, 501 :: 		
0x18C2	0x0FD3    LSRS	R3, R2, #31
;__Lib_MathDouble.c, 502 :: 		
0x18C4	0x07DB    LSLS	R3, R3, #31
;__Lib_MathDouble.c, 503 :: 		
0x18C6	0x0040    LSLS	R0, R0, #1
;__Lib_MathDouble.c, 504 :: 		
0x18C8	0xD034    BEQ	_Mul_FP_Lab_end
;__Lib_MathDouble.c, 505 :: 		
0x18CA	0x004A    LSLS	R2, R1, #1
;__Lib_MathDouble.c, 506 :: 		
0x18CC	0xD02A    BEQ	_Mul_FP_Lab_1
;__Lib_MathDouble.c, 507 :: 		
0x18CE	0x0E01    LSRS	R1, R0, #24
;__Lib_MathDouble.c, 508 :: 		
0x18D0	0x0E14    LSRS	R4, R2, #24
;__Lib_MathDouble.c, 509 :: 		
0x18D2	0x1909    ADDS	R1, R1, R4
;__Lib_MathDouble.c, 510 :: 		
0x18D4	0x0200    LSLS	R0, R0, #8
;__Lib_MathDouble.c, 511 :: 		
0x18D6	0x0212    LSLS	R2, R2, #8
;__Lib_MathDouble.c, 512 :: 		
0x18D8	0x0A40    LSRS	R0, R0, #9
;__Lib_MathDouble.c, 513 :: 		
0x18DA	0x0A52    LSRS	R2, R2, #9
;__Lib_MathDouble.c, 514 :: 		
0x18DC	0x1884    ADDS	R4, R0, R2
;__Lib_MathDouble.c, 515 :: 		
0x18DE	0x01E5    LSLS	R5, R4, #7
;__Lib_MathDouble.c, 516 :: 		
0x18E0	0x4604    MOV	R4, R0
;__Lib_MathDouble.c, 517 :: 		
0x18E2	0x4354    MULS	R4, R2, R4
;__Lib_MathDouble.c, 518 :: 		
0x18E4	0x0A00    LSRS	R0, R0, #8
;__Lib_MathDouble.c, 519 :: 		
0x18E6	0x0A12    LSRS	R2, R2, #8
;__Lib_MathDouble.c, 520 :: 		
0x18E8	0x042E    LSLS	R6, R5, #16
;__Lib_MathDouble.c, 521 :: 		
0x18EA	0x4350    MULS	R0, R2, R0
;__Lib_MathDouble.c, 522 :: 		
0x18EC	0x19A4    ADDS	R4, R4, R6
;__Lib_MathDouble.c, 523 :: 		
0x18EE	0x1942    ADDS	R2, R0, R5
;__Lib_MathDouble.c, 524 :: 		
0x18F0	0x0C20    LSRS	R0, R4, #16
;__Lib_MathDouble.c, 525 :: 		
0x18F2	0x43C5    MVNS	R5, R0
;__Lib_MathDouble.c, 526 :: 		
0x18F4	0x18AA    ADDS	R2, R5, R2
;__Lib_MathDouble.c, 527 :: 		
0x18F6	0x0C12    LSRS	R2, R2, #16
;__Lib_MathDouble.c, 528 :: 		
0x18F8	0x2501    MOVS	R5, #1
;__Lib_MathDouble.c, 529 :: 		
0x18FA	0x397F    SUBS	R1, #127
;__Lib_MathDouble.c, 530 :: 		
0x18FC	0x1C52    ADDS	R2, R2, #1
;__Lib_MathDouble.c, 531 :: 		
0x18FE	0x03AD    LSLS	R5, R5, #14
;__Lib_MathDouble.c, 532 :: 		
0x1900	0x1952    ADDS	R2, R2, R5
;__Lib_MathDouble.c, 533 :: 		
0x1902	0x0412    LSLS	R2, R2, #16
;__Lib_MathDouble.c, 534 :: 		
0x1904	0x0424    LSLS	R4, R4, #16
;__Lib_MathDouble.c, 535 :: 		
0x1906	0xD000    BEQ	_Mul_FP_Lab_2
;__Lib_MathDouble.c, 536 :: 		
0x1908	0x1C52    ADDS	R2, R2, #1
;__Lib_MathDouble.c, 538 :: 		
_Mul_FP_Lab_2:
;__Lib_MathDouble.c, 539 :: 		
0x190A	0x4310    ORRS	R0, R2
;__Lib_MathDouble.c, 540 :: 		
0x190C	0xD401    BMI	_Mul_FP_Lab_3
;__Lib_MathDouble.c, 541 :: 		
0x190E	0x0040    LSLS	R0, R0, #1
;__Lib_MathDouble.c, 542 :: 		
0x1910	0x1E49    SUBS	R1, R1, #1
;__Lib_MathDouble.c, 544 :: 		
_Mul_FP_Lab_3:
;__Lib_MathDouble.c, 545 :: 		
0x1912	0xB2C2    UXTB	R2, R0
;__Lib_MathDouble.c, 546 :: 		
0x1914	0x060C    LSLS	R4, R1, #24
;__Lib_MathDouble.c, 547 :: 		
0x1916	0x09C0    LSRS	R0, R0, #7
;__Lib_MathDouble.c, 548 :: 		
0x1918	0x1820    ADDS	R0, R4, R0
;__Lib_MathDouble.c, 549 :: 		
0x191A	0x1C40    ADDS	R0, R0, #1
;__Lib_MathDouble.c, 550 :: 		
0x191C	0x0840    LSRS	R0, R0, #1
;__Lib_MathDouble.c, 551 :: 		
0x191E	0x2A80    CMP	R2, #128
;__Lib_MathDouble.c, 552 :: 		
0x1920	0xD002    BEQ	_Mul_FP_Lab_4
;__Lib_MathDouble.c, 553 :: 		
0x1922	0xE003    B	_Mul_FP_Lab_5
;__Lib_MathDouble.c, 555 :: 		
_Mul_FP_Lab_1:
;__Lib_MathDouble.c, 556 :: 		
0x1924	0x2000    MOVS	R0, #0
;__Lib_MathDouble.c, 558 :: 		
0x1926	0xE005    B	_Mul_FP_Lab_end
;__Lib_MathDouble.c, 561 :: 		
_Mul_FP_Lab_4:
;__Lib_MathDouble.c, 562 :: 		
0x1928	0x0840    LSRS	R0, R0, #1
;__Lib_MathDouble.c, 563 :: 		
0x192A	0x0040    LSLS	R0, R0, #1
;__Lib_MathDouble.c, 565 :: 		
_Mul_FP_Lab_5:
;__Lib_MathDouble.c, 566 :: 		
0x192C	0x2900    CMP	R1, #0
;__Lib_MathDouble.c, 567 :: 		
0x192E	0xDA00    BGE	_Mul_FP_Lab_6
;__Lib_MathDouble.c, 568 :: 		
0x1930	0x2000    MOVS	R0, #0
;__Lib_MathDouble.c, 570 :: 		
_Mul_FP_Lab_6:
;__Lib_MathDouble.c, 571 :: 		
0x1932	0x4318    ORRS	R0, R3
;__Lib_MathDouble.c, 573 :: 		
_Mul_FP_Lab_end:
;__Lib_MathDouble.c, 574 :: 		
0x1934	0xBC70    POP	(R4, R5, R6)
;__Lib_MathDouble.c, 576 :: 		
L_end__Mul_FP:
0x1936	0xB001    ADD	SP, SP, #4
0x1938	0x4770    BX	LR
; end of __Mul_FP
_calculatePPM:
;base_mq.c, 3 :: 		double calculatePPM(double adcValue,double R0,double cal_data)
; cal_data start address is: 8 (R2)
; R0 start address is: 4 (R1)
; adcValue start address is: 0 (R0)
0x1A40	0xB500    PUSH	(R14)
; cal_data end address is: 8 (R2)
; R0 end address is: 4 (R1)
; adcValue end address is: 0 (R0)
; adcValue start address is: 0 (R0)
; R0 start address is: 4 (R1)
; cal_data start address is: 8 (R2)
;base_mq.c, 5 :: 		return  (double) map((double)adcValue,(double)R0,(double)cal_data,0,MAX_GAS_LEVEL);
0x1A42	0x4B03    LDR	R3, [PC, #12]
0x1A44	0xB408    PUSH	(R3)
0x1A46	0x2300    MOVS	R3, #0
; cal_data end address is: 8 (R2)
; R0 end address is: 4 (R1)
; adcValue end address is: 0 (R0)
0x1A48	0xF7FEFDDA  BL	_map+0
0x1A4C	0xB001    ADD	SP, SP, #4
;base_mq.c, 6 :: 		}
L_end_calculatePPM:
0x1A4E	0xBD00    POP	(R15)
0x1A50	0x4000461C  	#1176256512
; end of _calculatePPM
_map:
;base_mq.c, 8 :: 		double map(double x, double in_min, double in_max, double out_min, double out_max)
; x start address is: 0 (R0)
0x0600	0xB500    PUSH	(R14)
0x0602	0xB086    SUB	SP, SP, #24
0x0604	0x9100    STR	R1, [SP, #0]
0x0606	0x9201    STR	R2, [SP, #4]
0x0608	0x9302    STR	R3, [SP, #8]
; x end address is: 0 (R0)
; x start address is: 0 (R0)
0x060A	0x9C07    LDR	R4, [SP, #28]
0x060C	0x9407    STR	R4, [SP, #28]
;base_mq.c, 10 :: 		return (double)(x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
0x060E	0x9A00    LDR	R2, [SP, #0]
0x0610	0xF001FA0E  BL	__Sub_FP+0
; x end address is: 0 (R0)
0x0614	0x4604    MOV	R4, R0
0x0616	0x9405    STR	R4, [SP, #20]
0x0618	0x9A02    LDR	R2, [SP, #8]
0x061A	0x9807    LDR	R0, [SP, #28]
0x061C	0xF001FA08  BL	__Sub_FP+0
0x0620	0x9A05    LDR	R2, [SP, #20]
0x0622	0xF001F949  BL	__Mul_FP+0
0x0626	0x9005    STR	R0, [SP, #20]
0x0628	0x9A00    LDR	R2, [SP, #0]
0x062A	0x9801    LDR	R0, [SP, #4]
0x062C	0xF001FA00  BL	__Sub_FP+0
0x0630	0x9003    STR	R0, [SP, #12]
0x0632	0x9A03    LDR	R2, [SP, #12]
0x0634	0x9805    LDR	R0, [SP, #20]
0x0636	0xF001F98B  BL	__Div_FP+0
0x063A	0x9A02    LDR	R2, [SP, #8]
0x063C	0xF7FFFF8A  BL	__Add_FP+0
;base_mq.c, 11 :: 		}
L_end_map:
0x0640	0xB006    ADD	SP, SP, #24
0x0642	0xBD00    POP	(R15)
; end of _map
_ReadVrefIntValue:
;adc_func.c, 162 :: 		void ReadVrefIntValue()
0x0D4C	0xB500    PUSH	(R14)
;adc_func.c, 164 :: 		float VrefIntValue = 0;
;adc_func.c, 165 :: 		ADC_CCR |= ADC_CCR_VREFEN;
0x0D4E	0x480E    LDR	R0, [PC, #56]
0x0D50	0x6801    LDR	R1, [R0, #0]
0x0D52	0x480E    LDR	R0, [PC, #56]
0x0D54	0x4301    ORRS	R1, R0
0x0D56	0x480C    LDR	R0, [PC, #48]
0x0D58	0x6001    STR	R1, [R0, #0]
;adc_func.c, 166 :: 		VrefIntValue = Read_ADC_chanell(VREF_INT_CHANELL,32);
0x0D5A	0x2120    MOVS	R1, #32
0x0D5C	0x2011    MOVS	R0, #17
0x0D5E	0xF000FE49  BL	_Read_ADC_chanell+0
0x0D62	0xF000FDEB  BL	__UnsignedIntegralToFloat+0
; VrefIntValue start address is: 28 (R7)
0x0D66	0x4607    MOV	R7, R0
;adc_func.c, 167 :: 		VrefIntVoltage = (3.3*(*VREF_INT_CAL_ADDR))/(float)VrefIntValue*0.25;
0x0D68	0x4809    LDR	R0, [PC, #36]
0x0D6A	0x8800    LDRH	R0, [R0, #0]
0x0D6C	0xF000FDE6  BL	__UnsignedIntegralToFloat+0
0x0D70	0x4A08    LDR	R2, [PC, #32]
0x0D72	0xF000FDA1  BL	__Mul_FP+0
0x0D76	0x463A    MOV	R2, R7
0x0D78	0xF000FDEA  BL	__Div_FP+0
; VrefIntValue end address is: 28 (R7)
0x0D7C	0x4A06    LDR	R2, [PC, #24]
0x0D7E	0xF000FD9B  BL	__Mul_FP+0
0x0D82	0x4906    LDR	R1, [PC, #24]
0x0D84	0x6008    STR	R0, [R1, #0]
;adc_func.c, 168 :: 		}
L_end_ReadVrefIntValue:
0x0D86	0xBD00    POP	(R15)
0x0D88	0x27084001  	1073817352
0x0D8C	0x00000040  	#4194304
0x0D90	0xF7BA1FFF  	536868794
0x0D94	0x33334053  	#1079194419
0x0D98	0x00003E80  	#1048576000
0x0D9C	0x00302000  	536870960
; end of _ReadVrefIntValue
_ComputeTemperature:
;adc_func.c, 176 :: 		void ComputeTemperature()
0x0C54	0xB500    PUSH	(R14)
0x0C56	0xB083    SUB	SP, SP, #12
;adc_func.c, 178 :: 		float measure = 0;
;adc_func.c, 179 :: 		ADC_CCR |= ADC_CCR_TSEN;
0x0C58	0x4821    LDR	R0, [PC, #132]
0x0C5A	0x6801    LDR	R1, [R0, #0]
0x0C5C	0x4821    LDR	R0, [PC, #132]
0x0C5E	0x4301    ORRS	R1, R0
0x0C60	0x481F    LDR	R0, [PC, #124]
0x0C62	0x6001    STR	R1, [R0, #0]
;adc_func.c, 180 :: 		measure = Read_ADC_chanell(TEMP_SENS_CHANELL,64);
0x0C64	0x2140    MOVS	R1, #64
0x0C66	0x2010    MOVS	R0, #16
0x0C68	0xF000FEC4  BL	_Read_ADC_chanell+0
0x0C6C	0xF000FE66  BL	__UnsignedIntegralToFloat+0
;adc_func.c, 181 :: 		temperature = ((measure * VDD_APPLI / VDD_CALIB) - (int32_t) *TEMP30_CAL_ADDR ) ;
0x0C70	0x4A1D    LDR	R2, [PC, #116]
0x0C72	0xF000FE21  BL	__Mul_FP+0
0x0C76	0x4A1D    LDR	R2, [PC, #116]
0x0C78	0xF000FE6A  BL	__Div_FP+0
0x0C7C	0x9002    STR	R0, [SP, #8]
0x0C7E	0x481C    LDR	R0, [PC, #112]
0x0C80	0x8800    LDRH	R0, [R0, #0]
0x0C82	0xF7FFFCDF  BL	__SignedIntegralToFloat+0
0x0C86	0x9001    STR	R0, [SP, #4]
0x0C88	0x9802    LDR	R0, [SP, #8]
0x0C8A	0x9100    STR	R1, [SP, #0]
0x0C8C	0x9901    LDR	R1, [SP, #4]
0x0C8E	0x460A    MOV	R2, R1
0x0C90	0xF000FECE  BL	__Sub_FP+0
0x0C94	0x9900    LDR	R1, [SP, #0]
0x0C96	0x4917    LDR	R1, [PC, #92]
0x0C98	0x6008    STR	R0, [R1, #0]
;adc_func.c, 182 :: 		temperature = temperature * (int32_t)(110 - 30);
0x0C9A	0x4816    LDR	R0, [PC, #88]
0x0C9C	0x6802    LDR	R2, [R0, #0]
0x0C9E	0x4816    LDR	R0, [PC, #88]
0x0CA0	0xF000FE0A  BL	__Mul_FP+0
0x0CA4	0x4913    LDR	R1, [PC, #76]
0x0CA6	0x6008    STR	R0, [R1, #0]
;adc_func.c, 183 :: 		temperature = temperature / (int32_t)(*TEMP110_CAL_ADDR - *TEMP30_CAL_ADDR);
0x0CA8	0x4811    LDR	R0, [PC, #68]
0x0CAA	0x8801    LDRH	R1, [R0, #0]
0x0CAC	0x4813    LDR	R0, [PC, #76]
0x0CAE	0x8800    LDRH	R0, [R0, #0]
0x0CB0	0x1A40    SUBS	R0, R0, R1
0x0CB2	0xB280    UXTH	R0, R0
0x0CB4	0xF7FFFCC6  BL	__SignedIntegralToFloat+0
0x0CB8	0x9001    STR	R0, [SP, #4]
0x0CBA	0x480E    LDR	R0, [PC, #56]
0x0CBC	0x6800    LDR	R0, [R0, #0]
0x0CBE	0x9100    STR	R1, [SP, #0]
0x0CC0	0x9901    LDR	R1, [SP, #4]
0x0CC2	0x460A    MOV	R2, R1
0x0CC4	0xF000FE44  BL	__Div_FP+0
0x0CC8	0x9900    LDR	R1, [SP, #0]
0x0CCA	0x490A    LDR	R1, [PC, #40]
0x0CCC	0x6008    STR	R0, [R1, #0]
;adc_func.c, 184 :: 		temperature = temperature + 30;
0x0CCE	0x4809    LDR	R0, [PC, #36]
0x0CD0	0x6802    LDR	R2, [R0, #0]
0x0CD2	0x480B    LDR	R0, [PC, #44]
0x0CD4	0xF7FFFC3E  BL	__Add_FP+0
0x0CD8	0x4906    LDR	R1, [PC, #24]
0x0CDA	0x6008    STR	R0, [R1, #0]
;adc_func.c, 185 :: 		}
L_end_ComputeTemperature:
0x0CDC	0xB003    ADD	SP, SP, #12
0x0CDE	0xBD00    POP	(R15)
0x0CE0	0x27084001  	1073817352
0x0CE4	0x00000080  	#8388608
0x0CE8	0x00004396  	#1133903872
0x0CEC	0x000043A5  	#1134886912
0x0CF0	0xF7B81FFF  	536868792
0x0CF4	0x00342000  	536870964
0x0CF8	0x000042A0  	#1117782016
0x0CFC	0xF7C21FFF  	536868802
0x0D00	0x000041F0  	#1106247680
; end of _ComputeTemperature
__SignedIntegralToFloat:
;__Lib_MathDouble.c, 202 :: 		
0x0644	0xB500    PUSH	(R14)
;__Lib_MathDouble.c, 204 :: 		
0x0646	0x17C2    ASRS	R2, R0, #31
;__Lib_MathDouble.c, 205 :: 		
0x0648	0x0FC1    LSRS	R1, R0, #31
;__Lib_MathDouble.c, 206 :: 		
0x064A	0x4050    EORS	R0, R2
;__Lib_MathDouble.c, 207 :: 		
0x064C	0xB410    PUSH	(R4)
;__Lib_MathDouble.c, 208 :: 		
0x064E	0x1840    ADDS	R0, R0, R1
;__Lib_MathDouble.c, 209 :: 		
0x0650	0x07CA    LSLS	R2, R1, #31
;__Lib_MathDouble.c, 210 :: 		
0x0652	0x2396    MOVS	R3, #150
;__Lib_MathDouble.c, 211 :: 		
0x0654	0x2100    MOVS	R1, #0
;__Lib_MathDouble.c, 212 :: 		
0x0656	0xF7FFFEF1  BL	__Lib_MathDouble___Float_Aux+0
;__Lib_MathDouble.c, 213 :: 		
0x065A	0xBC10    POP	(R4)
;__Lib_MathDouble.c, 214 :: 		
0x065C	0x0000    MOVS	R0, R0
;__Lib_MathDouble.c, 216 :: 		
L_end__SignedIntegralToFloat:
0x065E	0xBD00    POP	(R15)
; end of __SignedIntegralToFloat
_ControlAnalogFlags:
;adc_func.c, 534 :: 		void ControlAnalogFlags()
0x1DE0	0xB500    PUSH	(R14)
;adc_func.c, 540 :: 		if(getAdcControlStatus())
0x1DE2	0xF7FFF893  BL	_getAdcControlStatus+0
0x1DE6	0x2800    CMP	R0, #0
0x1DE8	0xD100    BNE	#0
0x1DEA	0xE079    B	L_ControlAnalogFlags111
;adc_func.c, 544 :: 		&board_sensor_count,&board_sensor_count1);
0x1DEC	0x4D41    LDR	R5, [PC, #260]
0x1DEE	0x4C42    LDR	R4, [PC, #264]
;adc_func.c, 543 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.board_sensor_status,
0x1DF0	0x4B42    LDR	R3, [PC, #264]
0x1DF2	0x220A    MOVS	R2, #10
0x1DF4	0x4942    LDR	R1, [PC, #264]
;adc_func.c, 542 :: 		one_level_comparator_ms(ALARM_LEVEL,BoardSensorPPM,ANALOG_GISTERESIS,
0x1DF6	0x4843    LDR	R0, [PC, #268]
0x1DF8	0x6800    LDR	R0, [R0, #0]
;adc_func.c, 544 :: 		&board_sensor_count,&board_sensor_count1);
0x1DFA	0xB420    PUSH	(R5)
0x1DFC	0xB410    PUSH	(R4)
;adc_func.c, 543 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.board_sensor_status,
0x1DFE	0xB408    PUSH	(R3)
0x1E00	0xB404    PUSH	(R2)
0x1E02	0xB402    PUSH	(R1)
0x1E04	0x4B3E    LDR	R3, [PC, #248]
;adc_func.c, 542 :: 		one_level_comparator_ms(ALARM_LEVEL,BoardSensorPPM,ANALOG_GISTERESIS,
0x1E06	0x4A40    LDR	R2, [PC, #256]
0x1E08	0x4601    MOV	R1, R0
0x1E0A	0x4840    LDR	R0, [PC, #256]
;adc_func.c, 544 :: 		&board_sensor_count,&board_sensor_count1);
;adc_func.c, 543 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.board_sensor_status,
;adc_func.c, 544 :: 		&board_sensor_count,&board_sensor_count1);
0x1E0C	0xF7FEFFEC  BL	_one_level_comparator_ms+0
0x1E10	0xB005    ADD	SP, SP, #20
;adc_func.c, 548 :: 		&forward_sensor_count,&forward_sensor_count1);
0x1E12	0x4D3F    LDR	R5, [PC, #252]
0x1E14	0x4C3F    LDR	R4, [PC, #252]
;adc_func.c, 547 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.forward_sensor_status,
0x1E16	0x4B40    LDR	R3, [PC, #256]
0x1E18	0x220A    MOVS	R2, #10
0x1E1A	0x4939    LDR	R1, [PC, #228]
;adc_func.c, 546 :: 		one_level_comparator_ms(ALARM_LEVEL,ForwardSensorPPM,ANALOG_GISTERESIS,
0x1E1C	0x483F    LDR	R0, [PC, #252]
0x1E1E	0x6800    LDR	R0, [R0, #0]
;adc_func.c, 548 :: 		&forward_sensor_count,&forward_sensor_count1);
0x1E20	0xB420    PUSH	(R5)
0x1E22	0xB410    PUSH	(R4)
;adc_func.c, 547 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.forward_sensor_status,
0x1E24	0xB408    PUSH	(R3)
0x1E26	0xB404    PUSH	(R2)
0x1E28	0xB402    PUSH	(R1)
0x1E2A	0x4B35    LDR	R3, [PC, #212]
;adc_func.c, 546 :: 		one_level_comparator_ms(ALARM_LEVEL,ForwardSensorPPM,ANALOG_GISTERESIS,
0x1E2C	0x4A36    LDR	R2, [PC, #216]
0x1E2E	0x4601    MOV	R1, R0
0x1E30	0x4836    LDR	R0, [PC, #216]
;adc_func.c, 548 :: 		&forward_sensor_count,&forward_sensor_count1);
;adc_func.c, 547 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.forward_sensor_status,
;adc_func.c, 548 :: 		&forward_sensor_count,&forward_sensor_count1);
0x1E32	0xF7FEFFD9  BL	_one_level_comparator_ms+0
0x1E36	0xB005    ADD	SP, SP, #20
;adc_func.c, 552 :: 		&backward_sensor_count,&backward_sensor_count1);
0x1E38	0x4D39    LDR	R5, [PC, #228]
0x1E3A	0x4C3A    LDR	R4, [PC, #232]
;adc_func.c, 551 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.backward_sensor_status,
0x1E3C	0x4B3A    LDR	R3, [PC, #232]
0x1E3E	0x220A    MOVS	R2, #10
0x1E40	0x492F    LDR	R1, [PC, #188]
;adc_func.c, 550 :: 		one_level_comparator_ms(ALARM_LEVEL,BackwardSensorPPM,ANALOG_GISTERESIS,
0x1E42	0x483A    LDR	R0, [PC, #232]
0x1E44	0x6800    LDR	R0, [R0, #0]
;adc_func.c, 552 :: 		&backward_sensor_count,&backward_sensor_count1);
0x1E46	0xB420    PUSH	(R5)
0x1E48	0xB410    PUSH	(R4)
;adc_func.c, 551 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.backward_sensor_status,
0x1E4A	0xB408    PUSH	(R3)
0x1E4C	0xB404    PUSH	(R2)
0x1E4E	0xB402    PUSH	(R1)
0x1E50	0x4B2B    LDR	R3, [PC, #172]
;adc_func.c, 550 :: 		one_level_comparator_ms(ALARM_LEVEL,BackwardSensorPPM,ANALOG_GISTERESIS,
0x1E52	0x4A2D    LDR	R2, [PC, #180]
0x1E54	0x4601    MOV	R1, R0
0x1E56	0x482D    LDR	R0, [PC, #180]
;adc_func.c, 552 :: 		&backward_sensor_count,&backward_sensor_count1);
;adc_func.c, 551 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.backward_sensor_status,
;adc_func.c, 552 :: 		&backward_sensor_count,&backward_sensor_count1);
0x1E58	0xF7FEFFC6  BL	_one_level_comparator_ms+0
0x1E5C	0xB005    ADD	SP, SP, #20
;adc_func.c, 554 :: 		if(getAdcStatus())
0x1E5E	0xF7FEFD89  BL	_getAdcStatus+0
0x1E62	0x2800    CMP	R0, #0
0x1E64	0xD002    BEQ	L_ControlAnalogFlags112
;adc_func.c, 556 :: 		setState(sensor_alarm);
0x1E66	0x200A    MOVS	R0, #10
0x1E68	0xF001F942  BL	_setState+0
;adc_func.c, 557 :: 		}
L_ControlAnalogFlags112:
;adc_func.c, 559 :: 		if(flag_t.board_sensor_status)
0x1E6C	0x4823    LDR	R0, [PC, #140]
0x1E6E	0x7800    LDRB	R0, [R0, #0]
0x1E70	0x2800    CMP	R0, #0
0x1E72	0xD006    BEQ	L_ControlAnalogFlags113
;adc_func.c, 561 :: 		bit_set(analogStatusAllChanell,0);
0x1E74	0x482E    LDR	R0, [PC, #184]
0x1E76	0x7801    LDRB	R1, [R0, #0]
0x1E78	0x2001    MOVS	R0, #1
0x1E7A	0x4301    ORRS	R1, R0
0x1E7C	0x482C    LDR	R0, [PC, #176]
0x1E7E	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 562 :: 		}
0x1E80	0xE007    B	L_ControlAnalogFlags114
L_ControlAnalogFlags113:
;adc_func.c, 565 :: 		bit_clr(analogStatusAllChanell,0);
0x1E82	0x482B    LDR	R0, [PC, #172]
0x1E84	0x7801    LDRB	R1, [R0, #0]
0x1E86	0x2001    MOVS	R0, #1
0x1E88	0x43C0    MVN	R0, R0
0x1E8A	0xB200    SXTH	R0, R0
0x1E8C	0x4001    ANDS	R1, R0
0x1E8E	0x4828    LDR	R0, [PC, #160]
0x1E90	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 566 :: 		}
L_ControlAnalogFlags114:
;adc_func.c, 568 :: 		if(flag_t.forward_sensor_status)
0x1E92	0x4821    LDR	R0, [PC, #132]
0x1E94	0x7800    LDRB	R0, [R0, #0]
0x1E96	0x2800    CMP	R0, #0
0x1E98	0xD006    BEQ	L_ControlAnalogFlags115
;adc_func.c, 570 :: 		bit_set(analogStatusAllChanell,1);
0x1E9A	0x4825    LDR	R0, [PC, #148]
0x1E9C	0x7801    LDRB	R1, [R0, #0]
0x1E9E	0x2002    MOVS	R0, #2
0x1EA0	0x4301    ORRS	R1, R0
0x1EA2	0x4823    LDR	R0, [PC, #140]
0x1EA4	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 571 :: 		}
0x1EA6	0xE007    B	L_ControlAnalogFlags116
L_ControlAnalogFlags115:
;adc_func.c, 574 :: 		bit_clr(analogStatusAllChanell,1);
0x1EA8	0x4821    LDR	R0, [PC, #132]
0x1EAA	0x7801    LDRB	R1, [R0, #0]
0x1EAC	0x2002    MOVS	R0, #2
0x1EAE	0x43C0    MVN	R0, R0
0x1EB0	0xB200    SXTH	R0, R0
0x1EB2	0x4001    ANDS	R1, R0
0x1EB4	0x481E    LDR	R0, [PC, #120]
0x1EB6	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 575 :: 		}
L_ControlAnalogFlags116:
;adc_func.c, 577 :: 		if(flag_t.backward_sensor_status)
0x1EB8	0x481B    LDR	R0, [PC, #108]
0x1EBA	0x7800    LDRB	R0, [R0, #0]
0x1EBC	0x2800    CMP	R0, #0
0x1EBE	0xD006    BEQ	L_ControlAnalogFlags117
;adc_func.c, 579 :: 		bit_set(analogStatusAllChanell,2);
0x1EC0	0x481B    LDR	R0, [PC, #108]
0x1EC2	0x7801    LDRB	R1, [R0, #0]
0x1EC4	0x2004    MOVS	R0, #4
0x1EC6	0x4301    ORRS	R1, R0
0x1EC8	0x4819    LDR	R0, [PC, #100]
0x1ECA	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 580 :: 		}
0x1ECC	0xE007    B	L_ControlAnalogFlags118
L_ControlAnalogFlags117:
;adc_func.c, 583 :: 		bit_clr(analogStatusAllChanell,2);
0x1ECE	0x4818    LDR	R0, [PC, #96]
0x1ED0	0x7801    LDRB	R1, [R0, #0]
0x1ED2	0x2004    MOVS	R0, #4
0x1ED4	0x43C0    MVN	R0, R0
0x1ED6	0xB200    SXTH	R0, R0
0x1ED8	0x4001    ANDS	R1, R0
0x1EDA	0x4815    LDR	R0, [PC, #84]
0x1EDC	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 584 :: 		}
L_ControlAnalogFlags118:
;adc_func.c, 586 :: 		}
0x1EDE	0xE008    B	L_ControlAnalogFlags119
L_ControlAnalogFlags111:
;adc_func.c, 589 :: 		flag_t.board_sensor_status    = RESET;
0x1EE0	0x2100    MOVS	R1, #0
0x1EE2	0x4806    LDR	R0, [PC, #24]
0x1EE4	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 590 :: 		flag_t.forward_sensor_status  = RESET;
0x1EE6	0x2100    MOVS	R1, #0
0x1EE8	0x480B    LDR	R0, [PC, #44]
0x1EEA	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 591 :: 		flag_t.backward_sensor_status = RESET;
0x1EEC	0x2100    MOVS	R1, #0
0x1EEE	0x480E    LDR	R0, [PC, #56]
0x1EF0	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 592 :: 		}
L_ControlAnalogFlags119:
;adc_func.c, 593 :: 		}
L_end_ControlAnalogFlags:
0x1EF2	0xBD00    POP	(R15)
0x1EF4	0x00A42000  	ControlAnalogFlags_board_sensor_count1_L0+0
0x1EF8	0x00A02000  	ControlAnalogFlags_board_sensor_count_L0+0
0x1EFC	0x01672000  	_flag_t+1
0x1F00	0x03E80000  	#1000
0x1F04	0x000C2000  	536870924
0x1F08	0x00004348  	#1128792064
0x1F0C	0x000045FA  	#1174011904
0x1F10	0x00AC2000  	ControlAnalogFlags_forward_sensor_count1_L0+0
0x1F14	0x00A82000  	ControlAnalogFlags_forward_sensor_count_L0+0
0x1F18	0x01682000  	_flag_t+2
0x1F1C	0x00102000  	536870928
0x1F20	0x00B42000  	ControlAnalogFlags_backward_sensor_count1_L0+0
0x1F24	0x00B02000  	ControlAnalogFlags_backward_sensor_count_L0+0
0x1F28	0x01692000  	_flag_t+3
0x1F2C	0x00142000  	536870932
0x1F30	0x00382000  	_analogStatusAllChanell+0
; end of _ControlAnalogFlags
_getAdcControlStatus:
;adc_func.c, 612 :: 		unsigned char getAdcControlStatus()
0x0F0C	0xB500    PUSH	(R14)
;adc_func.c, 614 :: 		return  (unsigned char)flag_t.start_sensor_control;
0x0F0E	0x4801    LDR	R0, [PC, #4]
0x0F10	0x7800    LDRB	R0, [R0, #0]
;adc_func.c, 615 :: 		}
L_end_getAdcControlStatus:
0x0F12	0xBD00    POP	(R15)
0x0F14	0x016B2000  	_flag_t+5
; end of _getAdcControlStatus
_one_level_comparator_ms:
;compare_func.c, 41 :: 		unsigned int* count_olc,unsigned int* count_olc1)
0x0DE8	0xB500    PUSH	(R14)
0x0DEA	0xB088    SUB	SP, SP, #32
0x0DEC	0x9000    STR	R0, [SP, #0]
0x0DEE	0x9101    STR	R1, [SP, #4]
0x0DF0	0x9202    STR	R2, [SP, #8]
0x0DF2	0x9303    STR	R3, [SP, #12]
0x0DF4	0x9C09    LDR	R4, [SP, #36]
0x0DF6	0xB2A4    UXTH	R4, R4
0x0DF8	0x9409    STR	R4, [SP, #36]
0x0DFA	0x9C0A    LDR	R4, [SP, #40]
0x0DFC	0xB2A4    UXTH	R4, R4
0x0DFE	0x940A    STR	R4, [SP, #40]
0x0E00	0x9C0B    LDR	R4, [SP, #44]
0x0E02	0x940B    STR	R4, [SP, #44]
0x0E04	0x9C0C    LDR	R4, [SP, #48]
0x0E06	0x940C    STR	R4, [SP, #48]
0x0E08	0x9C0D    LDR	R4, [SP, #52]
0x0E0A	0x940D    STR	R4, [SP, #52]
;compare_func.c, 43 :: 		if(value>=(reference+gisteresis))
0x0E0C	0x9A02    LDR	R2, [SP, #8]
0x0E0E	0x9800    LDR	R0, [SP, #0]
0x0E10	0xF7FFFBA0  BL	__Add_FP+0
0x0E14	0x9A01    LDR	R2, [SP, #4]
0x0E16	0xF7FFFC55  BL	__Compare_FP+0
0x0E1A	0xDC01    BGT	L__one_level_comparator_ms86
0x0E1C	0x2001    MOVS	R0, #1
0x0E1E	0xE000    B	L__one_level_comparator_ms87
L__one_level_comparator_ms86:
0x0E20	0x2000    MOVS	R0, #0
L__one_level_comparator_ms87:
0x0E22	0x2800    CMP	R0, #0
0x0E24	0xD028    BEQ	L_one_level_comparator_ms6
;compare_func.c, 45 :: 		if(++(*count_olc)>=(unsigned int)(delay_on_ms/ms_in_one_cycle))
0x0E26	0x9C0C    LDR	R4, [SP, #48]
0x0E28	0x8824    LDRH	R4, [R4, #0]
0x0E2A	0x1C65    ADDS	R5, R4, #1
0x0E2C	0x9C0C    LDR	R4, [SP, #48]
0x0E2E	0x8025    STRH	R5, [R4, #0]
0x0E30	0x9C0C    LDR	R4, [SP, #48]
0x0E32	0x8824    LDRH	R4, [R4, #0]
0x0E34	0x9407    STR	R4, [SP, #28]
0x0E36	0x9A0A    LDR	R2, [SP, #40]
0x0E38	0xB292    UXTH	R2, R2
0x0E3A	0x9803    LDR	R0, [SP, #12]
0x0E3C	0xB280    UXTH	R0, R0
0x0E3E	0xF7FFFC8B  BL	__Div_32x32_U+0
0x0E42	0xB280    UXTH	R0, R0
0x0E44	0x9C07    LDR	R4, [SP, #28]
0x0E46	0xB2A4    UXTH	R4, R4
0x0E48	0x4284    CMP	R4, R0
0x0E4A	0xD315    BCC	L_one_level_comparator_ms7
;compare_func.c, 47 :: 		*count_olc  = 0;
0x0E4C	0x2500    MOVS	R5, #0
0x0E4E	0x9C0C    LDR	R4, [SP, #48]
0x0E50	0x8025    STRH	R5, [R4, #0]
;compare_func.c, 48 :: 		*count_olc1 = 0;
0x0E52	0x2500    MOVS	R5, #0
0x0E54	0x9C0D    LDR	R4, [SP, #52]
0x0E56	0x8025    STRH	R5, [R4, #0]
;compare_func.c, 50 :: 		if(value>=(reference+gisteresis))
0x0E58	0x9A02    LDR	R2, [SP, #8]
0x0E5A	0x9800    LDR	R0, [SP, #0]
0x0E5C	0xF7FFFB7A  BL	__Add_FP+0
0x0E60	0x9A01    LDR	R2, [SP, #4]
0x0E62	0xF7FFFC2F  BL	__Compare_FP+0
0x0E66	0xDC01    BGT	L__one_level_comparator_ms88
0x0E68	0x2001    MOVS	R0, #1
0x0E6A	0xE000    B	L__one_level_comparator_ms89
L__one_level_comparator_ms88:
0x0E6C	0x2000    MOVS	R0, #0
L__one_level_comparator_ms89:
0x0E6E	0x2800    CMP	R0, #0
0x0E70	0xD002    BEQ	L_one_level_comparator_ms8
;compare_func.c, 52 :: 		*status = 1;
0x0E72	0x2501    MOVS	R5, #1
0x0E74	0x9C0B    LDR	R4, [SP, #44]
0x0E76	0x7025    STRB	R5, [R4, #0]
;compare_func.c, 53 :: 		}
L_one_level_comparator_ms8:
;compare_func.c, 54 :: 		}
L_one_level_comparator_ms7:
;compare_func.c, 55 :: 		}
L_one_level_comparator_ms6:
;compare_func.c, 59 :: 		if(value<=(reference-gisteresis))
0x0E78	0x9A02    LDR	R2, [SP, #8]
0x0E7A	0x9800    LDR	R0, [SP, #0]
0x0E7C	0xF000FDD8  BL	__Sub_FP+0
0x0E80	0x9A01    LDR	R2, [SP, #4]
0x0E82	0xF7FFFC1F  BL	__Compare_FP+0
0x0E86	0xDB01    BLT	L__one_level_comparator_ms90
0x0E88	0x2001    MOVS	R0, #1
0x0E8A	0xE000    B	L__one_level_comparator_ms91
L__one_level_comparator_ms90:
0x0E8C	0x2000    MOVS	R0, #0
L__one_level_comparator_ms91:
0x0E8E	0x2800    CMP	R0, #0
0x0E90	0xD028    BEQ	L_one_level_comparator_ms9
;compare_func.c, 61 :: 		if(++(*count_olc1)>=(unsigned int)(delay_off_ms/ms_in_one_cycle))
0x0E92	0x9C0D    LDR	R4, [SP, #52]
0x0E94	0x8824    LDRH	R4, [R4, #0]
0x0E96	0x1C65    ADDS	R5, R4, #1
0x0E98	0x9C0D    LDR	R4, [SP, #52]
0x0E9A	0x8025    STRH	R5, [R4, #0]
0x0E9C	0x9C0D    LDR	R4, [SP, #52]
0x0E9E	0x8824    LDRH	R4, [R4, #0]
0x0EA0	0x9407    STR	R4, [SP, #28]
0x0EA2	0x9A0A    LDR	R2, [SP, #40]
0x0EA4	0xB292    UXTH	R2, R2
0x0EA6	0x9809    LDR	R0, [SP, #36]
0x0EA8	0xB280    UXTH	R0, R0
0x0EAA	0xF7FFFC55  BL	__Div_32x32_U+0
0x0EAE	0xB280    UXTH	R0, R0
0x0EB0	0x9C07    LDR	R4, [SP, #28]
0x0EB2	0xB2A4    UXTH	R4, R4
0x0EB4	0x4284    CMP	R4, R0
0x0EB6	0xD315    BCC	L_one_level_comparator_ms10
;compare_func.c, 63 :: 		*count_olc  = 0;
0x0EB8	0x2500    MOVS	R5, #0
0x0EBA	0x9C0C    LDR	R4, [SP, #48]
0x0EBC	0x8025    STRH	R5, [R4, #0]
;compare_func.c, 64 :: 		*count_olc1 = 0;
0x0EBE	0x2500    MOVS	R5, #0
0x0EC0	0x9C0D    LDR	R4, [SP, #52]
0x0EC2	0x8025    STRH	R5, [R4, #0]
;compare_func.c, 66 :: 		if(value<=(reference-gisteresis))
0x0EC4	0x9A02    LDR	R2, [SP, #8]
0x0EC6	0x9800    LDR	R0, [SP, #0]
0x0EC8	0xF000FDB2  BL	__Sub_FP+0
0x0ECC	0x9A01    LDR	R2, [SP, #4]
0x0ECE	0xF7FFFBF9  BL	__Compare_FP+0
0x0ED2	0xDB01    BLT	L__one_level_comparator_ms92
0x0ED4	0x2001    MOVS	R0, #1
0x0ED6	0xE000    B	L__one_level_comparator_ms93
L__one_level_comparator_ms92:
0x0ED8	0x2000    MOVS	R0, #0
L__one_level_comparator_ms93:
0x0EDA	0x2800    CMP	R0, #0
0x0EDC	0xD002    BEQ	L_one_level_comparator_ms11
;compare_func.c, 68 :: 		*status = 0;
0x0EDE	0x2500    MOVS	R5, #0
0x0EE0	0x9C0B    LDR	R4, [SP, #44]
0x0EE2	0x7025    STRB	R5, [R4, #0]
;compare_func.c, 69 :: 		}
L_one_level_comparator_ms11:
;compare_func.c, 70 :: 		}
L_one_level_comparator_ms10:
;compare_func.c, 71 :: 		}
L_one_level_comparator_ms9:
;compare_func.c, 72 :: 		}
L_end_one_level_comparator_ms:
0x0EE4	0xB008    ADD	SP, SP, #32
0x0EE6	0xBD00    POP	(R15)
; end of _one_level_comparator_ms
_getAdcStatus:
;adc_func.c, 595 :: 		unsigned char getAdcStatus()
0x0974	0xB500    PUSH	(R14)
;adc_func.c, 597 :: 		return (unsigned char)(flag_t.board_sensor_status||flag_t.forward_sensor_status||flag_t.backward_sensor_status);
0x0976	0x4808    LDR	R0, [PC, #32]
0x0978	0x7800    LDRB	R0, [R0, #0]
0x097A	0x2800    CMP	R0, #0
0x097C	0xD109    BNE	L_getAdcStatus121
0x097E	0x4807    LDR	R0, [PC, #28]
0x0980	0x7800    LDRB	R0, [R0, #0]
0x0982	0x2800    CMP	R0, #0
0x0984	0xD105    BNE	L_getAdcStatus121
0x0986	0x4806    LDR	R0, [PC, #24]
0x0988	0x7800    LDRB	R0, [R0, #0]
0x098A	0x2800    CMP	R0, #0
0x098C	0xD101    BNE	L_getAdcStatus121
0x098E	0x2000    MOVS	R0, #0
0x0990	0xE000    B	L_getAdcStatus120
L_getAdcStatus121:
0x0992	0x2001    MOVS	R0, #1
L_getAdcStatus120:
;adc_func.c, 598 :: 		}
L_end_getAdcStatus:
0x0994	0xBD00    POP	(R15)
0x0996	0xBF00    NOP
0x0998	0x01672000  	_flag_t+1
0x099C	0x01682000  	_flag_t+2
0x09A0	0x01692000  	_flag_t+3
; end of _getAdcStatus
_ControlDigitalFlags:
;func.c, 6 :: 		void ControlDigitalFlags()
0x2B70	0xB500    PUSH	(R14)
;func.c, 13 :: 		&start_button_status_count1, &start_button_status_count2);
0x2B72	0x4C10    LDR	R4, [PC, #64]
0x2B74	0x4B10    LDR	R3, [PC, #64]
;func.c, 12 :: 		MS_IN_CYCLE, &flag_t.cal_button_status,
0x2B76	0x4A11    LDR	R2, [PC, #68]
;func.c, 11 :: 		ControlDigit_ms(CAL_BUTTON, DIGITAL_DELAY_ON,DIGITAL_DELAY_OFF,
0x2B78	0x4811    LDR	R0, [PC, #68]
0x2B7A	0x6801    LDR	R1, [R0, #0]
0x2B7C	0x2001    MOVS	R0, #1
0x2B7E	0x0200    LSLS	R0, R0, BitPos(CAL_BUTTON+0)
0x2B80	0x4008    ANDS	R0, R1
0x2B82	0x0A00    LSRS	R0, R0, BitPos(CAL_BUTTON+0)
;func.c, 13 :: 		&start_button_status_count1, &start_button_status_count2);
0x2B84	0xB410    PUSH	(R4)
0x2B86	0xB408    PUSH	(R3)
;func.c, 12 :: 		MS_IN_CYCLE, &flag_t.cal_button_status,
0x2B88	0xB404    PUSH	(R2)
0x2B8A	0x230A    MOVS	R3, #10
;func.c, 11 :: 		ControlDigit_ms(CAL_BUTTON, DIGITAL_DELAY_ON,DIGITAL_DELAY_OFF,
0x2B8C	0x4A0D    LDR	R2, [PC, #52]
0x2B8E	0x490D    LDR	R1, [PC, #52]
;func.c, 13 :: 		&start_button_status_count1, &start_button_status_count2);
;func.c, 12 :: 		MS_IN_CYCLE, &flag_t.cal_button_status,
;func.c, 13 :: 		&start_button_status_count1, &start_button_status_count2);
0x2B90	0xF7FDFF5C  BL	_ControlDigit_ms+0
0x2B94	0xB003    ADD	SP, SP, #12
;func.c, 16 :: 		if(flag_t.cal_button_status==RESET&&flag_t.ready_calibration_prog==RESET)
0x2B96	0x4809    LDR	R0, [PC, #36]
0x2B98	0x7800    LDRB	R0, [R0, #0]
0x2B9A	0x2800    CMP	R0, #0
0x2B9C	0xD109    BNE	L__ControlDigitalFlags59
0x2B9E	0x480A    LDR	R0, [PC, #40]
0x2BA0	0x7800    LDRB	R0, [R0, #0]
0x2BA2	0x2800    CMP	R0, #0
0x2BA4	0xD105    BNE	L__ControlDigitalFlags58
L__ControlDigitalFlags57:
;func.c, 18 :: 		flag_t.calibrate_status = RESET;
0x2BA6	0x2100    MOVS	R1, #0
0x2BA8	0x4808    LDR	R0, [PC, #32]
0x2BAA	0x7001    STRB	R1, [R0, #0]
;func.c, 19 :: 		setState(getV0);
0x2BAC	0x2008    MOVS	R0, #8
0x2BAE	0xF000FA9F  BL	_setState+0
;func.c, 16 :: 		if(flag_t.cal_button_status==RESET&&flag_t.ready_calibration_prog==RESET)
L__ControlDigitalFlags59:
L__ControlDigitalFlags58:
;func.c, 21 :: 		}
L_end_ControlDigitalFlags:
0x2BB2	0xBD00    POP	(R15)
0x2BB4	0x00BC2000  	ControlDigitalFlags_start_button_status_count2_L0+0
0x2BB8	0x00B82000  	ControlDigitalFlags_start_button_status_count1_L0+0
0x2BBC	0x016A2000  	_flag_t+4
0x2BC0	0x00104800  	CAL_BUTTON+0
0x2BC4	0x03E80000  	#1000
0x2BC8	0x016D2000  	_flag_t+7
0x2BCC	0x01722000  	_flag_t+12
; end of _ControlDigitalFlags
_ControlDigit_ms:
;compare_func.c, 188 :: 		unsigned int *count_ci, unsigned int* count_ci1)
; ms_in_one_cycle start address is: 12 (R3)
; delay_reset start address is: 8 (R2)
; delay_set start address is: 4 (R1)
; in_value start address is: 0 (R0)
0x0A4C	0xB500    PUSH	(R14)
0x0A4E	0xB085    SUB	SP, SP, #20
0x0A50	0xB2C6    UXTB	R6, R0
0x0A52	0xB288    UXTH	R0, R1
0x0A54	0xB299    UXTH	R1, R3
0x0A56	0xB297    UXTH	R7, R2
; ms_in_one_cycle end address is: 12 (R3)
; delay_reset end address is: 8 (R2)
; delay_set end address is: 4 (R1)
; in_value end address is: 0 (R0)
; in_value start address is: 24 (R6)
; delay_set start address is: 0 (R0)
; delay_reset start address is: 28 (R7)
; ms_in_one_cycle start address is: 4 (R1)
; status start address is: 8 (R2)
0x0A58	0x9A06    LDR	R2, [SP, #24]
; count_ci start address is: 12 (R3)
0x0A5A	0x9B07    LDR	R3, [SP, #28]
; count_ci1 start address is: 20 (R5)
0x0A5C	0x9D08    LDR	R5, [SP, #32]
;compare_func.c, 190 :: 		if (in_value == SET)
0x0A5E	0x2E01    CMP	R6, #1
0x0A60	0xD11D    BNE	L_ControlDigit_ms46
;compare_func.c, 193 :: 		if ((++(*count_ci)) >= (unsigned int)(delay_set / ms_in_one_cycle))
0x0A62	0x881C    LDRH	R4, [R3, #0]
0x0A64	0x3401    ADDS	R4, #1
0x0A66	0x801C    STRH	R4, [R3, #0]
0x0A68	0x881C    LDRH	R4, [R3, #0]
0x0A6A	0x9404    STR	R4, [SP, #16]
0x0A6C	0x9500    STR	R5, [SP, #0]
; delay_set end address is: 0 (R0)
0x0A6E	0x9301    STR	R3, [SP, #4]
0x0A70	0x9202    STR	R2, [SP, #8]
0x0A72	0x9103    STR	R1, [SP, #12]
0x0A74	0xB28A    UXTH	R2, R1
0x0A76	0xF7FFFE6F  BL	__Div_32x32_U+0
0x0A7A	0xB280    UXTH	R0, R0
0x0A7C	0x9903    LDR	R1, [SP, #12]
0x0A7E	0xB289    UXTH	R1, R1
0x0A80	0x9A02    LDR	R2, [SP, #8]
0x0A82	0x9B01    LDR	R3, [SP, #4]
0x0A84	0x9D00    LDR	R5, [SP, #0]
0x0A86	0x9C04    LDR	R4, [SP, #16]
0x0A88	0xB2A4    UXTH	R4, R4
0x0A8A	0x4284    CMP	R4, R0
0x0A8C	0xD307    BCC	L_ControlDigit_ms47
;compare_func.c, 195 :: 		*count_ci = 0;
0x0A8E	0x2400    MOVS	R4, #0
0x0A90	0x801C    STRH	R4, [R3, #0]
;compare_func.c, 196 :: 		*count_ci1 = 0;
0x0A92	0x2400    MOVS	R4, #0
0x0A94	0x802C    STRH	R4, [R5, #0]
;compare_func.c, 197 :: 		if (in_value == SET)
0x0A96	0x2E01    CMP	R6, #1
0x0A98	0xD101    BNE	L_ControlDigit_ms48
;compare_func.c, 199 :: 		*status = 1;
0x0A9A	0x2401    MOVS	R4, #1
0x0A9C	0x7014    STRB	R4, [R2, #0]
;compare_func.c, 200 :: 		}
L_ControlDigit_ms48:
;compare_func.c, 201 :: 		}
L_ControlDigit_ms47:
;compare_func.c, 203 :: 		}
L_ControlDigit_ms46:
;compare_func.c, 205 :: 		if (in_value == RESET)
0x0A9E	0x2E00    CMP	R6, #0
0x0AA0	0xD11B    BNE	L_ControlDigit_ms49
;compare_func.c, 208 :: 		if ((++(*count_ci1)) >= (unsigned int)(delay_reset / ms_in_one_cycle))
0x0AA2	0x882C    LDRH	R4, [R5, #0]
0x0AA4	0x3401    ADDS	R4, #1
0x0AA6	0x802C    STRH	R4, [R5, #0]
0x0AA8	0x882C    LDRH	R4, [R5, #0]
0x0AAA	0x9404    STR	R4, [SP, #16]
0x0AAC	0x9500    STR	R5, [SP, #0]
; delay_reset end address is: 28 (R7)
; ms_in_one_cycle end address is: 4 (R1)
0x0AAE	0x9301    STR	R3, [SP, #4]
0x0AB0	0x9202    STR	R2, [SP, #8]
0x0AB2	0xB28A    UXTH	R2, R1
0x0AB4	0xB2B8    UXTH	R0, R7
0x0AB6	0xF7FFFE4F  BL	__Div_32x32_U+0
0x0ABA	0xB280    UXTH	R0, R0
0x0ABC	0x9A02    LDR	R2, [SP, #8]
0x0ABE	0x9B01    LDR	R3, [SP, #4]
0x0AC0	0x9D00    LDR	R5, [SP, #0]
0x0AC2	0x9C04    LDR	R4, [SP, #16]
0x0AC4	0xB2A4    UXTH	R4, R4
0x0AC6	0x4284    CMP	R4, R0
0x0AC8	0xD307    BCC	L_ControlDigit_ms50
;compare_func.c, 210 :: 		*count_ci = 0;
0x0ACA	0x2400    MOVS	R4, #0
0x0ACC	0x801C    STRH	R4, [R3, #0]
; count_ci end address is: 12 (R3)
;compare_func.c, 211 :: 		*count_ci1 = 0;
0x0ACE	0x2400    MOVS	R4, #0
0x0AD0	0x802C    STRH	R4, [R5, #0]
; count_ci1 end address is: 20 (R5)
;compare_func.c, 212 :: 		if (in_value == RESET)
0x0AD2	0x2E00    CMP	R6, #0
0x0AD4	0xD101    BNE	L_ControlDigit_ms51
; in_value end address is: 24 (R6)
;compare_func.c, 214 :: 		*status = 0;
0x0AD6	0x2400    MOVS	R4, #0
0x0AD8	0x7014    STRB	R4, [R2, #0]
; status end address is: 8 (R2)
;compare_func.c, 215 :: 		}
L_ControlDigit_ms51:
;compare_func.c, 216 :: 		}
L_ControlDigit_ms50:
;compare_func.c, 218 :: 		}
L_ControlDigit_ms49:
;compare_func.c, 219 :: 		}
L_end_ControlDigit_ms:
0x0ADA	0xB005    ADD	SP, SP, #20
0x0ADC	0xBD00    POP	(R15)
; end of _ControlDigit_ms
_ControlSensorDamage:
;adc_func.c, 100 :: 		void ControlSensorDamage()
0x24C8	0xB500    PUSH	(R14)
;adc_func.c, 109 :: 		&board_sensor_damage_count1);
0x24CA	0x4E40    LDR	R6, [PC, #256]
;adc_func.c, 108 :: 		MS_IN_CYCLE,&flag_t.board_sensor_damage,&board_sensor_damage_count,
0x24CC	0x4D40    LDR	R5, [PC, #256]
0x24CE	0x4C41    LDR	R4, [PC, #260]
0x24D0	0x230A    MOVS	R3, #10
;adc_func.c, 107 :: 		ANALOG_GISTERESIS_F, ANALOG_DELAY_ON,ANALOG_DELAY_OFF,
0x24D2	0x4A41    LDR	R2, [PC, #260]
0x24D4	0x4940    LDR	R1, [PC, #256]
;adc_func.c, 106 :: 		two_level_comparator_ms(ALARM_DAMAGE_LEVEL_HI,ALARM_DAMAGE_LEVEL_LO,BoardSensorVrl,
0x24D6	0x4841    LDR	R0, [PC, #260]
0x24D8	0x6800    LDR	R0, [R0, #0]
;adc_func.c, 109 :: 		&board_sensor_damage_count1);
0x24DA	0xB440    PUSH	(R6)
;adc_func.c, 108 :: 		MS_IN_CYCLE,&flag_t.board_sensor_damage,&board_sensor_damage_count,
0x24DC	0xB420    PUSH	(R5)
0x24DE	0xB410    PUSH	(R4)
0x24E0	0xB408    PUSH	(R3)
;adc_func.c, 107 :: 		ANALOG_GISTERESIS_F, ANALOG_DELAY_ON,ANALOG_DELAY_OFF,
0x24E2	0xB404    PUSH	(R2)
0x24E4	0xB402    PUSH	(R1)
0x24E6	0x4B3E    LDR	R3, [PC, #248]
;adc_func.c, 106 :: 		two_level_comparator_ms(ALARM_DAMAGE_LEVEL_HI,ALARM_DAMAGE_LEVEL_LO,BoardSensorVrl,
0x24E8	0x4602    MOV	R2, R0
0x24EA	0x493E    LDR	R1, [PC, #248]
0x24EC	0x483E    LDR	R0, [PC, #248]
;adc_func.c, 109 :: 		&board_sensor_damage_count1);
;adc_func.c, 108 :: 		MS_IN_CYCLE,&flag_t.board_sensor_damage,&board_sensor_damage_count,
;adc_func.c, 107 :: 		ANALOG_GISTERESIS_F, ANALOG_DELAY_ON,ANALOG_DELAY_OFF,
;adc_func.c, 109 :: 		&board_sensor_damage_count1);
0x24EE	0xF7FEFAF7  BL	_two_level_comparator_ms+0
0x24F2	0xB006    ADD	SP, SP, #24
;adc_func.c, 114 :: 		&forward_sensor_damage_count1);
0x24F4	0x4E3D    LDR	R6, [PC, #244]
;adc_func.c, 113 :: 		MS_IN_CYCLE,&flag_t.forward_sensor_damage,&forward_sensor_damage_count,
0x24F6	0x4D3E    LDR	R5, [PC, #248]
0x24F8	0x4C3E    LDR	R4, [PC, #248]
0x24FA	0x230A    MOVS	R3, #10
;adc_func.c, 112 :: 		ANALOG_GISTERESIS_F, ANALOG_DELAY_ON,ANALOG_DELAY_OFF,
0x24FC	0x4A36    LDR	R2, [PC, #216]
0x24FE	0x4936    LDR	R1, [PC, #216]
;adc_func.c, 111 :: 		two_level_comparator_ms(ALARM_DAMAGE_LEVEL_HI,ALARM_DAMAGE_LEVEL_LO,ForwardSensorVrl,
0x2500	0x483D    LDR	R0, [PC, #244]
0x2502	0x6800    LDR	R0, [R0, #0]
;adc_func.c, 114 :: 		&forward_sensor_damage_count1);
0x2504	0xB440    PUSH	(R6)
;adc_func.c, 113 :: 		MS_IN_CYCLE,&flag_t.forward_sensor_damage,&forward_sensor_damage_count,
0x2506	0xB420    PUSH	(R5)
0x2508	0xB410    PUSH	(R4)
0x250A	0xB408    PUSH	(R3)
;adc_func.c, 112 :: 		ANALOG_GISTERESIS_F, ANALOG_DELAY_ON,ANALOG_DELAY_OFF,
0x250C	0xB404    PUSH	(R2)
0x250E	0xB402    PUSH	(R1)
0x2510	0x4B33    LDR	R3, [PC, #204]
;adc_func.c, 111 :: 		two_level_comparator_ms(ALARM_DAMAGE_LEVEL_HI,ALARM_DAMAGE_LEVEL_LO,ForwardSensorVrl,
0x2512	0x4602    MOV	R2, R0
0x2514	0x4933    LDR	R1, [PC, #204]
0x2516	0x4834    LDR	R0, [PC, #208]
;adc_func.c, 114 :: 		&forward_sensor_damage_count1);
;adc_func.c, 113 :: 		MS_IN_CYCLE,&flag_t.forward_sensor_damage,&forward_sensor_damage_count,
;adc_func.c, 112 :: 		ANALOG_GISTERESIS_F, ANALOG_DELAY_ON,ANALOG_DELAY_OFF,
;adc_func.c, 114 :: 		&forward_sensor_damage_count1);
0x2518	0xF7FEFAE2  BL	_two_level_comparator_ms+0
0x251C	0xB006    ADD	SP, SP, #24
;adc_func.c, 119 :: 		&backward_sensor_damage_count1);
0x251E	0x4E37    LDR	R6, [PC, #220]
;adc_func.c, 118 :: 		MS_IN_CYCLE,&flag_t.backward_sensor_damage,&backward_sensor_damage_count,
0x2520	0x4D37    LDR	R5, [PC, #220]
0x2522	0x4C38    LDR	R4, [PC, #224]
0x2524	0x230A    MOVS	R3, #10
;adc_func.c, 117 :: 		ANALOG_GISTERESIS_F, ANALOG_DELAY_ON,ANALOG_DELAY_OFF,
0x2526	0x4A2C    LDR	R2, [PC, #176]
0x2528	0x492B    LDR	R1, [PC, #172]
;adc_func.c, 116 :: 		two_level_comparator_ms(ALARM_DAMAGE_LEVEL_HI,ALARM_DAMAGE_LEVEL_LO,BackwardSensorVrl,
0x252A	0x4837    LDR	R0, [PC, #220]
0x252C	0x6800    LDR	R0, [R0, #0]
;adc_func.c, 119 :: 		&backward_sensor_damage_count1);
0x252E	0xB440    PUSH	(R6)
;adc_func.c, 118 :: 		MS_IN_CYCLE,&flag_t.backward_sensor_damage,&backward_sensor_damage_count,
0x2530	0xB420    PUSH	(R5)
0x2532	0xB410    PUSH	(R4)
0x2534	0xB408    PUSH	(R3)
;adc_func.c, 117 :: 		ANALOG_GISTERESIS_F, ANALOG_DELAY_ON,ANALOG_DELAY_OFF,
0x2536	0xB404    PUSH	(R2)
0x2538	0xB402    PUSH	(R1)
0x253A	0x4B29    LDR	R3, [PC, #164]
;adc_func.c, 116 :: 		two_level_comparator_ms(ALARM_DAMAGE_LEVEL_HI,ALARM_DAMAGE_LEVEL_LO,BackwardSensorVrl,
0x253C	0x4602    MOV	R2, R0
0x253E	0x4929    LDR	R1, [PC, #164]
0x2540	0x4829    LDR	R0, [PC, #164]
;adc_func.c, 119 :: 		&backward_sensor_damage_count1);
;adc_func.c, 118 :: 		MS_IN_CYCLE,&flag_t.backward_sensor_damage,&backward_sensor_damage_count,
;adc_func.c, 117 :: 		ANALOG_GISTERESIS_F, ANALOG_DELAY_ON,ANALOG_DELAY_OFF,
;adc_func.c, 119 :: 		&backward_sensor_damage_count1);
0x2542	0xF7FEFACD  BL	_two_level_comparator_ms+0
0x2546	0xB006    ADD	SP, SP, #24
;adc_func.c, 121 :: 		if(getDamageSensorStatus())
0x2548	0xF7FEFA3E  BL	_getDamageSensorStatus+0
0x254C	0x2800    CMP	R0, #0
0x254E	0xD002    BEQ	L_ControlSensorDamage26
;adc_func.c, 123 :: 		setState(sensor_damage);
0x2550	0x200B    MOVS	R0, #11
0x2552	0xF000FDCD  BL	_setState+0
;adc_func.c, 124 :: 		}
L_ControlSensorDamage26:
;adc_func.c, 126 :: 		if(flag_t.board_sensor_damage)
0x2556	0x481F    LDR	R0, [PC, #124]
0x2558	0x7800    LDRB	R0, [R0, #0]
0x255A	0x2800    CMP	R0, #0
0x255C	0xD008    BEQ	L_ControlSensorDamage27
;adc_func.c, 128 :: 		bit_clr(AnalogSensorDamageControl,0);
0x255E	0x482B    LDR	R0, [PC, #172]
0x2560	0x7801    LDRB	R1, [R0, #0]
0x2562	0x2001    MOVS	R0, #1
0x2564	0x43C0    MVN	R0, R0
0x2566	0xB200    SXTH	R0, R0
0x2568	0x4001    ANDS	R1, R0
0x256A	0x4828    LDR	R0, [PC, #160]
0x256C	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 129 :: 		}
0x256E	0xE005    B	L_ControlSensorDamage28
L_ControlSensorDamage27:
;adc_func.c, 132 :: 		bit_set(AnalogSensorDamageControl,0);
0x2570	0x4826    LDR	R0, [PC, #152]
0x2572	0x7801    LDRB	R1, [R0, #0]
0x2574	0x2001    MOVS	R0, #1
0x2576	0x4301    ORRS	R1, R0
0x2578	0x4824    LDR	R0, [PC, #144]
0x257A	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 133 :: 		}
L_ControlSensorDamage28:
;adc_func.c, 135 :: 		if(flag_t.forward_sensor_damage)
0x257C	0x481D    LDR	R0, [PC, #116]
0x257E	0x7800    LDRB	R0, [R0, #0]
0x2580	0x2800    CMP	R0, #0
0x2582	0xD008    BEQ	L_ControlSensorDamage29
;adc_func.c, 137 :: 		bit_clr(AnalogSensorDamageControl,1);
0x2584	0x4821    LDR	R0, [PC, #132]
0x2586	0x7801    LDRB	R1, [R0, #0]
0x2588	0x2002    MOVS	R0, #2
0x258A	0x43C0    MVN	R0, R0
0x258C	0xB200    SXTH	R0, R0
0x258E	0x4001    ANDS	R1, R0
0x2590	0x481E    LDR	R0, [PC, #120]
0x2592	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 138 :: 		}
0x2594	0xE005    B	L_ControlSensorDamage30
L_ControlSensorDamage29:
;adc_func.c, 141 :: 		bit_set(AnalogSensorDamageControl,1);
0x2596	0x481D    LDR	R0, [PC, #116]
0x2598	0x7801    LDRB	R1, [R0, #0]
0x259A	0x2002    MOVS	R0, #2
0x259C	0x4301    ORRS	R1, R0
0x259E	0x481B    LDR	R0, [PC, #108]
0x25A0	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 142 :: 		}
L_ControlSensorDamage30:
;adc_func.c, 144 :: 		if(flag_t.backward_sensor_damage)
0x25A2	0x4818    LDR	R0, [PC, #96]
0x25A4	0x7800    LDRB	R0, [R0, #0]
0x25A6	0x2800    CMP	R0, #0
0x25A8	0xD008    BEQ	L_ControlSensorDamage31
;adc_func.c, 146 :: 		bit_clr(AnalogSensorDamageControl,2);
0x25AA	0x4818    LDR	R0, [PC, #96]
0x25AC	0x7801    LDRB	R1, [R0, #0]
0x25AE	0x2004    MOVS	R0, #4
0x25B0	0x43C0    MVN	R0, R0
0x25B2	0xB200    SXTH	R0, R0
0x25B4	0x4001    ANDS	R1, R0
0x25B6	0x4815    LDR	R0, [PC, #84]
0x25B8	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 147 :: 		}
0x25BA	0xE005    B	L_ControlSensorDamage32
L_ControlSensorDamage31:
;adc_func.c, 150 :: 		bit_set(AnalogSensorDamageControl,2);
0x25BC	0x4813    LDR	R0, [PC, #76]
0x25BE	0x7801    LDRB	R1, [R0, #0]
0x25C0	0x2004    MOVS	R0, #4
0x25C2	0x4301    ORRS	R1, R0
0x25C4	0x4811    LDR	R0, [PC, #68]
0x25C6	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 151 :: 		}
L_ControlSensorDamage32:
;adc_func.c, 153 :: 		}
L_end_ControlSensorDamage:
0x25C8	0xBD00    POP	(R15)
0x25CA	0xBF00    NOP
0x25CC	0x00C82000  	ControlSensorDamage_board_sensor_damage_count1_L0+0
0x25D0	0x00C42000  	ControlSensorDamage_board_sensor_damage_count_L0+0
0x25D4	0x016F2000  	_flag_t+9
0x25D8	0x03E80000  	#1000
0x25DC	0x00242000  	536870948
0x25E0	0x000042C8  	#1120403456
0x25E4	0x0000447A  	#1148846080
0x25E8	0xC000450F  	#1158660096
0x25EC	0x00D02000  	ControlSensorDamage_forward_sensor_damage_count1_L0+0
0x25F0	0x00CC2000  	ControlSensorDamage_forward_sensor_damage_count_L0+0
0x25F4	0x01702000  	_flag_t+10
0x25F8	0x00282000  	536870952
0x25FC	0x00D82000  	ControlSensorDamage_backward_sensor_damage_count1_L0+0
0x2600	0x00D42000  	ControlSensorDamage_backward_sensor_damage_count_L0+0
0x2604	0x01712000  	_flag_t+11
0x2608	0x002C2000  	536870956
0x260C	0x003C2000  	536870972
; end of _ControlSensorDamage
_two_level_comparator_ms:
;compare_func.c, 114 :: 		unsigned int* count_tlc1)
0x0AE0	0xB500    PUSH	(R14)
0x0AE2	0xB089    SUB	SP, SP, #36
0x0AE4	0x9000    STR	R0, [SP, #0]
0x0AE6	0x9101    STR	R1, [SP, #4]
0x0AE8	0x9202    STR	R2, [SP, #8]
0x0AEA	0x9303    STR	R3, [SP, #12]
0x0AEC	0x9C0A    LDR	R4, [SP, #40]
0x0AEE	0xB2A4    UXTH	R4, R4
0x0AF0	0x940A    STR	R4, [SP, #40]
0x0AF2	0x9C0B    LDR	R4, [SP, #44]
0x0AF4	0xB2A4    UXTH	R4, R4
0x0AF6	0x940B    STR	R4, [SP, #44]
0x0AF8	0x9C0C    LDR	R4, [SP, #48]
0x0AFA	0xB2A4    UXTH	R4, R4
0x0AFC	0x940C    STR	R4, [SP, #48]
0x0AFE	0x9C0D    LDR	R4, [SP, #52]
0x0B00	0x940D    STR	R4, [SP, #52]
0x0B02	0x9C0E    LDR	R4, [SP, #56]
0x0B04	0x940E    STR	R4, [SP, #56]
0x0B06	0x9C0F    LDR	R4, [SP, #60]
0x0B08	0x940F    STR	R4, [SP, #60]
;compare_func.c, 116 :: 		if((value>=(high_reference+gisteresis))||(value<=(low_reference-gisteresis)))
0x0B0A	0x9A03    LDR	R2, [SP, #12]
0x0B0C	0x9800    LDR	R0, [SP, #0]
0x0B0E	0xF7FFFD21  BL	__Add_FP+0
0x0B12	0x9A02    LDR	R2, [SP, #8]
0x0B14	0xF7FFFDD6  BL	__Compare_FP+0
0x0B18	0xDC01    BGT	L__two_level_comparator_ms112
0x0B1A	0x2001    MOVS	R0, #1
0x0B1C	0xE000    B	L__two_level_comparator_ms113
L__two_level_comparator_ms112:
0x0B1E	0x2000    MOVS	R0, #0
L__two_level_comparator_ms113:
0x0B20	0x2800    CMP	R0, #0
0x0B22	0xD10D    BNE	L__two_level_comparator_ms69
0x0B24	0x9A03    LDR	R2, [SP, #12]
0x0B26	0x9801    LDR	R0, [SP, #4]
0x0B28	0xF000FF82  BL	__Sub_FP+0
0x0B2C	0x9A02    LDR	R2, [SP, #8]
0x0B2E	0xF7FFFDC9  BL	__Compare_FP+0
0x0B32	0xDB01    BLT	L__two_level_comparator_ms114
0x0B34	0x2001    MOVS	R0, #1
0x0B36	0xE000    B	L__two_level_comparator_ms115
L__two_level_comparator_ms114:
0x0B38	0x2000    MOVS	R0, #0
L__two_level_comparator_ms115:
0x0B3A	0x2800    CMP	R0, #0
0x0B3C	0xD100    BNE	L__two_level_comparator_ms68
0x0B3E	0xE036    B	L_two_level_comparator_ms28
L__two_level_comparator_ms69:
L__two_level_comparator_ms68:
;compare_func.c, 119 :: 		if(++(*count_tlc)>=(delay_on_ms_tlc/ms_in_one_cycle_tlc))
0x0B40	0x9C0E    LDR	R4, [SP, #56]
0x0B42	0x8824    LDRH	R4, [R4, #0]
0x0B44	0x1C65    ADDS	R5, R4, #1
0x0B46	0x9C0E    LDR	R4, [SP, #56]
0x0B48	0x8025    STRH	R5, [R4, #0]
0x0B4A	0x9C0E    LDR	R4, [SP, #56]
0x0B4C	0x8824    LDRH	R4, [R4, #0]
0x0B4E	0x9408    STR	R4, [SP, #32]
0x0B50	0x9A0C    LDR	R2, [SP, #48]
0x0B52	0xB292    UXTH	R2, R2
0x0B54	0x980A    LDR	R0, [SP, #40]
0x0B56	0xB280    UXTH	R0, R0
0x0B58	0xF7FFFDFE  BL	__Div_32x32_U+0
0x0B5C	0xB280    UXTH	R0, R0
0x0B5E	0x9C08    LDR	R4, [SP, #32]
0x0B60	0xB2A4    UXTH	R4, R4
0x0B62	0x4284    CMP	R4, R0
0x0B64	0xD323    BCC	L_two_level_comparator_ms29
;compare_func.c, 121 :: 		*count_tlc  = 0;
0x0B66	0x2500    MOVS	R5, #0
0x0B68	0x9C0E    LDR	R4, [SP, #56]
0x0B6A	0x8025    STRH	R5, [R4, #0]
;compare_func.c, 122 :: 		*count_tlc1 = 0;
0x0B6C	0x2500    MOVS	R5, #0
0x0B6E	0x9C0F    LDR	R4, [SP, #60]
0x0B70	0x8025    STRH	R5, [R4, #0]
;compare_func.c, 123 :: 		if((value>=(high_reference+gisteresis))||(value<=(low_reference-gisteresis)))
0x0B72	0x9A03    LDR	R2, [SP, #12]
0x0B74	0x9800    LDR	R0, [SP, #0]
0x0B76	0xF7FFFCED  BL	__Add_FP+0
0x0B7A	0x9A02    LDR	R2, [SP, #8]
0x0B7C	0xF7FFFDA2  BL	__Compare_FP+0
0x0B80	0xDC01    BGT	L__two_level_comparator_ms116
0x0B82	0x2001    MOVS	R0, #1
0x0B84	0xE000    B	L__two_level_comparator_ms117
L__two_level_comparator_ms116:
0x0B86	0x2000    MOVS	R0, #0
L__two_level_comparator_ms117:
0x0B88	0x2800    CMP	R0, #0
0x0B8A	0xD10D    BNE	L__two_level_comparator_ms71
0x0B8C	0x9A03    LDR	R2, [SP, #12]
0x0B8E	0x9801    LDR	R0, [SP, #4]
0x0B90	0xF000FF4E  BL	__Sub_FP+0
0x0B94	0x9A02    LDR	R2, [SP, #8]
0x0B96	0xF7FFFD95  BL	__Compare_FP+0
0x0B9A	0xDB01    BLT	L__two_level_comparator_ms118
0x0B9C	0x2001    MOVS	R0, #1
0x0B9E	0xE000    B	L__two_level_comparator_ms119
L__two_level_comparator_ms118:
0x0BA0	0x2000    MOVS	R0, #0
L__two_level_comparator_ms119:
0x0BA2	0x2800    CMP	R0, #0
0x0BA4	0xD100    BNE	L__two_level_comparator_ms70
0x0BA6	0xE002    B	L_two_level_comparator_ms32
L__two_level_comparator_ms71:
L__two_level_comparator_ms70:
;compare_func.c, 125 :: 		*status_tlc = 0;
0x0BA8	0x2500    MOVS	R5, #0
0x0BAA	0x9C0D    LDR	R4, [SP, #52]
0x0BAC	0x7025    STRB	R5, [R4, #0]
;compare_func.c, 126 :: 		}
L_two_level_comparator_ms32:
;compare_func.c, 128 :: 		}
L_two_level_comparator_ms29:
;compare_func.c, 130 :: 		}
L_two_level_comparator_ms28:
;compare_func.c, 132 :: 		if((value<=(high_reference-gisteresis))&&(value>=(low_reference+gisteresis)))
0x0BAE	0x9A03    LDR	R2, [SP, #12]
0x0BB0	0x9800    LDR	R0, [SP, #0]
0x0BB2	0xF000FF3D  BL	__Sub_FP+0
0x0BB6	0x9A02    LDR	R2, [SP, #8]
0x0BB8	0xF7FFFD84  BL	__Compare_FP+0
0x0BBC	0xDB01    BLT	L__two_level_comparator_ms120
0x0BBE	0x2001    MOVS	R0, #1
0x0BC0	0xE000    B	L__two_level_comparator_ms121
L__two_level_comparator_ms120:
0x0BC2	0x2000    MOVS	R0, #0
L__two_level_comparator_ms121:
0x0BC4	0x2800    CMP	R0, #0
0x0BC6	0xD042    BEQ	L__two_level_comparator_ms75
0x0BC8	0x9A03    LDR	R2, [SP, #12]
0x0BCA	0x9801    LDR	R0, [SP, #4]
0x0BCC	0xF7FFFCC2  BL	__Add_FP+0
0x0BD0	0x9A02    LDR	R2, [SP, #8]
0x0BD2	0xF7FFFD77  BL	__Compare_FP+0
0x0BD6	0xDC01    BGT	L__two_level_comparator_ms122
0x0BD8	0x2001    MOVS	R0, #1
0x0BDA	0xE000    B	L__two_level_comparator_ms123
L__two_level_comparator_ms122:
0x0BDC	0x2000    MOVS	R0, #0
L__two_level_comparator_ms123:
0x0BDE	0x2800    CMP	R0, #0
0x0BE0	0xD035    BEQ	L__two_level_comparator_ms74
L__two_level_comparator_ms65:
;compare_func.c, 135 :: 		if(++(*count_tlc1)>=(delay_off_ms_tlc/ms_in_one_cycle_tlc))
0x0BE2	0x9C0F    LDR	R4, [SP, #60]
0x0BE4	0x8824    LDRH	R4, [R4, #0]
0x0BE6	0x1C65    ADDS	R5, R4, #1
0x0BE8	0x9C0F    LDR	R4, [SP, #60]
0x0BEA	0x8025    STRH	R5, [R4, #0]
0x0BEC	0x9C0F    LDR	R4, [SP, #60]
0x0BEE	0x8824    LDRH	R4, [R4, #0]
0x0BF0	0x9408    STR	R4, [SP, #32]
0x0BF2	0x9A0C    LDR	R2, [SP, #48]
0x0BF4	0xB292    UXTH	R2, R2
0x0BF6	0x980B    LDR	R0, [SP, #44]
0x0BF8	0xB280    UXTH	R0, R0
0x0BFA	0xF7FFFDAD  BL	__Div_32x32_U+0
0x0BFE	0xB280    UXTH	R0, R0
0x0C00	0x9C08    LDR	R4, [SP, #32]
0x0C02	0xB2A4    UXTH	R4, R4
0x0C04	0x4284    CMP	R4, R0
0x0C06	0xD322    BCC	L_two_level_comparator_ms36
;compare_func.c, 137 :: 		*count_tlc = 0;
0x0C08	0x2500    MOVS	R5, #0
0x0C0A	0x9C0E    LDR	R4, [SP, #56]
0x0C0C	0x8025    STRH	R5, [R4, #0]
;compare_func.c, 138 :: 		*count_tlc1=0;
0x0C0E	0x2500    MOVS	R5, #0
0x0C10	0x9C0F    LDR	R4, [SP, #60]
0x0C12	0x8025    STRH	R5, [R4, #0]
;compare_func.c, 139 :: 		if((value<=(high_reference-gisteresis))&&(value>=(low_reference+gisteresis)))
0x0C14	0x9A03    LDR	R2, [SP, #12]
0x0C16	0x9800    LDR	R0, [SP, #0]
0x0C18	0xF000FF0A  BL	__Sub_FP+0
0x0C1C	0x9A02    LDR	R2, [SP, #8]
0x0C1E	0xF7FFFD51  BL	__Compare_FP+0
0x0C22	0xDB01    BLT	L__two_level_comparator_ms124
0x0C24	0x2001    MOVS	R0, #1
0x0C26	0xE000    B	L__two_level_comparator_ms125
L__two_level_comparator_ms124:
0x0C28	0x2000    MOVS	R0, #0
L__two_level_comparator_ms125:
0x0C2A	0x2800    CMP	R0, #0
0x0C2C	0xD00F    BEQ	L__two_level_comparator_ms73
0x0C2E	0x9A03    LDR	R2, [SP, #12]
0x0C30	0x9801    LDR	R0, [SP, #4]
0x0C32	0xF7FFFC8F  BL	__Add_FP+0
0x0C36	0x9A02    LDR	R2, [SP, #8]
0x0C38	0xF7FFFD44  BL	__Compare_FP+0
0x0C3C	0xDC01    BGT	L__two_level_comparator_ms126
0x0C3E	0x2001    MOVS	R0, #1
0x0C40	0xE000    B	L__two_level_comparator_ms127
L__two_level_comparator_ms126:
0x0C42	0x2000    MOVS	R0, #0
L__two_level_comparator_ms127:
0x0C44	0x2800    CMP	R0, #0
0x0C46	0xD002    BEQ	L__two_level_comparator_ms72
L__two_level_comparator_ms64:
;compare_func.c, 141 :: 		*status_tlc = 1;
0x0C48	0x2501    MOVS	R5, #1
0x0C4A	0x9C0D    LDR	R4, [SP, #52]
0x0C4C	0x7025    STRB	R5, [R4, #0]
;compare_func.c, 139 :: 		if((value<=(high_reference-gisteresis))&&(value>=(low_reference+gisteresis)))
L__two_level_comparator_ms73:
L__two_level_comparator_ms72:
;compare_func.c, 144 :: 		}
L_two_level_comparator_ms36:
;compare_func.c, 132 :: 		if((value<=(high_reference-gisteresis))&&(value>=(low_reference+gisteresis)))
L__two_level_comparator_ms75:
L__two_level_comparator_ms74:
;compare_func.c, 146 :: 		}
L_end_two_level_comparator_ms:
0x0C4E	0xB009    ADD	SP, SP, #36
0x0C50	0xBD00    POP	(R15)
; end of _two_level_comparator_ms
_getDamageSensorStatus:
;adc_func.c, 155 :: 		unsigned char getDamageSensorStatus()
0x09C8	0xB500    PUSH	(R14)
;adc_func.c, 157 :: 		return (unsigned char)((!flag_t.board_sensor_damage)||(!flag_t.forward_sensor_damage)||(!flag_t.backward_sensor_damage));
0x09CA	0x4808    LDR	R0, [PC, #32]
0x09CC	0x7800    LDRB	R0, [R0, #0]
0x09CE	0x2800    CMP	R0, #0
0x09D0	0xD009    BEQ	L_getDamageSensorStatus34
0x09D2	0x4807    LDR	R0, [PC, #28]
0x09D4	0x7800    LDRB	R0, [R0, #0]
0x09D6	0x2800    CMP	R0, #0
0x09D8	0xD005    BEQ	L_getDamageSensorStatus34
0x09DA	0x4806    LDR	R0, [PC, #24]
0x09DC	0x7800    LDRB	R0, [R0, #0]
0x09DE	0x2800    CMP	R0, #0
0x09E0	0xD001    BEQ	L_getDamageSensorStatus34
0x09E2	0x2000    MOVS	R0, #0
0x09E4	0xE000    B	L_getDamageSensorStatus33
L_getDamageSensorStatus34:
0x09E6	0x2001    MOVS	R0, #1
L_getDamageSensorStatus33:
;adc_func.c, 158 :: 		}
L_end_getDamageSensorStatus:
0x09E8	0xBD00    POP	(R15)
0x09EA	0xBF00    NOP
0x09EC	0x016F2000  	_flag_t+9
0x09F0	0x01702000  	_flag_t+10
0x09F4	0x01712000  	_flag_t+11
; end of _getDamageSensorStatus
_ControlCalibrate:
;adc_func.c, 339 :: 		void ControlCalibrate(long delay_sec)
; delay_sec start address is: 0 (R0)
0x27C8	0xB500    PUSH	(R14)
0x27CA	0x4604    MOV	R4, R0
; delay_sec end address is: 0 (R0)
; delay_sec start address is: 16 (R4)
;adc_func.c, 344 :: 		if(getAdcStatus())
0x27CC	0xF7FEF8D2  BL	_getAdcStatus+0
0x27D0	0x2800    CMP	R0, #0
0x27D2	0xD005    BEQ	L_ControlCalibrate68
;adc_func.c, 346 :: 		start_delay_status = SET;
0x27D4	0x2201    MOVS	R2, #1
0x27D6	0x4916    LDR	R1, [PC, #88]
0x27D8	0x700A    STRB	R2, [R1, #0]
;adc_func.c, 347 :: 		wait_count = 0;
0x27DA	0x2200    MOVS	R2, #0
0x27DC	0x4915    LDR	R1, [PC, #84]
0x27DE	0x600A    STR	R2, [R1, #0]
;adc_func.c, 348 :: 		}
L_ControlCalibrate68:
;adc_func.c, 349 :: 		if(start_delay_status)
0x27E0	0x4913    LDR	R1, [PC, #76]
0x27E2	0x7809    LDRB	R1, [R1, #0]
0x27E4	0x2900    CMP	R1, #0
0x27E6	0xD022    BEQ	L_ControlCalibrate69
;adc_func.c, 351 :: 		if((wait_count++)>= (delay_sec*100))
0x27E8	0x4A12    LDR	R2, [PC, #72]
0x27EA	0x6813    LDR	R3, [R2, #0]
0x27EC	0x4611    MOV	R1, R2
0x27EE	0x6809    LDR	R1, [R1, #0]
0x27F0	0x3101    ADDS	R1, #1
0x27F2	0x6011    STR	R1, [R2, #0]
0x27F4	0x2264    MOVS	R2, #100
0x27F6	0x4611    MOV	R1, R2
0x27F8	0x4361    MULS	R1, R4, R1
; delay_sec end address is: 16 (R4)
0x27FA	0x428B    CMP	R3, R1
0x27FC	0xDB17    BLT	L_ControlCalibrate70
;adc_func.c, 353 :: 		if(getRcalAdcStatus())
0x27FE	0xF7FEF8FB  BL	_getRcalAdcStatus+0
0x2802	0x2800    CMP	R0, #0
0x2804	0xD003    BEQ	L_ControlCalibrate71
;adc_func.c, 355 :: 		wait_count = 0;
0x2806	0x2200    MOVS	R2, #0
0x2808	0x490A    LDR	R1, [PC, #40]
0x280A	0x600A    STR	R2, [R1, #0]
;adc_func.c, 356 :: 		}
0x280C	0xE00F    B	L_ControlCalibrate72
L_ControlCalibrate71:
;adc_func.c, 359 :: 		wait_count = 0;
0x280E	0x2200    MOVS	R2, #0
0x2810	0x4908    LDR	R1, [PC, #32]
0x2812	0x600A    STR	R2, [R1, #0]
;adc_func.c, 360 :: 		start_delay_status = 0;
0x2814	0x2200    MOVS	R2, #0
0x2816	0x4906    LDR	R1, [PC, #24]
0x2818	0x700A    STRB	R2, [R1, #0]
;adc_func.c, 361 :: 		flag_t.calibrate_status = SET;
0x281A	0x2201    MOVS	R2, #1
0x281C	0x4906    LDR	R1, [PC, #24]
0x281E	0x700A    STRB	R2, [R1, #0]
;adc_func.c, 362 :: 		flag_t.recalibrate = SET;
0x2820	0x2201    MOVS	R2, #1
0x2822	0x4906    LDR	R1, [PC, #24]
0x2824	0x700A    STRB	R2, [R1, #0]
;adc_func.c, 363 :: 		resetLB();
0x2826	0xF7FEFD17  BL	_resetLB+0
;adc_func.c, 364 :: 		Recalibrate();
0x282A	0xF7FEFD2F  BL	_Recalibrate+0
;adc_func.c, 365 :: 		}
L_ControlCalibrate72:
;adc_func.c, 366 :: 		}
L_ControlCalibrate70:
;adc_func.c, 367 :: 		}
L_ControlCalibrate69:
;adc_func.c, 368 :: 		}
L_end_ControlCalibrate:
0x282E	0xBD00    POP	(R15)
0x2830	0x00E02000  	ControlCalibrate_start_delay_status_L0+0
0x2834	0x00DC2000  	ControlCalibrate_wait_count_L0+0
0x2838	0x01722000  	_flag_t+12
0x283C	0x01732000  	_flag_t+13
; end of _ControlCalibrate
_getRcalAdcStatus:
;adc_func.c, 370 :: 		unsigned char getRcalAdcStatus()
0x09F8	0xB500    PUSH	(R14)
;adc_func.c, 372 :: 		return  (flag_t.board_cal_status||flag_t.forward_cal_status||flag_t.backward_cal_status);
0x09FA	0x4808    LDR	R0, [PC, #32]
0x09FC	0x7800    LDRB	R0, [R0, #0]
0x09FE	0x2800    CMP	R0, #0
0x0A00	0xD109    BNE	L_getRcalAdcStatus74
0x0A02	0x4807    LDR	R0, [PC, #28]
0x0A04	0x7800    LDRB	R0, [R0, #0]
0x0A06	0x2800    CMP	R0, #0
0x0A08	0xD105    BNE	L_getRcalAdcStatus74
0x0A0A	0x4806    LDR	R0, [PC, #24]
0x0A0C	0x7800    LDRB	R0, [R0, #0]
0x0A0E	0x2800    CMP	R0, #0
0x0A10	0xD101    BNE	L_getRcalAdcStatus74
0x0A12	0x2000    MOVS	R0, #0
0x0A14	0xE000    B	L_getRcalAdcStatus73
L_getRcalAdcStatus74:
0x0A16	0x2001    MOVS	R0, #1
L_getRcalAdcStatus73:
;adc_func.c, 373 :: 		}
L_end_getRcalAdcStatus:
0x0A18	0xBD00    POP	(R15)
0x0A1A	0xBF00    NOP
0x0A1C	0x01742000  	_flag_t+14
0x0A20	0x01752000  	_flag_t+15
0x0A24	0x01762000  	_flag_t+16
; end of _getRcalAdcStatus
_resetLB:
;alarm_func.c, 199 :: 		void resetLB()
;alarm_func.c, 201 :: 		LED_RED        = OFF;
0x1258	0x4A09    LDR	R2, [PC, #36]
0x125A	0x6810    LDR	R0, [R2, #0]
0x125C	0x2101    MOVS	R1, #1
0x125E	0x0009    LSLS	R1, R1, BitPos(LED_RED+0)
0x1260	0x4388    BICS	R0, R1
0x1262	0x6010    STR	R0, [R2, #0]
;alarm_func.c, 202 :: 		LED_GREEN      = OFF;
0x1264	0x4A07    LDR	R2, [PC, #28]
0x1266	0x6810    LDR	R0, [R2, #0]
0x1268	0x2101    MOVS	R1, #1
0x126A	0x00C9    LSLS	R1, R1, BitPos(LED_GREEN+0)
0x126C	0x4388    BICS	R0, R1
0x126E	0x6010    STR	R0, [R2, #0]
;alarm_func.c, 203 :: 		BUZER          = OFF;
0x1270	0x4A05    LDR	R2, [PC, #20]
0x1272	0x6810    LDR	R0, [R2, #0]
0x1274	0x2101    MOVS	R1, #1
0x1276	0x0049    LSLS	R1, R1, BitPos(BUZER+0)
0x1278	0x4388    BICS	R0, R1
0x127A	0x6010    STR	R0, [R2, #0]
;alarm_func.c, 204 :: 		}
L_end_resetLB:
0x127C	0x4770    BX	LR
0x127E	0xBF00    NOP
0x1280	0x04144800  	LED_RED+0
0x1284	0x04144800  	LED_GREEN+0
0x1288	0x04144800  	BUZER+0
; end of _resetLB
_Recalibrate:
;func.c, 250 :: 		void Recalibrate()
0x128C	0xB500    PUSH	(R14)
;func.c, 252 :: 		setState(getV0);
0x128E	0x2008    MOVS	R0, #8
0x1290	0xF001FF2E  BL	_setState+0
;func.c, 253 :: 		}
L_end_Recalibrate:
0x1294	0xBD00    POP	(R15)
; end of _Recalibrate
_ControlRecalFlags:
;adc_func.c, 375 :: 		void ControlRecalFlags()
0x2840	0xB500    PUSH	(R14)
;adc_func.c, 381 :: 		if(ControlData())
0x2842	0xF7FEFCDB  BL	_ControlData+0
0x2846	0x2800    CMP	R0, #0
0x2848	0xD100    BNE	#0
0x284A	0xE038    B	L_ControlRecalFlags75
;adc_func.c, 385 :: 		&board_cal_count,&board_cal_count1);
0x284C	0x4D1C    LDR	R5, [PC, #112]
0x284E	0x4C1D    LDR	R4, [PC, #116]
;adc_func.c, 384 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.board_cal_status,
0x2850	0x4B1D    LDR	R3, [PC, #116]
0x2852	0x220A    MOVS	R2, #10
0x2854	0x491D    LDR	R1, [PC, #116]
;adc_func.c, 383 :: 		one_level_comparator_ms(ALARM_LEVEL/4.0,BoardSensorPPM,ANALOG_GISTERESIS,
0x2856	0x481E    LDR	R0, [PC, #120]
0x2858	0x6800    LDR	R0, [R0, #0]
;adc_func.c, 385 :: 		&board_cal_count,&board_cal_count1);
0x285A	0xB420    PUSH	(R5)
0x285C	0xB410    PUSH	(R4)
;adc_func.c, 384 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.board_cal_status,
0x285E	0xB408    PUSH	(R3)
0x2860	0xB404    PUSH	(R2)
0x2862	0xB402    PUSH	(R1)
0x2864	0x4B19    LDR	R3, [PC, #100]
;adc_func.c, 383 :: 		one_level_comparator_ms(ALARM_LEVEL/4.0,BoardSensorPPM,ANALOG_GISTERESIS,
0x2866	0x4A1B    LDR	R2, [PC, #108]
0x2868	0x4601    MOV	R1, R0
0x286A	0x481B    LDR	R0, [PC, #108]
;adc_func.c, 385 :: 		&board_cal_count,&board_cal_count1);
;adc_func.c, 384 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.board_cal_status,
;adc_func.c, 385 :: 		&board_cal_count,&board_cal_count1);
0x286C	0xF7FEFABC  BL	_one_level_comparator_ms+0
0x2870	0xB005    ADD	SP, SP, #20
;adc_func.c, 389 :: 		&forward_cal_count,&forward_cal_count1);
0x2872	0x4D1A    LDR	R5, [PC, #104]
0x2874	0x4C1A    LDR	R4, [PC, #104]
;adc_func.c, 388 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.forward_cal_status,
0x2876	0x4B1B    LDR	R3, [PC, #108]
0x2878	0x220A    MOVS	R2, #10
0x287A	0x4914    LDR	R1, [PC, #80]
;adc_func.c, 387 :: 		one_level_comparator_ms(ALARM_LEVEL/4.0,ForwardSensorPPM,ANALOG_GISTERESIS,
0x287C	0x481A    LDR	R0, [PC, #104]
0x287E	0x6800    LDR	R0, [R0, #0]
;adc_func.c, 389 :: 		&forward_cal_count,&forward_cal_count1);
0x2880	0xB420    PUSH	(R5)
0x2882	0xB410    PUSH	(R4)
;adc_func.c, 388 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.forward_cal_status,
0x2884	0xB408    PUSH	(R3)
0x2886	0xB404    PUSH	(R2)
0x2888	0xB402    PUSH	(R1)
0x288A	0x4B10    LDR	R3, [PC, #64]
;adc_func.c, 387 :: 		one_level_comparator_ms(ALARM_LEVEL/4.0,ForwardSensorPPM,ANALOG_GISTERESIS,
0x288C	0x4A11    LDR	R2, [PC, #68]
0x288E	0x4601    MOV	R1, R0
0x2890	0x4811    LDR	R0, [PC, #68]
;adc_func.c, 389 :: 		&forward_cal_count,&forward_cal_count1);
;adc_func.c, 388 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.forward_cal_status,
;adc_func.c, 389 :: 		&forward_cal_count,&forward_cal_count1);
0x2892	0xF7FEFAA9  BL	_one_level_comparator_ms+0
0x2896	0xB005    ADD	SP, SP, #20
;adc_func.c, 393 :: 		&backward_cal_count,&backward_cal_count1);
0x2898	0x4D14    LDR	R5, [PC, #80]
0x289A	0x4C15    LDR	R4, [PC, #84]
;adc_func.c, 392 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.backward_cal_status,
0x289C	0x4B15    LDR	R3, [PC, #84]
0x289E	0x220A    MOVS	R2, #10
0x28A0	0x490A    LDR	R1, [PC, #40]
;adc_func.c, 391 :: 		one_level_comparator_ms(ALARM_LEVEL/4.0,BackwardSensorPPM,ANALOG_GISTERESIS,
0x28A2	0x4815    LDR	R0, [PC, #84]
0x28A4	0x6800    LDR	R0, [R0, #0]
;adc_func.c, 393 :: 		&backward_cal_count,&backward_cal_count1);
0x28A6	0xB420    PUSH	(R5)
0x28A8	0xB410    PUSH	(R4)
;adc_func.c, 392 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.backward_cal_status,
0x28AA	0xB408    PUSH	(R3)
0x28AC	0xB404    PUSH	(R2)
0x28AE	0xB402    PUSH	(R1)
0x28B0	0x4B06    LDR	R3, [PC, #24]
;adc_func.c, 391 :: 		one_level_comparator_ms(ALARM_LEVEL/4.0,BackwardSensorPPM,ANALOG_GISTERESIS,
0x28B2	0x4A08    LDR	R2, [PC, #32]
0x28B4	0x4601    MOV	R1, R0
0x28B6	0x4808    LDR	R0, [PC, #32]
;adc_func.c, 393 :: 		&backward_cal_count,&backward_cal_count1);
;adc_func.c, 392 :: 		ANALOG_DELAY_ON,ANALOG_DELAY_OFF,MS_IN_CYCLE,&flag_t.backward_cal_status,
;adc_func.c, 393 :: 		&backward_cal_count,&backward_cal_count1);
0x28B8	0xF7FEFA96  BL	_one_level_comparator_ms+0
0x28BC	0xB005    ADD	SP, SP, #20
;adc_func.c, 394 :: 		}
L_ControlRecalFlags75:
;adc_func.c, 395 :: 		}
L_end_ControlRecalFlags:
0x28BE	0xBD00    POP	(R15)
0x28C0	0x00E82000  	ControlRecalFlags_board_cal_count1_L0+0
0x28C4	0x00E42000  	ControlRecalFlags_board_cal_count_L0+0
0x28C8	0x01742000  	_flag_t+14
0x28CC	0x03E80000  	#1000
0x28D0	0x000C2000  	536870924
0x28D4	0x00004348  	#1128792064
0x28D8	0x000044FA  	#1157234688
0x28DC	0x00F02000  	ControlRecalFlags_forward_cal_count1_L0+0
0x28E0	0x00EC2000  	ControlRecalFlags_forward_cal_count_L0+0
0x28E4	0x01752000  	_flag_t+15
0x28E8	0x00102000  	536870928
0x28EC	0x00F82000  	ControlRecalFlags_backward_cal_count1_L0+0
0x28F0	0x00F42000  	ControlRecalFlags_backward_cal_count_L0+0
0x28F4	0x01762000  	_flag_t+16
0x28F8	0x00142000  	536870932
; end of _ControlRecalFlags
_ControlData:
;adc_func.c, 247 :: 		unsigned char ControlData()
0x11FC	0xB500    PUSH	(R14)
;adc_func.c, 250 :: 		(parameters_t.backward_sensor_ready==READY_DATA)&&
0x11FE	0x4809    LDR	R0, [PC, #36]
0x1200	0x8801    LDRH	R1, [R0, #0]
0x1202	0x4809    LDR	R0, [PC, #36]
0x1204	0x4281    CMP	R1, R0
0x1206	0xD10B    BNE	L_ControlData49
0x1208	0x4808    LDR	R0, [PC, #32]
0x120A	0x8801    LDRH	R1, [R0, #0]
0x120C	0x4806    LDR	R0, [PC, #24]
0x120E	0x4281    CMP	R1, R0
0x1210	0xD106    BNE	L_ControlData49
;adc_func.c, 251 :: 		(parameters_t.board_sensor_ready==READY_DATA));
0x1212	0x4807    LDR	R0, [PC, #28]
0x1214	0x8801    LDRH	R1, [R0, #0]
0x1216	0x4804    LDR	R0, [PC, #16]
0x1218	0x4281    CMP	R1, R0
0x121A	0xD101    BNE	L_ControlData49
0x121C	0x2001    MOVS	R0, #1
0x121E	0xE000    B	L_ControlData48
L_ControlData49:
0x1220	0x2000    MOVS	R0, #0
L_ControlData48:
;adc_func.c, 252 :: 		}
L_end_ControlData:
0x1222	0xBD00    POP	(R15)
0x1224	0x018A2000  	_parameters_t+12
0x1228	0xAAAA0000  	#43690
0x122C	0x018C2000  	_parameters_t+14
0x1230	0x018E2000  	_parameters_t+16
; end of _ControlData
_controlCalibration:
;func.c, 118 :: 		void controlCalibration()
0x2610	0xB500    PUSH	(R14)
;func.c, 123 :: 		setAdcControlStatus(RESET);
0x2612	0x2000    MOVS	R0, #0
0x2614	0xF7FEFEB8  BL	_setAdcControlStatus+0
;func.c, 125 :: 		ReadAnalogInput();
0x2618	0xF000FADA  BL	_ReadAnalogInput+0
;func.c, 126 :: 		LED_RED      =  ON;
0x261C	0x4A2B    LDR	R2, [PC, #172]
0x261E	0x6810    LDR	R0, [R2, #0]
0x2620	0x2101    MOVS	R1, #1
0x2622	0x0009    LSLS	R1, R1, BitPos(LED_RED+0)
0x2624	0x4308    ORRS	R0, R1
0x2626	0x6010    STR	R0, [R2, #0]
;func.c, 128 :: 		switch(start_buz++)
0x2628	0x4929    LDR	R1, [PC, #164]
0x262A	0x880B    LDRH	R3, [R1, #0]
0x262C	0x4608    MOV	R0, R1
0x262E	0x8800    LDRH	R0, [R0, #0]
0x2630	0x3001    ADDS	R0, #1
0x2632	0x8008    STRH	R0, [R1, #0]
0x2634	0xE00D    B	L_controlCalibration21
;func.c, 130 :: 		case 1:   BUZER = ON;          break;
L_controlCalibration23:
0x2636	0x4A27    LDR	R2, [PC, #156]
0x2638	0x6810    LDR	R0, [R2, #0]
0x263A	0x2101    MOVS	R1, #1
0x263C	0x0049    LSLS	R1, R1, BitPos(BUZER+0)
0x263E	0x4308    ORRS	R0, R1
0x2640	0x6010    STR	R0, [R2, #0]
0x2642	0xE00A    B	L_controlCalibration22
;func.c, 131 :: 		case 51:  BUZER = OFF;         break;
L_controlCalibration24:
0x2644	0x4A23    LDR	R2, [PC, #140]
0x2646	0x6810    LDR	R0, [R2, #0]
0x2648	0x2101    MOVS	R1, #1
0x264A	0x0049    LSLS	R1, R1, BitPos(BUZER+0)
0x264C	0x4388    BICS	R0, R1
0x264E	0x6010    STR	R0, [R2, #0]
0x2650	0xE003    B	L_controlCalibration22
;func.c, 132 :: 		}
L_controlCalibration21:
0x2652	0x2B01    CMP	R3, #1
0x2654	0xD0EF    BEQ	L_controlCalibration23
0x2656	0x2B33    CMP	R3, #51
0x2658	0xD0F4    BEQ	L_controlCalibration24
L_controlCalibration22:
;func.c, 134 :: 		if((start_control_count++)>=500&&start_control_cal==RESET)
0x265A	0x4A1F    LDR	R2, [PC, #124]
0x265C	0x8811    LDRH	R1, [R2, #0]
0x265E	0x4610    MOV	R0, R2
0x2660	0x8800    LDRH	R0, [R0, #0]
0x2662	0x3001    ADDS	R0, #1
0x2664	0x8010    STRH	R0, [R2, #0]
0x2666	0x20FF    MOVS	R0, #255
0x2668	0x30F5    ADDS	R0, #245
0x266A	0x4281    CMP	R1, R0
0x266C	0xD30C    BCC	L__controlCalibration62
0x266E	0x481B    LDR	R0, [PC, #108]
0x2670	0x7800    LDRB	R0, [R0, #0]
0x2672	0x2800    CMP	R0, #0
0x2674	0xD108    BNE	L__controlCalibration61
L__controlCalibration60:
;func.c, 136 :: 		start_control_count = 0;
0x2676	0x2100    MOVS	R1, #0
0x2678	0x4817    LDR	R0, [PC, #92]
0x267A	0x8001    STRH	R1, [R0, #0]
;func.c, 137 :: 		start_buz = 0;
0x267C	0x2100    MOVS	R1, #0
0x267E	0x4814    LDR	R0, [PC, #80]
0x2680	0x8001    STRH	R1, [R0, #0]
;func.c, 138 :: 		start_control_cal = SET;
0x2682	0x2101    MOVS	R1, #1
0x2684	0x4815    LDR	R0, [PC, #84]
0x2686	0x7001    STRB	R1, [R0, #0]
;func.c, 134 :: 		if((start_control_count++)>=500&&start_control_cal==RESET)
L__controlCalibration62:
L__controlCalibration61:
;func.c, 140 :: 		if(start_control_cal==SET)
0x2688	0x4814    LDR	R0, [PC, #80]
0x268A	0x7800    LDRB	R0, [R0, #0]
0x268C	0x2801    CMP	R0, #1
0x268E	0xD11B    BNE	L_controlCalibration28
;func.c, 142 :: 		if(read_data_from_eeprom(EEPROM_DATA_SIZE)==SET)
0x2690	0x200D    MOVS	R0, #13
0x2692	0xF7FEFE01  BL	_read_data_from_eeprom+0
0x2696	0x2801    CMP	R0, #1
0x2698	0xD10B    BNE	L_controlCalibration29
;func.c, 144 :: 		resetLB();
0x269A	0xF7FEFDDD  BL	_resetLB+0
;func.c, 145 :: 		start_control_cal = RESET;
0x269E	0x2100    MOVS	R1, #0
0x26A0	0x480E    LDR	R0, [PC, #56]
0x26A2	0x7001    STRB	R1, [R0, #0]
;func.c, 146 :: 		flag_t.calibrate_status = RESET;
0x26A4	0x2100    MOVS	R1, #0
0x26A6	0x480E    LDR	R0, [PC, #56]
0x26A8	0x7001    STRB	R1, [R0, #0]
;func.c, 147 :: 		setState(error_calibration);
0x26AA	0x2002    MOVS	R0, #2
0x26AC	0xF000FD20  BL	_setState+0
;func.c, 148 :: 		}
0x26B0	0xE00A    B	L_controlCalibration30
L_controlCalibration29:
;func.c, 151 :: 		start_control_cal = RESET;
0x26B2	0x2100    MOVS	R1, #0
0x26B4	0x4809    LDR	R0, [PC, #36]
0x26B6	0x7001    STRB	R1, [R0, #0]
;func.c, 152 :: 		resetLB();
0x26B8	0xF7FEFDCE  BL	_resetLB+0
;func.c, 156 :: 		flag_t.calibrate_status = SET;
0x26BC	0x2101    MOVS	R1, #1
0x26BE	0x4808    LDR	R0, [PC, #32]
0x26C0	0x7001    STRB	R1, [R0, #0]
;func.c, 157 :: 		setState(start_sound);
0x26C2	0x2005    MOVS	R0, #5
0x26C4	0xF000FD14  BL	_setState+0
;func.c, 158 :: 		}
L_controlCalibration30:
;func.c, 159 :: 		}
L_controlCalibration28:
;func.c, 160 :: 		}
L_end_controlCalibration:
0x26C8	0xBD00    POP	(R15)
0x26CA	0xBF00    NOP
0x26CC	0x04144800  	LED_RED+0
0x26D0	0x01042000  	controlCalibration_start_buz_L0+0
0x26D4	0x04144800  	BUZER+0
0x26D8	0x01002000  	controlCalibration_start_control_count_L0+0
0x26DC	0x00FC2000  	controlCalibration_start_control_cal_L0+0
0x26E0	0x01722000  	_flag_t+12
; end of _controlCalibration
_setAdcControlStatus:
;adc_func.c, 600 :: 		void setAdcControlStatus(unsigned char status)
; status start address is: 0 (R0)
0x1388	0xB500    PUSH	(R14)
; status end address is: 0 (R0)
; status start address is: 0 (R0)
;adc_func.c, 602 :: 		if(status)
0x138A	0x2800    CMP	R0, #0
0x138C	0xD003    BEQ	L_setAdcControlStatus122
; status end address is: 0 (R0)
;adc_func.c, 604 :: 		flag_t.start_sensor_control = SET;
0x138E	0x2201    MOVS	R2, #1
0x1390	0x4903    LDR	R1, [PC, #12]
0x1392	0x700A    STRB	R2, [R1, #0]
;adc_func.c, 605 :: 		}
0x1394	0xE002    B	L_setAdcControlStatus123
L_setAdcControlStatus122:
;adc_func.c, 608 :: 		flag_t.start_sensor_control = RESET;
0x1396	0x2200    MOVS	R2, #0
0x1398	0x4901    LDR	R1, [PC, #4]
0x139A	0x700A    STRB	R2, [R1, #0]
;adc_func.c, 609 :: 		}
L_setAdcControlStatus123:
;adc_func.c, 610 :: 		}
L_end_setAdcControlStatus:
0x139C	0xBD00    POP	(R15)
0x139E	0xBF00    NOP
0x13A0	0x016B2000  	_flag_t+5
; end of _setAdcControlStatus
_read_data_from_eeprom:
;eeprom_func.c, 85 :: 		char read_data_from_eeprom(unsigned char len_array)
; len_array start address is: 0 (R0)
0x1298	0xB500    PUSH	(R14)
0x129A	0xB081    SUB	SP, SP, #4
0x129C	0xB2C2    UXTB	R2, R0
; len_array end address is: 0 (R0)
; len_array start address is: 8 (R2)
;eeprom_func.c, 87 :: 		unsigned char position = 0;
;eeprom_func.c, 88 :: 		unsigned int temp = 0,crc=0;
;eeprom_func.c, 92 :: 		array_struct = (unsigned long*)&parameters_t;
; array_struct start address is: 16 (R4)
0x129E	0x4C22    LDR	R4, [PC, #136]
;eeprom_func.c, 93 :: 		ptr = (unsigned long*)ADDRESS;
0x12A0	0x4922    LDR	R1, [PC, #136]
; ptr start address is: 12 (R3)
0x12A2	0x680B    LDR	R3, [R1, #0]
;eeprom_func.c, 94 :: 		DisableInterrupts();
0x12A4	0xF000FA78  BL	_DisableInterrupts+0
;eeprom_func.c, 95 :: 		for(position=0; position<len_array; position++)
; position start address is: 0 (R0)
0x12A8	0x2000    MOVS	R0, #0
; len_array end address is: 8 (R2)
; position end address is: 0 (R0)
; ptr end address is: 12 (R3)
; array_struct end address is: 16 (R4)
0x12AA	0x9000    STR	R0, [SP, #0]
0x12AC	0xB2D0    UXTB	R0, R2
0x12AE	0x9A00    LDR	R2, [SP, #0]
0x12B0	0xB2D2    UXTB	R2, R2
L_read_data_from_eeprom10:
; position start address is: 8 (R2)
; ptr start address is: 12 (R3)
; array_struct start address is: 16 (R4)
; len_array start address is: 0 (R0)
0x12B2	0x4282    CMP	R2, R0
0x12B4	0xD207    BCS	L_read_data_from_eeprom11
;eeprom_func.c, 97 :: 		(*array_struct) = (unsigned int)(*ptr);
0x12B6	0x6819    LDR	R1, [R3, #0]
0x12B8	0xB289    UXTH	R1, R1
0x12BA	0x8021    STRH	R1, [R4, #0]
;eeprom_func.c, 98 :: 		ptr++;
0x12BC	0x3304    ADDS	R3, #4
;eeprom_func.c, 99 :: 		array_struct++;
0x12BE	0x3402    ADDS	R4, #2
;eeprom_func.c, 95 :: 		for(position=0; position<len_array; position++)
0x12C0	0x3201    ADDS	R2, #1
0x12C2	0xB2D2    UXTB	R2, R2
;eeprom_func.c, 100 :: 		}
; len_array end address is: 0 (R0)
; ptr end address is: 12 (R3)
; array_struct end address is: 16 (R4)
; position end address is: 8 (R2)
0x12C4	0xE7F5    B	L_read_data_from_eeprom10
L_read_data_from_eeprom11:
;eeprom_func.c, 102 :: 		+parameters_t.backward_sensor_cal_data
0x12C6	0x491A    LDR	R1, [PC, #104]
0x12C8	0x880A    LDRH	R2, [R1, #0]
0x12CA	0x491A    LDR	R1, [PC, #104]
0x12CC	0x8809    LDRH	R1, [R1, #0]
0x12CE	0x188A    ADDS	R2, R1, R2
0x12D0	0xB292    UXTH	R2, R2
;eeprom_func.c, 103 :: 		+parameters_t.board_sensor_cal_data
0x12D2	0x4919    LDR	R1, [PC, #100]
0x12D4	0x8809    LDRH	R1, [R1, #0]
0x12D6	0x1852    ADDS	R2, R2, R1
0x12D8	0xB292    UXTH	R2, R2
;eeprom_func.c, 104 :: 		+parameters_t.forward_sensor_v0_cal_data
0x12DA	0x4913    LDR	R1, [PC, #76]
0x12DC	0x8809    LDRH	R1, [R1, #0]
0x12DE	0x1852    ADDS	R2, R2, R1
0x12E0	0xB292    UXTH	R2, R2
;eeprom_func.c, 105 :: 		+parameters_t.backward_sensor_v0_cal_data
0x12E2	0x4916    LDR	R1, [PC, #88]
0x12E4	0x8809    LDRH	R1, [R1, #0]
0x12E6	0x1852    ADDS	R2, R2, R1
0x12E8	0xB292    UXTH	R2, R2
;eeprom_func.c, 106 :: 		+parameters_t.board_sensor_v0_cal_data;
0x12EA	0x4915    LDR	R1, [PC, #84]
0x12EC	0x8809    LDRH	R1, [R1, #0]
0x12EE	0x1851    ADDS	R1, R2, R1
; temp start address is: 8 (R2)
0x12F0	0xB28A    UXTH	R2, R1
;eeprom_func.c, 111 :: 		EnableInterrupts();
0x12F2	0xF001FFBD  BL	_EnableInterrupts+0
;eeprom_func.c, 112 :: 		if(ControlData())
0x12F6	0x9200    STR	R2, [SP, #0]
0x12F8	0xF7FFFF80  BL	_ControlData+0
0x12FC	0x9A00    LDR	R2, [SP, #0]
0x12FE	0xB292    UXTH	R2, R2
0x1300	0x2800    CMP	R0, #0
0x1302	0xD006    BEQ	L_read_data_from_eeprom13
;eeprom_func.c, 114 :: 		if(temp==parameters_t.crc_adc)
0x1304	0x490F    LDR	R1, [PC, #60]
0x1306	0x8809    LDRH	R1, [R1, #0]
0x1308	0x428A    CMP	R2, R1
0x130A	0xD101    BNE	L_read_data_from_eeprom14
; temp end address is: 8 (R2)
;eeprom_func.c, 116 :: 		return 0;
0x130C	0x2000    MOVS	R0, #0
0x130E	0xE008    B	L_end_read_data_from_eeprom
;eeprom_func.c, 117 :: 		}
L_read_data_from_eeprom14:
;eeprom_func.c, 118 :: 		}
; temp start address is: 8 (R2)
0x1310	0xE001    B	L_read_data_from_eeprom15
; temp end address is: 8 (R2)
L_read_data_from_eeprom13:
;eeprom_func.c, 121 :: 		return 1;
0x1312	0x2001    MOVS	R0, #1
0x1314	0xE005    B	L_end_read_data_from_eeprom
;eeprom_func.c, 122 :: 		}
L_read_data_from_eeprom15:
;eeprom_func.c, 123 :: 		if(temp!=parameters_t.crc_adc)
; temp start address is: 8 (R2)
0x1316	0x490B    LDR	R1, [PC, #44]
0x1318	0x8809    LDRH	R1, [R1, #0]
0x131A	0x428A    CMP	R2, R1
0x131C	0xD001    BEQ	L_read_data_from_eeprom16
; temp end address is: 8 (R2)
;eeprom_func.c, 125 :: 		return 1;
0x131E	0x2001    MOVS	R0, #1
0x1320	0xE7FF    B	L_end_read_data_from_eeprom
;eeprom_func.c, 126 :: 		}
L_read_data_from_eeprom16:
;eeprom_func.c, 127 :: 		}
L_end_read_data_from_eeprom:
0x1322	0xB001    ADD	SP, SP, #4
0x1324	0xBD00    POP	(R15)
0x1326	0xBF00    NOP
0x1328	0x017E2000  	_parameters_t+0
0x132C	0x005C2000  	_ADDRESS+0
0x1330	0x01862000  	_parameters_t+8
0x1334	0x01842000  	_parameters_t+6
0x1338	0x01882000  	_parameters_t+10
0x133C	0x01802000  	_parameters_t+2
0x1340	0x01822000  	_parameters_t+4
0x1344	0x01962000  	_parameters_t+24
; end of _read_data_from_eeprom
_ErrorCalibration:
;func.c, 96 :: 		void ErrorCalibration()
0x26E4	0xB500    PUSH	(R14)
;func.c, 99 :: 		setAdcControlStatus(RESET);
0x26E6	0x2000    MOVS	R0, #0
0x26E8	0xF7FEFE4E  BL	_setAdcControlStatus+0
;func.c, 101 :: 		if((count_error_cal++)>=50)
0x26EC	0x4A16    LDR	R2, [PC, #88]
0x26EE	0x7811    LDRB	R1, [R2, #0]
0x26F0	0x4610    MOV	R0, R2
0x26F2	0x7800    LDRB	R0, [R0, #0]
0x26F4	0x3001    ADDS	R0, #1
0x26F6	0x7010    STRB	R0, [R2, #0]
0x26F8	0x2932    CMP	R1, #50
0x26FA	0xD307    BCC	L_ErrorCalibration18
;func.c, 103 :: 		count_error_cal = 0;
0x26FC	0x2100    MOVS	R1, #0
0x26FE	0x4812    LDR	R0, [PC, #72]
0x2700	0x7001    STRB	R1, [R0, #0]
;func.c, 104 :: 		state_error^=1;
0x2702	0x4A12    LDR	R2, [PC, #72]
0x2704	0x7811    LDRB	R1, [R2, #0]
0x2706	0x2001    MOVS	R0, #1
0x2708	0x4048    EORS	R0, R1
0x270A	0x7010    STRB	R0, [R2, #0]
;func.c, 105 :: 		}
L_ErrorCalibration18:
;func.c, 106 :: 		if(state_error)
0x270C	0x480F    LDR	R0, [PC, #60]
0x270E	0x7800    LDRB	R0, [R0, #0]
0x2710	0x2800    CMP	R0, #0
0x2712	0xD00C    BEQ	L_ErrorCalibration19
;func.c, 108 :: 		LED_GREEN = OFF;
0x2714	0x4A0E    LDR	R2, [PC, #56]
0x2716	0x6810    LDR	R0, [R2, #0]
0x2718	0x2101    MOVS	R1, #1
0x271A	0x00C9    LSLS	R1, R1, BitPos(LED_GREEN+0)
0x271C	0x4388    BICS	R0, R1
0x271E	0x6010    STR	R0, [R2, #0]
;func.c, 109 :: 		LED_RED   = ON;
0x2720	0x4A0C    LDR	R2, [PC, #48]
0x2722	0x6810    LDR	R0, [R2, #0]
0x2724	0x2101    MOVS	R1, #1
0x2726	0x0009    LSLS	R1, R1, BitPos(LED_RED+0)
0x2728	0x4308    ORRS	R0, R1
0x272A	0x6010    STR	R0, [R2, #0]
;func.c, 110 :: 		}
0x272C	0xE00B    B	L_ErrorCalibration20
L_ErrorCalibration19:
;func.c, 113 :: 		LED_GREEN = OFF;
0x272E	0x4A08    LDR	R2, [PC, #32]
0x2730	0x6810    LDR	R0, [R2, #0]
0x2732	0x2101    MOVS	R1, #1
0x2734	0x00C9    LSLS	R1, R1, BitPos(LED_GREEN+0)
0x2736	0x4388    BICS	R0, R1
0x2738	0x6010    STR	R0, [R2, #0]
;func.c, 114 :: 		LED_RED   = OFF;
0x273A	0x4A06    LDR	R2, [PC, #24]
0x273C	0x6810    LDR	R0, [R2, #0]
0x273E	0x2101    MOVS	R1, #1
0x2740	0x0009    LSLS	R1, R1, BitPos(LED_RED+0)
0x2742	0x4388    BICS	R0, R1
0x2744	0x6010    STR	R0, [R2, #0]
;func.c, 115 :: 		}
L_ErrorCalibration20:
;func.c, 116 :: 		}
L_end_ErrorCalibration:
0x2746	0xBD00    POP	(R15)
0x2748	0x01082000  	ErrorCalibration_count_error_cal_L0+0
0x274C	0x010C2000  	ErrorCalibration_state_error_L0+0
0x2750	0x04144800  	LED_GREEN+0
0x2754	0x04144800  	LED_RED+0
; end of _ErrorCalibration
_StartSound:
;func.c, 79 :: 		void StartSound(unsigned char state)
; state start address is: 0 (R0)
0x2B28	0xB500    PUSH	(R14)
0x2B2A	0xB081    SUB	SP, SP, #4
; state end address is: 0 (R0)
; state start address is: 0 (R0)
;func.c, 81 :: 		flag_t.start_process_status = SET;
0x2B2C	0x2201    MOVS	R2, #1
0x2B2E	0x490F    LDR	R1, [PC, #60]
0x2B30	0x700A    STRB	R2, [R1, #0]
;func.c, 83 :: 		ControlReadOutProtection();
0x2B32	0x9000    STR	R0, [SP, #0]
0x2B34	0xF7FEFC08  BL	_ControlReadOutProtection+0
0x2B38	0x9800    LDR	R0, [SP, #0]
0x2B3A	0xB2C0    UXTB	R0, R0
;func.c, 85 :: 		if(state)
0x2B3C	0x2800    CMP	R0, #0
0x2B3E	0xD00D    BEQ	L_StartSound16
; state end address is: 0 (R0)
;func.c, 87 :: 		Blink_buz_func(0b00010101,9,1,5,preheat,TRUE,0);
0x2B40	0x2300    MOVS	R3, #0
0x2B42	0x2201    MOVS	R2, #1
0x2B44	0x2106    MOVS	R1, #6
0x2B46	0xB408    PUSH	(R3)
0x2B48	0xB404    PUSH	(R2)
0x2B4A	0xB402    PUSH	(R1)
0x2B4C	0x2305    MOVS	R3, #5
0x2B4E	0x2201    MOVS	R2, #1
0x2B50	0x2109    MOVS	R1, #9
0x2B52	0x2015    MOVS	R0, #21
0x2B54	0xF7FEFAC4  BL	_Blink_buz_func+0
0x2B58	0xB003    ADD	SP, SP, #12
;func.c, 88 :: 		}
0x2B5A	0xE004    B	L_StartSound17
L_StartSound16:
;func.c, 91 :: 		resetLB();
0x2B5C	0xF7FEFB7C  BL	_resetLB+0
;func.c, 92 :: 		setState(preheat);
0x2B60	0x2006    MOVS	R0, #6
0x2B62	0xF000FAC5  BL	_setState+0
;func.c, 93 :: 		}
L_StartSound17:
;func.c, 94 :: 		}
L_end_StartSound:
0x2B66	0xB001    ADD	SP, SP, #4
0x2B68	0xBD00    POP	(R15)
0x2B6A	0xBF00    NOP
0x2B6C	0x01792000  	_flag_t+19
; end of _StartSound
_ControlReadOutProtection:
;eeprom_func.c, 234 :: 		void ControlReadOutProtection()
0x1348	0xB500    PUSH	(R14)
;eeprom_func.c, 236 :: 		if (FLASH_GetReadOutProtectionStatus() == RESET)
0x134A	0xF7FEFFF9  BL	_FLASH_GetReadOutProtectionStatus+0
0x134E	0x2800    CMP	R0, #0
0x1350	0xD106    BNE	L_ControlReadOutProtection32
;eeprom_func.c, 238 :: 		FLASH_Unlock();
0x1352	0xF000F89D  BL	_FLASH_Unlock+0
;eeprom_func.c, 239 :: 		FLASH_ReadOutProtection(SET);
0x1356	0x2001    MOVS	R0, #1
0x1358	0xF7FEFF7A  BL	_FLASH_ReadOutProtection+0
;eeprom_func.c, 240 :: 		FLASH_Lock();
0x135C	0xF7FEFEB0  BL	_FLASH_Lock+0
;eeprom_func.c, 241 :: 		}
L_ControlReadOutProtection32:
;eeprom_func.c, 242 :: 		}
L_end_ControlReadOutProtection:
0x1360	0xBD00    POP	(R15)
; end of _ControlReadOutProtection
_FLASH_GetReadOutProtectionStatus:
;eeprom_func.c, 222 :: 		char FLASH_GetReadOutProtectionStatus()
0x0340	0xB500    PUSH	(R14)
;eeprom_func.c, 224 :: 		if ((LEVEL1_PROT_bit == RESET)&&(LEVEL2_PROT_bit == RESET))
0x0342	0x480A    LDR	R0, [PC, #40]
0x0344	0x6801    LDR	R1, [R0, #0]
0x0346	0x2001    MOVS	R0, #1
0x0348	0x0040    LSLS	R0, R0, #1
0x034A	0x4008    ANDS	R0, R1
0x034C	0x0840    LSRS	R0, R0, #1
0x034E	0x2800    CMP	R0, #0
0x0350	0xD109    BNE	L__FLASH_GetReadOutProtectionStatus45
0x0352	0x4806    LDR	R0, [PC, #24]
0x0354	0x6801    LDR	R1, [R0, #0]
0x0356	0x2001    MOVS	R0, #1
0x0358	0x0080    LSLS	R0, R0, #2
0x035A	0x4008    ANDS	R0, R1
0x035C	0x0880    LSRS	R0, R0, #2
0x035E	0x2800    CMP	R0, #0
0x0360	0xD101    BNE	L__FLASH_GetReadOutProtectionStatus44
L__FLASH_GetReadOutProtectionStatus43:
;eeprom_func.c, 226 :: 		return RESET;
0x0362	0x2000    MOVS	R0, #0
0x0364	0xE000    B	L_end_FLASH_GetReadOutProtectionStatus
;eeprom_func.c, 224 :: 		if ((LEVEL1_PROT_bit == RESET)&&(LEVEL2_PROT_bit == RESET))
L__FLASH_GetReadOutProtectionStatus45:
L__FLASH_GetReadOutProtectionStatus44:
;eeprom_func.c, 230 :: 		return SET;
0x0366	0x2001    MOVS	R0, #1
;eeprom_func.c, 232 :: 		}
L_end_FLASH_GetReadOutProtectionStatus:
0x0368	0xBD00    POP	(R15)
0x036A	0xBF00    NOP
0x036C	0x201C4002  	1073881116
; end of _FLASH_GetReadOutProtectionStatus
_FLASH_ReadOutProtection:
;eeprom_func.c, 129 :: 		char FLASH_ReadOutProtection(unsigned char new_state)
; new_state start address is: 0 (R0)
0x0250	0xB500    PUSH	(R14)
0x0252	0xB2C3    UXTB	R3, R0
; new_state end address is: 0 (R0)
; new_state start address is: 12 (R3)
;eeprom_func.c, 135 :: 		DisableInterrupts();
0x0254	0xF001FAA0  BL	_DisableInterrupts+0
;eeprom_func.c, 136 :: 		status = FLASH_WaitForLastOperation();
0x0258	0xF7FFFF44  BL	_FLASH_WaitForLastOperation+0
0x025C	0x4930    LDR	R1, [PC, #192]
0x025E	0x7008    STRB	R0, [R1, #0]
;eeprom_func.c, 137 :: 		if(status == SET)
0x0260	0x2801    CMP	R0, #1
0x0262	0xD000    BEQ	#0
0x0264	0xE055    B	L_FLASH_ReadOutProtection17
;eeprom_func.c, 140 :: 		FLASH_OPTKEYR = FLASH_FKEY1 ;
0x0266	0x4A2F    LDR	R2, [PC, #188]
0x0268	0x492F    LDR	R1, [PC, #188]
0x026A	0x600A    STR	R2, [R1, #0]
;eeprom_func.c, 141 :: 		FLASH_OPTKEYR = FLASH_FKEY2 ;
0x026C	0x4A2F    LDR	R2, [PC, #188]
0x026E	0x492E    LDR	R1, [PC, #184]
0x0270	0x600A    STR	R2, [R1, #0]
;eeprom_func.c, 143 :: 		FLASH_CR |= FLASH_CR_OPTER;
0x0272	0x492F    LDR	R1, [PC, #188]
0x0274	0x680A    LDR	R2, [R1, #0]
0x0276	0x2120    MOVS	R1, #32
0x0278	0x430A    ORRS	R2, R1
0x027A	0x492D    LDR	R1, [PC, #180]
0x027C	0x600A    STR	R2, [R1, #0]
;eeprom_func.c, 144 :: 		FLASH_CR |= FLASH_CR_STRT;
0x027E	0x492C    LDR	R1, [PC, #176]
0x0280	0x680A    LDR	R2, [R1, #0]
0x0282	0x2140    MOVS	R1, #64
0x0284	0x430A    ORRS	R2, R1
0x0286	0x492A    LDR	R1, [PC, #168]
0x0288	0x600A    STR	R2, [R1, #0]
;eeprom_func.c, 146 :: 		status = FLASH_WaitForLastOperation();
0x028A	0xF7FFFF2B  BL	_FLASH_WaitForLastOperation+0
0x028E	0x4924    LDR	R1, [PC, #144]
0x0290	0x7008    STRB	R0, [R1, #0]
;eeprom_func.c, 147 :: 		if(status == SET)
0x0292	0x2801    CMP	R0, #1
0x0294	0xD131    BNE	L_FLASH_ReadOutProtection18
;eeprom_func.c, 150 :: 		FLASH_CR &= FLASH_CR_OPTER;
0x0296	0x4926    LDR	R1, [PC, #152]
0x0298	0x680A    LDR	R2, [R1, #0]
0x029A	0x2120    MOVS	R1, #32
0x029C	0x400A    ANDS	R2, R1
0x029E	0x4924    LDR	R1, [PC, #144]
0x02A0	0x600A    STR	R2, [R1, #0]
;eeprom_func.c, 152 :: 		FLASH_CR |= FLASH_CR_OPTPG;
0x02A2	0x4923    LDR	R1, [PC, #140]
0x02A4	0x680A    LDR	R2, [R1, #0]
0x02A6	0x2110    MOVS	R1, #16
0x02A8	0x430A    ORRS	R2, R1
0x02AA	0x4921    LDR	R1, [PC, #132]
0x02AC	0x600A    STR	R2, [R1, #0]
;eeprom_func.c, 153 :: 		if(new_state == SET)
0x02AE	0x2B01    CMP	R3, #1
0x02B0	0xD10C    BNE	L_FLASH_ReadOutProtection19
; new_state end address is: 12 (R3)
;eeprom_func.c, 155 :: 		LEVEL1_PROT_bit = SET;
0x02B2	0x4B20    LDR	R3, [PC, #128]
0x02B4	0x6819    LDR	R1, [R3, #0]
0x02B6	0x2201    MOVS	R2, #1
0x02B8	0x0052    LSLS	R2, R2, #1
0x02BA	0x4311    ORRS	R1, R2
0x02BC	0x6019    STR	R1, [R3, #0]
;eeprom_func.c, 156 :: 		LEVEL2_PROT_bit = RESET;
0x02BE	0x4B1D    LDR	R3, [PC, #116]
0x02C0	0x6819    LDR	R1, [R3, #0]
0x02C2	0x2201    MOVS	R2, #1
0x02C4	0x0092    LSLS	R2, R2, #2
0x02C6	0x4391    BICS	R1, R2
0x02C8	0x6019    STR	R1, [R3, #0]
;eeprom_func.c, 157 :: 		}
0x02CA	0xE00B    B	L_FLASH_ReadOutProtection20
L_FLASH_ReadOutProtection19:
;eeprom_func.c, 160 :: 		LEVEL1_PROT_bit = RESET;
0x02CC	0x4B19    LDR	R3, [PC, #100]
0x02CE	0x6819    LDR	R1, [R3, #0]
0x02D0	0x2201    MOVS	R2, #1
0x02D2	0x0052    LSLS	R2, R2, #1
0x02D4	0x4391    BICS	R1, R2
0x02D6	0x6019    STR	R1, [R3, #0]
;eeprom_func.c, 161 :: 		LEVEL2_PROT_bit = RESET;
0x02D8	0x4B16    LDR	R3, [PC, #88]
0x02DA	0x6819    LDR	R1, [R3, #0]
0x02DC	0x2201    MOVS	R2, #1
0x02DE	0x0092    LSLS	R2, R2, #2
0x02E0	0x4391    BICS	R1, R2
0x02E2	0x6019    STR	R1, [R3, #0]
;eeprom_func.c, 162 :: 		}
L_FLASH_ReadOutProtection20:
;eeprom_func.c, 164 :: 		status = FLASH_WaitForLastOperation();
0x02E4	0xF7FFFEFE  BL	_FLASH_WaitForLastOperation+0
0x02E8	0x490D    LDR	R1, [PC, #52]
0x02EA	0x7008    STRB	R0, [R1, #0]
;eeprom_func.c, 169 :: 		FLASH_CR &= ~(FLASH_CR_OPTPG);
0x02EC	0x4910    LDR	R1, [PC, #64]
0x02EE	0x680A    LDR	R2, [R1, #0]
0x02F0	0x4911    LDR	R1, [PC, #68]
0x02F2	0x400A    ANDS	R2, R1
0x02F4	0x490E    LDR	R1, [PC, #56]
0x02F6	0x600A    STR	R2, [R1, #0]
;eeprom_func.c, 171 :: 		}
0x02F8	0xE00B    B	L_FLASH_ReadOutProtection21
L_FLASH_ReadOutProtection18:
;eeprom_func.c, 177 :: 		FLASH_CR &= ~(FLASH_CR_OPTER);
0x02FA	0x490D    LDR	R1, [PC, #52]
0x02FC	0x680A    LDR	R2, [R1, #0]
0x02FE	0x490F    LDR	R1, [PC, #60]
0x0300	0x400A    ANDS	R2, R1
0x0302	0x490B    LDR	R1, [PC, #44]
0x0304	0x600A    STR	R2, [R1, #0]
;eeprom_func.c, 178 :: 		FLASH_Lock();
0x0306	0xF7FFFEDB  BL	_FLASH_Lock+0
;eeprom_func.c, 179 :: 		EnableInterrupts();
0x030A	0xF002FFB1  BL	_EnableInterrupts+0
;eeprom_func.c, 181 :: 		return -1;
0x030E	0x20FF    MOVS	R0, #255
0x0310	0xE005    B	L_end_FLASH_ReadOutProtection
;eeprom_func.c, 183 :: 		}
L_FLASH_ReadOutProtection21:
;eeprom_func.c, 184 :: 		}
L_FLASH_ReadOutProtection17:
;eeprom_func.c, 186 :: 		FLASH_Lock();
0x0312	0xF7FFFED5  BL	_FLASH_Lock+0
;eeprom_func.c, 187 :: 		EnableInterrupts();
0x0316	0xF002FFAB  BL	_EnableInterrupts+0
;eeprom_func.c, 188 :: 		return status;
0x031A	0x4901    LDR	R1, [PC, #4]
0x031C	0x7808    LDRB	R0, [R1, #0]
;eeprom_func.c, 189 :: 		}
L_end_FLASH_ReadOutProtection:
0x031E	0xBD00    POP	(R15)
0x0320	0x01102000  	FLASH_ReadOutProtection_status_L0+0
0x0324	0x01234567  	#1164378403
0x0328	0x20084002  	1073881096
0x032C	0x89ABCDEF  	#-839939669
0x0330	0x20104002  	1073881104
0x0334	0x201C4002  	1073881116
0x0338	0xFFEFFFFF  	#-17
0x033C	0xFFDFFFFF  	#-33
; end of _FLASH_ReadOutProtection
_FLASH_WaitForLastOperation:
;eeprom_func.c, 198 :: 		char FLASH_WaitForLastOperation()
0x00E4	0xB500    PUSH	(R14)
;eeprom_func.c, 204 :: 		while ((FLASH_SR & FLASH_SR_BSY) != 0) /* (3) */
L_FLASH_WaitForLastOperation22:
0x00E6	0x4812    LDR	R0, [PC, #72]
0x00E8	0x6801    LDR	R1, [R0, #0]
0x00EA	0x2001    MOVS	R0, #1
0x00EC	0x4008    ANDS	R0, R1
0x00EE	0x2800    CMP	R0, #0
0x00F0	0xD000    BEQ	L_FLASH_WaitForLastOperation23
;eeprom_func.c, 207 :: 		}
0x00F2	0xE7F8    B	L_FLASH_WaitForLastOperation22
L_FLASH_WaitForLastOperation23:
;eeprom_func.c, 210 :: 		if((FLASH_SR & FLASH_SR_EOP) == RESET)
0x00F4	0x480E    LDR	R0, [PC, #56]
0x00F6	0x6801    LDR	R1, [R0, #0]
0x00F8	0x2020    MOVS	R0, #32
0x00FA	0x4008    ANDS	R0, R1
0x00FC	0x2800    CMP	R0, #0
0x00FE	0xD105    BNE	L_FLASH_WaitForLastOperation24
;eeprom_func.c, 212 :: 		FLASH_SR |= FLASH_SR_EOP;
0x0100	0x480B    LDR	R0, [PC, #44]
0x0102	0x6801    LDR	R1, [R0, #0]
0x0104	0x2020    MOVS	R0, #32
0x0106	0x4301    ORRS	R1, R0
0x0108	0x4809    LDR	R0, [PC, #36]
0x010A	0x6001    STR	R1, [R0, #0]
;eeprom_func.c, 213 :: 		}
L_FLASH_WaitForLastOperation24:
;eeprom_func.c, 214 :: 		if((FLASH_SR & FLASH_SR_WRPERR) || (FLASH_SR & FLASH_SR_PGERR))
0x010C	0x4808    LDR	R0, [PC, #32]
0x010E	0x6801    LDR	R1, [R0, #0]
0x0110	0x2010    MOVS	R0, #16
0x0112	0x4008    ANDS	R0, R1
0x0114	0x2800    CMP	R0, #0
0x0116	0xD106    BNE	L__FLASH_WaitForLastOperation42
0x0118	0x4805    LDR	R0, [PC, #20]
0x011A	0x6801    LDR	R1, [R0, #0]
0x011C	0x2004    MOVS	R0, #4
0x011E	0x4008    ANDS	R0, R1
0x0120	0x2800    CMP	R0, #0
0x0122	0xD100    BNE	L__FLASH_WaitForLastOperation41
0x0124	0xE001    B	L_FLASH_WaitForLastOperation27
L__FLASH_WaitForLastOperation42:
L__FLASH_WaitForLastOperation41:
;eeprom_func.c, 216 :: 		return -1;
0x0126	0x20FF    MOVS	R0, #255
0x0128	0xE000    B	L_end_FLASH_WaitForLastOperation
;eeprom_func.c, 218 :: 		}
L_FLASH_WaitForLastOperation27:
;eeprom_func.c, 219 :: 		return 1;
0x012A	0x2001    MOVS	R0, #1
;eeprom_func.c, 220 :: 		}
L_end_FLASH_WaitForLastOperation:
0x012C	0xBD00    POP	(R15)
0x012E	0xBF00    NOP
0x0130	0x200C4002  	1073881100
; end of _FLASH_WaitForLastOperation
_FLASH_Lock:
;__Lib_FLASH_32F0x_32.c, 147 :: 		
0x00C0	0xB500    PUSH	(R14)
;__Lib_FLASH_32F0x_32.c, 149 :: 		
0x00C2	0x4806    LDR	R0, [PC, #24]
0x00C4	0x6801    LDR	R1, [R0, #0]
0x00C6	0x2080    MOVS	R0, #128
0x00C8	0x4008    ANDS	R0, R1
0x00CA	0x09C0    LSRS	R0, R0, #7
0x00CC	0x2800    CMP	R0, #0
0x00CE	0xD104    BNE	L_FLASH_Lock9
;__Lib_FLASH_32F0x_32.c, 152 :: 		
0x00D0	0x4A03    LDR	R2, [PC, #12]
0x00D2	0x6810    LDR	R0, [R2, #0]
0x00D4	0x2180    MOVS	R1, #128
0x00D6	0x4308    ORRS	R0, R1
0x00D8	0x6010    STR	R0, [R2, #0]
;__Lib_FLASH_32F0x_32.c, 153 :: 		
L_FLASH_Lock9:
;__Lib_FLASH_32F0x_32.c, 154 :: 		
L_end_FLASH_Lock:
0x00DA	0xBD00    POP	(R15)
0x00DC	0x20104002  	FLASH_CRbits+0
0x00E0	0x20104002  	FLASH_CR+0
; end of _FLASH_Lock
_Blink_buz_func:
;led_buz_func.c, 5 :: 		char out,char count_digit,char new_state,char enable_new_state,unsigned char after_count)
; count_digit start address is: 12 (R3)
; count_loop1 start address is: 4 (R1)
; blink_mode start address is: 0 (R0)
0x10E0	0xB500    PUSH	(R14)
0x10E2	0xB285    UXTH	R5, R0
0x10E4	0xB2CF    UXTB	R7, R1
; count_digit end address is: 12 (R3)
; count_loop1 end address is: 4 (R1)
; blink_mode end address is: 0 (R0)
; blink_mode start address is: 20 (R5)
; count_loop1 start address is: 28 (R7)
; count_digit start address is: 12 (R3)
; new_state start address is: 0 (R0)
0x10E6	0x9801    LDR	R0, [SP, #4]
0x10E8	0xB2C0    UXTB	R0, R0
; enable_new_state start address is: 4 (R1)
0x10EA	0x9902    LDR	R1, [SP, #8]
0x10EC	0xB2C9    UXTB	R1, R1
; after_count start address is: 8 (R2)
0x10EE	0x9A03    LDR	R2, [SP, #12]
0x10F0	0xB2D2    UXTB	R2, R2
;led_buz_func.c, 11 :: 		s_blink_mode = blink_mode;
0x10F2	0x4C2E    LDR	R4, [PC, #184]
0x10F4	0x8025    STRH	R5, [R4, #0]
; blink_mode end address is: 20 (R5)
;led_buz_func.c, 13 :: 		if(((count_loop++)>=count_loop1)&&end_buzzer==RESET)
0x10F6	0x4E2E    LDR	R6, [PC, #184]
0x10F8	0x7835    LDRB	R5, [R6, #0]
0x10FA	0x4634    MOV	R4, R6
0x10FC	0x7824    LDRB	R4, [R4, #0]
0x10FE	0x3401    ADDS	R4, #1
0x1100	0x7034    STRB	R4, [R6, #0]
0x1102	0x42BD    CMP	R5, R7
0x1104	0xD331    BCC	L__Blink_buz_func34
; count_loop1 end address is: 28 (R7)
0x1106	0x4C2B    LDR	R4, [PC, #172]
0x1108	0x7824    LDRB	R4, [R4, #0]
0x110A	0x2C00    CMP	R4, #0
0x110C	0xD12D    BNE	L__Blink_buz_func33
L__Blink_buz_func32:
;led_buz_func.c, 15 :: 		count_loop = 0;
0x110E	0x2500    MOVS	R5, #0
0x1110	0x4C27    LDR	R4, [PC, #156]
0x1112	0x7025    STRB	R5, [R4, #0]
;led_buz_func.c, 17 :: 		if(s_blink_mode & 1<<(blink_loop&0x07))
0x1114	0x4C28    LDR	R4, [PC, #160]
0x1116	0x7825    LDRB	R5, [R4, #0]
0x1118	0x2407    MOVS	R4, #7
0x111A	0x462E    MOV	R6, R5
0x111C	0x4026    ANDS	R6, R4
0x111E	0xB2F6    UXTB	R6, R6
0x1120	0x2401    MOVS	R4, #1
0x1122	0x4625    MOV	R5, R4
0x1124	0x40B5    LSLS	R5, R6
0x1126	0xB22D    SXTH	R5, R5
0x1128	0x4C20    LDR	R4, [PC, #128]
0x112A	0x8824    LDRH	R4, [R4, #0]
0x112C	0x402C    ANDS	R4, R5
0x112E	0xB2A4    UXTH	R4, R4
0x1130	0x2C00    CMP	R4, #0
0x1132	0xD006    BEQ	L_Blink_buz_func3
;led_buz_func.c, 19 :: 		BUZER = ON;
0x1134	0x4E21    LDR	R6, [PC, #132]
0x1136	0x6834    LDR	R4, [R6, #0]
0x1138	0x2501    MOVS	R5, #1
0x113A	0x006D    LSLS	R5, R5, BitPos(BUZER+0)
0x113C	0x432C    ORRS	R4, R5
0x113E	0x6034    STR	R4, [R6, #0]
;led_buz_func.c, 20 :: 		}
0x1140	0xE005    B	L_Blink_buz_func4
L_Blink_buz_func3:
;led_buz_func.c, 23 :: 		BUZER = OFF;
0x1142	0x4E1E    LDR	R6, [PC, #120]
0x1144	0x6834    LDR	R4, [R6, #0]
0x1146	0x2501    MOVS	R5, #1
0x1148	0x006D    LSLS	R5, R5, BitPos(BUZER+0)
0x114A	0x43AC    BICS	R4, R5
0x114C	0x6034    STR	R4, [R6, #0]
;led_buz_func.c, 24 :: 		}
L_Blink_buz_func4:
;led_buz_func.c, 26 :: 		if((blink_loop++)>=count_digit)
0x114E	0x4E1A    LDR	R6, [PC, #104]
0x1150	0x7835    LDRB	R5, [R6, #0]
0x1152	0x4634    MOV	R4, R6
0x1154	0x7824    LDRB	R4, [R4, #0]
0x1156	0x3401    ADDS	R4, #1
0x1158	0x7034    STRB	R4, [R6, #0]
0x115A	0x429D    CMP	R5, R3
0x115C	0xD305    BCC	L_Blink_buz_func5
; count_digit end address is: 12 (R3)
;led_buz_func.c, 28 :: 		blink_loop = 0;
0x115E	0x2500    MOVS	R5, #0
0x1160	0x4C15    LDR	R4, [PC, #84]
0x1162	0x7025    STRB	R5, [R4, #0]
;led_buz_func.c, 29 :: 		end_buzzer=SET;
0x1164	0x2501    MOVS	R5, #1
0x1166	0x4C13    LDR	R4, [PC, #76]
0x1168	0x7025    STRB	R5, [R4, #0]
;led_buz_func.c, 31 :: 		}
L_Blink_buz_func5:
;led_buz_func.c, 13 :: 		if(((count_loop++)>=count_loop1)&&end_buzzer==RESET)
L__Blink_buz_func34:
L__Blink_buz_func33:
;led_buz_func.c, 35 :: 		if((end_buzzer==SET)&&((after_count_s++)>=after_count))
0x116A	0x4C12    LDR	R4, [PC, #72]
0x116C	0x7824    LDRB	R4, [R4, #0]
0x116E	0x2C01    CMP	R4, #1
0x1170	0xD11A    BNE	L__Blink_buz_func36
0x1172	0x4E13    LDR	R6, [PC, #76]
0x1174	0x7835    LDRB	R5, [R6, #0]
0x1176	0x4634    MOV	R4, R6
0x1178	0x7824    LDRB	R4, [R4, #0]
0x117A	0x3401    ADDS	R4, #1
0x117C	0x7034    STRB	R4, [R6, #0]
0x117E	0x4295    CMP	R5, R2
0x1180	0xD312    BCC	L__Blink_buz_func35
; after_count end address is: 8 (R2)
L__Blink_buz_func31:
;led_buz_func.c, 37 :: 		BUZER = OFF;
0x1182	0x4E0E    LDR	R6, [PC, #56]
0x1184	0x6834    LDR	R4, [R6, #0]
0x1186	0x2501    MOVS	R5, #1
0x1188	0x006D    LSLS	R5, R5, BitPos(BUZER+0)
0x118A	0x43AC    BICS	R4, R5
0x118C	0x6034    STR	R4, [R6, #0]
;led_buz_func.c, 38 :: 		end_buzzer=RESET;
0x118E	0x2500    MOVS	R5, #0
0x1190	0x4C08    LDR	R4, [PC, #32]
0x1192	0x7025    STRB	R5, [R4, #0]
;led_buz_func.c, 39 :: 		after_count_s = 0;
0x1194	0x2500    MOVS	R5, #0
0x1196	0x4C0A    LDR	R4, [PC, #40]
0x1198	0x7025    STRB	R5, [R4, #0]
;led_buz_func.c, 40 :: 		count_loop = 0;
0x119A	0x2500    MOVS	R5, #0
0x119C	0x4C04    LDR	R4, [PC, #16]
0x119E	0x7025    STRB	R5, [R4, #0]
;led_buz_func.c, 41 :: 		if(enable_new_state)
0x11A0	0x2900    CMP	R1, #0
0x11A2	0xD001    BEQ	L_Blink_buz_func9
; enable_new_state end address is: 4 (R1)
;led_buz_func.c, 43 :: 		setState(new_state);
; new_state end address is: 0 (R0)
0x11A4	0xF001FFA4  BL	_setState+0
;led_buz_func.c, 44 :: 		}
L_Blink_buz_func9:
;led_buz_func.c, 35 :: 		if((end_buzzer==SET)&&((after_count_s++)>=after_count))
L__Blink_buz_func36:
L__Blink_buz_func35:
;led_buz_func.c, 46 :: 		}
L_end_Blink_buz_func:
0x11A8	0xBD00    POP	(R15)
0x11AA	0xBF00    NOP
0x11AC	0x01E82000  	Blink_buz_func_s_blink_mode_L0+0
0x11B0	0x011C2000  	Blink_buz_func_count_loop_L0+0
0x11B4	0x01202000  	Blink_buz_func_end_buzzer_L0+0
0x11B8	0x01182000  	Blink_buz_func_blink_loop_L0+0
0x11BC	0x04144800  	BUZER+0
0x11C0	0x01142000  	Blink_buz_func_after_count_s_L0+0
; end of _Blink_buz_func
_Preheat_f:
;func.c, 162 :: 		void Preheat_f()
0x3044	0xB500    PUSH	(R14)
;func.c, 167 :: 		setAdcControlStatus(RESET);
0x3046	0x2000    MOVS	R0, #0
0x3048	0xF7FEF99E  BL	_setAdcControlStatus+0
;func.c, 169 :: 		if((cycle_preheat_count++)<=FASE_PREHEAT)
0x304C	0x4A23    LDR	R2, [PC, #140]
0x304E	0x6811    LDR	R1, [R2, #0]
0x3050	0x4610    MOV	R0, R2
0x3052	0x6800    LDR	R0, [R0, #0]
0x3054	0x3001    ADDS	R0, #1
0x3056	0x6010    STR	R0, [R2, #0]
0x3058	0x4821    LDR	R0, [PC, #132]
0x305A	0x4281    CMP	R1, R0
0x305C	0xD831    BHI	L_Preheat_f31
;func.c, 174 :: 		switch(preheat_count_loop++)
0x305E	0x4921    LDR	R1, [PC, #132]
0x3060	0x780B    LDRB	R3, [R1, #0]
0x3062	0x4608    MOV	R0, R1
0x3064	0x7800    LDRB	R0, [R0, #0]
0x3066	0x3001    ADDS	R0, #1
0x3068	0x7008    STRB	R0, [R1, #0]
0x306A	0xE023    B	L_Preheat_f32
;func.c, 176 :: 		case   1:    LED_RED   = ON;
L_Preheat_f34:
0x306C	0x4A1E    LDR	R2, [PC, #120]
0x306E	0x6810    LDR	R0, [R2, #0]
0x3070	0x2101    MOVS	R1, #1
0x3072	0x0009    LSLS	R1, R1, BitPos(LED_RED+0)
0x3074	0x4308    ORRS	R0, R1
0x3076	0x6010    STR	R0, [R2, #0]
;func.c, 177 :: 		LED_GREEN = OFF;
0x3078	0x4A1C    LDR	R2, [PC, #112]
0x307A	0x6810    LDR	R0, [R2, #0]
0x307C	0x2101    MOVS	R1, #1
0x307E	0x00C9    LSLS	R1, R1, BitPos(LED_GREEN+0)
0x3080	0x4388    BICS	R0, R1
0x3082	0x6010    STR	R0, [R2, #0]
;func.c, 178 :: 		break;
0x3084	0xE01C    B	L_Preheat_f33
;func.c, 179 :: 		case   11:   LED_RED   = OFF;
L_Preheat_f35:
0x3086	0x4A18    LDR	R2, [PC, #96]
0x3088	0x6810    LDR	R0, [R2, #0]
0x308A	0x2101    MOVS	R1, #1
0x308C	0x0009    LSLS	R1, R1, BitPos(LED_RED+0)
0x308E	0x4388    BICS	R0, R1
0x3090	0x6010    STR	R0, [R2, #0]
;func.c, 180 :: 		LED_GREEN = ON;
0x3092	0x4A16    LDR	R2, [PC, #88]
0x3094	0x6810    LDR	R0, [R2, #0]
0x3096	0x2101    MOVS	R1, #1
0x3098	0x00C9    LSLS	R1, R1, BitPos(LED_GREEN+0)
0x309A	0x4308    ORRS	R0, R1
0x309C	0x6010    STR	R0, [R2, #0]
;func.c, 181 :: 		break;
0x309E	0xE00F    B	L_Preheat_f33
;func.c, 182 :: 		case   49:   LED_GREEN = ON;
L_Preheat_f36:
0x30A0	0x4A12    LDR	R2, [PC, #72]
0x30A2	0x6810    LDR	R0, [R2, #0]
0x30A4	0x2101    MOVS	R1, #1
0x30A6	0x00C9    LSLS	R1, R1, BitPos(LED_GREEN+0)
0x30A8	0x4308    ORRS	R0, R1
0x30AA	0x6010    STR	R0, [R2, #0]
;func.c, 183 :: 		preheat_count_loop = 0;
0x30AC	0x2100    MOVS	R1, #0
0x30AE	0x480D    LDR	R0, [PC, #52]
0x30B0	0x7001    STRB	R1, [R0, #0]
;func.c, 184 :: 		break;
0x30B2	0xE005    B	L_Preheat_f33
;func.c, 185 :: 		}
L_Preheat_f32:
0x30B4	0x2B01    CMP	R3, #1
0x30B6	0xD0D9    BEQ	L_Preheat_f34
0x30B8	0x2B0B    CMP	R3, #11
0x30BA	0xD0E4    BEQ	L_Preheat_f35
0x30BC	0x2B31    CMP	R3, #49
0x30BE	0xD0EF    BEQ	L_Preheat_f36
L_Preheat_f33:
;func.c, 186 :: 		}
0x30C0	0xE00A    B	L_Preheat_f37
L_Preheat_f31:
;func.c, 191 :: 		preheat_count_loop = 0;
0x30C2	0x2100    MOVS	R1, #0
0x30C4	0x4807    LDR	R0, [PC, #28]
0x30C6	0x7001    STRB	R1, [R0, #0]
;func.c, 192 :: 		cycle_preheat_count = 0;
0x30C8	0x2100    MOVS	R1, #0
0x30CA	0x4804    LDR	R0, [PC, #16]
0x30CC	0x6001    STR	R1, [R0, #0]
;func.c, 193 :: 		resetLB();
0x30CE	0xF7FEF8C3  BL	_resetLB+0
;func.c, 194 :: 		setState(getV0);
0x30D2	0x2008    MOVS	R0, #8
0x30D4	0xF000F80C  BL	_setState+0
;func.c, 195 :: 		}
L_Preheat_f37:
;func.c, 196 :: 		}
L_end_Preheat_f:
0x30D8	0xBD00    POP	(R15)
0x30DA	0xBF00    NOP
0x30DC	0x01282000  	Preheat_f_cycle_preheat_count_L0+0
0x30E0	0x46500000  	#18000
0x30E4	0x01242000  	Preheat_f_preheat_count_loop_L0+0
0x30E8	0x04144800  	LED_RED+0
0x30EC	0x04144800  	LED_GREEN+0
; end of _Preheat_f
_Calibration_f:
;func.c, 198 :: 		void Calibration_f()
0x2EF4	0xB500    PUSH	(R14)
;func.c, 202 :: 		setAdcControlStatus(RESET);
0x2EF6	0x2000    MOVS	R0, #0
0x2EF8	0xF7FEFA46  BL	_setAdcControlStatus+0
;func.c, 204 :: 		if((count_cal++)>=count_ready)
0x2EFC	0x4A43    LDR	R2, [PC, #268]
0x2EFE	0x7811    LDRB	R1, [R2, #0]
0x2F00	0x4610    MOV	R0, R2
0x2F02	0x7800    LDRB	R0, [R0, #0]
0x2F04	0x3001    ADDS	R0, #1
0x2F06	0x7010    STRB	R0, [R2, #0]
0x2F08	0x4841    LDR	R0, [PC, #260]
0x2F0A	0x7800    LDRB	R0, [R0, #0]
0x2F0C	0x4281    CMP	R1, R0
0x2F0E	0xD307    BCC	L_Calibration_f38
;func.c, 206 :: 		count_cal = 0;
0x2F10	0x2100    MOVS	R1, #0
0x2F12	0x483E    LDR	R0, [PC, #248]
0x2F14	0x7001    STRB	R1, [R0, #0]
;func.c, 207 :: 		state_cal^=1;
0x2F16	0x4A3F    LDR	R2, [PC, #252]
0x2F18	0x7811    LDRB	R1, [R2, #0]
0x2F1A	0x2001    MOVS	R0, #1
0x2F1C	0x4048    EORS	R0, R1
0x2F1E	0x7010    STRB	R0, [R2, #0]
;func.c, 208 :: 		}
L_Calibration_f38:
;func.c, 209 :: 		ReadAnalogInput();
0x2F20	0xF7FFFE56  BL	_ReadAnalogInput+0
;func.c, 210 :: 		if((count_ready_cal++)>=300&&flag_t.ready_calibration_prog==RESET)
0x2F24	0x4A3C    LDR	R2, [PC, #240]
0x2F26	0x6811    LDR	R1, [R2, #0]
0x2F28	0x4610    MOV	R0, R2
0x2F2A	0x6800    LDR	R0, [R0, #0]
0x2F2C	0x3001    ADDS	R0, #1
0x2F2E	0x6010    STR	R0, [R2, #0]
0x2F30	0x20FF    MOVS	R0, #255
0x2F32	0x302D    ADDS	R0, #45
0x2F34	0x4281    CMP	R1, R0
0x2F36	0xD309    BCC	L__Calibration_f66
0x2F38	0x4838    LDR	R0, [PC, #224]
0x2F3A	0x7800    LDRB	R0, [R0, #0]
0x2F3C	0x2800    CMP	R0, #0
0x2F3E	0xD105    BNE	L__Calibration_f65
L__Calibration_f64:
;func.c, 212 :: 		flag_t.ready_calibration_prog = SET;
0x2F40	0x2101    MOVS	R1, #1
0x2F42	0x4836    LDR	R0, [PC, #216]
0x2F44	0x7001    STRB	R1, [R0, #0]
;func.c, 213 :: 		count_ready = 25;
0x2F46	0x2119    MOVS	R1, #25
0x2F48	0x4831    LDR	R0, [PC, #196]
0x2F4A	0x7001    STRB	R1, [R0, #0]
;func.c, 210 :: 		if((count_ready_cal++)>=300&&flag_t.ready_calibration_prog==RESET)
L__Calibration_f66:
L__Calibration_f65:
;func.c, 215 :: 		if( state_cal)
0x2F4C	0x4831    LDR	R0, [PC, #196]
0x2F4E	0x7800    LDRB	R0, [R0, #0]
0x2F50	0x2800    CMP	R0, #0
0x2F52	0xD00C    BEQ	L_Calibration_f42
;func.c, 217 :: 		LED_GREEN = ON;
0x2F54	0x4A32    LDR	R2, [PC, #200]
0x2F56	0x6810    LDR	R0, [R2, #0]
0x2F58	0x2101    MOVS	R1, #1
0x2F5A	0x00C9    LSLS	R1, R1, BitPos(LED_GREEN+0)
0x2F5C	0x4308    ORRS	R0, R1
0x2F5E	0x6010    STR	R0, [R2, #0]
;func.c, 218 :: 		LED_RED   = ON;
0x2F60	0x4A30    LDR	R2, [PC, #192]
0x2F62	0x6810    LDR	R0, [R2, #0]
0x2F64	0x2101    MOVS	R1, #1
0x2F66	0x0009    LSLS	R1, R1, BitPos(LED_RED+0)
0x2F68	0x4308    ORRS	R0, R1
0x2F6A	0x6010    STR	R0, [R2, #0]
;func.c, 219 :: 		}
0x2F6C	0xE00B    B	L_Calibration_f43
L_Calibration_f42:
;func.c, 222 :: 		LED_GREEN = OFF;
0x2F6E	0x4A2C    LDR	R2, [PC, #176]
0x2F70	0x6810    LDR	R0, [R2, #0]
0x2F72	0x2101    MOVS	R1, #1
0x2F74	0x00C9    LSLS	R1, R1, BitPos(LED_GREEN+0)
0x2F76	0x4388    BICS	R0, R1
0x2F78	0x6010    STR	R0, [R2, #0]
;func.c, 223 :: 		LED_RED   = OFF;
0x2F7A	0x4A2A    LDR	R2, [PC, #168]
0x2F7C	0x6810    LDR	R0, [R2, #0]
0x2F7E	0x2101    MOVS	R1, #1
0x2F80	0x0009    LSLS	R1, R1, BitPos(LED_RED+0)
0x2F82	0x4388    BICS	R0, R1
0x2F84	0x6010    STR	R0, [R2, #0]
;func.c, 224 :: 		}
L_Calibration_f43:
;func.c, 225 :: 		if(flag_t.cal_button_status==RESET&&flag_t.ready_calibration_prog==SET)
0x2F86	0x4828    LDR	R0, [PC, #160]
0x2F88	0x7800    LDRB	R0, [R0, #0]
0x2F8A	0x2800    CMP	R0, #0
0x2F8C	0xD13C    BNE	L__Calibration_f68
0x2F8E	0x4823    LDR	R0, [PC, #140]
0x2F90	0x7800    LDRB	R0, [R0, #0]
0x2F92	0x2801    CMP	R0, #1
0x2F94	0xD138    BNE	L__Calibration_f67
L__Calibration_f63:
;func.c, 227 :: 		parameters_t.board_sensor_cal_data    = (unsigned int)BoardSensorValue;
0x2F96	0x4825    LDR	R0, [PC, #148]
0x2F98	0x6800    LDR	R0, [R0, #0]
0x2F9A	0xF7FEFA91  BL	__FloatToUnsignedIntegral+0
0x2F9E	0xB280    UXTH	R0, R0
0x2FA0	0x4923    LDR	R1, [PC, #140]
0x2FA2	0x8008    STRH	R0, [R1, #0]
;func.c, 228 :: 		parameters_t.forward_sensor_cal_data  = (unsigned int)ForwardSensorValue;
0x2FA4	0x4823    LDR	R0, [PC, #140]
0x2FA6	0x6800    LDR	R0, [R0, #0]
0x2FA8	0xF7FEFA8A  BL	__FloatToUnsignedIntegral+0
0x2FAC	0xB280    UXTH	R0, R0
0x2FAE	0x4922    LDR	R1, [PC, #136]
0x2FB0	0x8008    STRH	R0, [R1, #0]
;func.c, 229 :: 		parameters_t.backward_sensor_cal_data = (unsigned int)BackwardSensorValue;
0x2FB2	0x4822    LDR	R0, [PC, #136]
0x2FB4	0x6800    LDR	R0, [R0, #0]
0x2FB6	0xF7FEFA83  BL	__FloatToUnsignedIntegral+0
0x2FBA	0xB280    UXTH	R0, R0
0x2FBC	0x4920    LDR	R1, [PC, #128]
0x2FBE	0x8008    STRH	R0, [R1, #0]
;func.c, 230 :: 		save_data_to_eeprom(EEPROM_DATA_SIZE);
0x2FC0	0x200D    MOVS	R0, #13
0x2FC2	0xF7FEF823  BL	_save_data_to_eeprom+0
;func.c, 231 :: 		if(read_data_from_eeprom(EEPROM_DATA_SIZE)==SET)
0x2FC6	0x200D    MOVS	R0, #13
0x2FC8	0xF7FEF966  BL	_read_data_from_eeprom+0
0x2FCC	0x2801    CMP	R0, #1
0x2FCE	0xD10E    BNE	L_Calibration_f47
;func.c, 233 :: 		resetLB();
0x2FD0	0xF7FEF942  BL	_resetLB+0
;func.c, 234 :: 		flag_t.ready_calibration_prog=RESET;
0x2FD4	0x2100    MOVS	R1, #0
0x2FD6	0x4811    LDR	R0, [PC, #68]
0x2FD8	0x7001    STRB	R1, [R0, #0]
;func.c, 235 :: 		count_ready_cal= 0;
0x2FDA	0x2100    MOVS	R1, #0
0x2FDC	0x480E    LDR	R0, [PC, #56]
0x2FDE	0x6001    STR	R1, [R0, #0]
;func.c, 236 :: 		count_ready = 50;
0x2FE0	0x2132    MOVS	R1, #50
0x2FE2	0x480B    LDR	R0, [PC, #44]
0x2FE4	0x7001    STRB	R1, [R0, #0]
;func.c, 237 :: 		setState(calibration);
0x2FE6	0x2004    MOVS	R0, #4
0x2FE8	0xF000F882  BL	_setState+0
;func.c, 238 :: 		}
0x2FEC	0xE00C    B	L_Calibration_f48
L_Calibration_f47:
;func.c, 241 :: 		resetLB();
0x2FEE	0xF7FEF933  BL	_resetLB+0
;func.c, 242 :: 		flag_t.ready_calibration_prog=RESET;
0x2FF2	0x2100    MOVS	R1, #0
0x2FF4	0x4809    LDR	R0, [PC, #36]
0x2FF6	0x7001    STRB	R1, [R0, #0]
;func.c, 243 :: 		count_ready_cal = 0;
0x2FF8	0x2100    MOVS	R1, #0
0x2FFA	0x4807    LDR	R0, [PC, #28]
0x2FFC	0x6001    STR	R1, [R0, #0]
;func.c, 244 :: 		count_ready = 50;
0x2FFE	0x2132    MOVS	R1, #50
0x3000	0x4803    LDR	R0, [PC, #12]
0x3002	0x7001    STRB	R1, [R0, #0]
;func.c, 245 :: 		SystemReset();
0x3004	0xF7FEF8DE  BL	_SystemReset+0
;func.c, 246 :: 		}
L_Calibration_f48:
;func.c, 225 :: 		if(flag_t.cal_button_status==RESET&&flag_t.ready_calibration_prog==SET)
L__Calibration_f68:
L__Calibration_f67:
;func.c, 248 :: 		}
L_end_Calibration_f:
0x3008	0xBD00    POP	(R15)
0x300A	0xBF00    NOP
0x300C	0x012C2000  	Calibration_f_count_cal_L0+0
0x3010	0x01342000  	Calibration_f_count_ready_L0+0
0x3014	0x01302000  	Calibration_f_state_cal_L0+0
0x3018	0x01382000  	Calibration_f_count_ready_cal_L0+0
0x301C	0x016D2000  	_flag_t+7
0x3020	0x04144800  	LED_GREEN+0
0x3024	0x04144800  	LED_RED+0
0x3028	0x016A2000  	_flag_t+4
0x302C	0x00002000  	_BoardSensorValue+0
0x3030	0x01882000  	_parameters_t+10
0x3034	0x00042000  	_ForwardSensorValue+0
0x3038	0x01842000  	_parameters_t+6
0x303C	0x00082000  	_BackwardSensorValue+0
0x3040	0x01862000  	_parameters_t+8
; end of _Calibration_f
_SystemReset:
;__Lib_System.c, 301 :: 		
0x11C4	0xB500    PUSH	(R14)
;__Lib_System.c, 307 :: 		
0x11C6	0x4902    LDR	R1, [PC, #8]
0x11C8	0x4802    LDR	R0, [PC, #8]
0x11CA	0x6001    STR	R1, [R0, #0]
;__Lib_System.c, 312 :: 		
L_SystemReset21:
;__Lib_System.c, 314 :: 		
0x11CC	0xE7FE    B	L_SystemReset21
;__Lib_System.c, 315 :: 		
L_end_SystemReset:
0x11CE	0xBD00    POP	(R15)
0x11D0	0x000405FA  	#100270084
0x11D4	0xED0CE000  	SCB_AIRCR+0
; end of _SystemReset
_save_data_to_eeprom:
;eeprom_func.c, 62 :: 		char save_data_to_eeprom(unsigned char len_array)
0x100C	0xB500    PUSH	(R14)
0x100E	0xB083    SUB	SP, SP, #12
0x1010	0x9002    STR	R0, [SP, #8]
;eeprom_func.c, 64 :: 		unsigned char position=0;
;eeprom_func.c, 67 :: 		array_struct = (unsigned long*)&parameters_t;
0x1012	0x4923    LDR	R1, [PC, #140]
0x1014	0x9101    STR	R1, [SP, #4]
;eeprom_func.c, 68 :: 		DisableInterrupts();
0x1016	0xF000FBBF  BL	_DisableInterrupts+0
;eeprom_func.c, 69 :: 		FLASH_Unlock();
0x101A	0xF000FA39  BL	_FLASH_Unlock+0
;eeprom_func.c, 70 :: 		FLASH_ErasePage(ADDRESS);
0x101E	0x4921    LDR	R1, [PC, #132]
0x1020	0x6809    LDR	R1, [R1, #0]
0x1022	0x4608    MOV	R0, R1
0x1024	0xF000F9F4  BL	_FLASH_ErasePage+0
;eeprom_func.c, 71 :: 		Init_flash_cal();
0x1028	0xF7FFF9A2  BL	_Init_flash_cal+0
;eeprom_func.c, 72 :: 		for(position=0;position<len_array;position++)
; position start address is: 0 (R0)
0x102C	0x2000    MOVS	R0, #0
; position end address is: 0 (R0)
L_save_data_to_eeprom7:
; position start address is: 0 (R0)
0x102E	0x9902    LDR	R1, [SP, #8]
0x1030	0xB2C9    UXTB	R1, R1
0x1032	0x4288    CMP	R0, R1
0x1034	0xD222    BCS	L_save_data_to_eeprom8
;eeprom_func.c, 74 :: 		FLASH_Write_HalfWord(ADDRESS+(position*4-2), 0);
0x1036	0x0081    LSLS	R1, R0, #2
0x1038	0xB209    SXTH	R1, R1
0x103A	0x1E8A    SUBS	R2, R1, #2
0x103C	0xB212    SXTH	R2, R2
0x103E	0x4919    LDR	R1, [PC, #100]
0x1040	0x6809    LDR	R1, [R1, #0]
0x1042	0x1889    ADDS	R1, R1, R2
0x1044	0x9000    STR	R0, [SP, #0]
0x1046	0x4608    MOV	R0, R1
0x1048	0x2100    MOVS	R1, #0
0x104A	0xF000F9AB  BL	_FLASH_Write_HalfWord+0
0x104E	0x9800    LDR	R0, [SP, #0]
0x1050	0xB2C0    UXTB	R0, R0
;eeprom_func.c, 75 :: 		FLASH_Write_HalfWord(ADDRESS+position*4, (*array_struct));
0x1052	0x9901    LDR	R1, [SP, #4]
0x1054	0x8809    LDRH	R1, [R1, #0]
0x1056	0xB28B    UXTH	R3, R1
0x1058	0x0082    LSLS	R2, R0, #2
0x105A	0xB212    SXTH	R2, R2
0x105C	0x4911    LDR	R1, [PC, #68]
0x105E	0x6809    LDR	R1, [R1, #0]
0x1060	0x1889    ADDS	R1, R1, R2
0x1062	0x9000    STR	R0, [SP, #0]
0x1064	0x4608    MOV	R0, R1
0x1066	0xB299    UXTH	R1, R3
0x1068	0xF000F99C  BL	_FLASH_Write_HalfWord+0
0x106C	0x9800    LDR	R0, [SP, #0]
0x106E	0xB2C0    UXTB	R0, R0
;eeprom_func.c, 76 :: 		array_struct++;
0x1070	0x9901    LDR	R1, [SP, #4]
0x1072	0x3102    ADDS	R1, #2
0x1074	0x9101    STR	R1, [SP, #4]
;eeprom_func.c, 72 :: 		for(position=0;position<len_array;position++)
0x1076	0x1C41    ADDS	R1, R0, #1
; position end address is: 0 (R0)
; position start address is: 4 (R1)
;eeprom_func.c, 77 :: 		}
0x1078	0xB2C8    UXTB	R0, R1
; position end address is: 4 (R1)
0x107A	0xE7D8    B	L_save_data_to_eeprom7
L_save_data_to_eeprom8:
;eeprom_func.c, 78 :: 		FLASH_Write_HalfWord(ADDRESS+(position*4-2), 0);
; position start address is: 0 (R0)
0x107C	0x0081    LSLS	R1, R0, #2
0x107E	0xB209    SXTH	R1, R1
; position end address is: 0 (R0)
0x1080	0x1E8A    SUBS	R2, R1, #2
0x1082	0xB212    SXTH	R2, R2
0x1084	0x4907    LDR	R1, [PC, #28]
0x1086	0x6809    LDR	R1, [R1, #0]
0x1088	0x1889    ADDS	R1, R1, R2
0x108A	0x4608    MOV	R0, R1
0x108C	0x2100    MOVS	R1, #0
0x108E	0xF000F989  BL	_FLASH_Write_HalfWord+0
;eeprom_func.c, 79 :: 		FLASH_Lock();
0x1092	0xF7FFF815  BL	_FLASH_Lock+0
;eeprom_func.c, 80 :: 		EnableInterrupts();
0x1096	0xF002F8EB  BL	_EnableInterrupts+0
;eeprom_func.c, 81 :: 		return 1;
0x109A	0x2001    MOVS	R0, #1
;eeprom_func.c, 82 :: 		}
L_end_save_data_to_eeprom:
0x109C	0xB003    ADD	SP, SP, #12
0x109E	0xBD00    POP	(R15)
0x10A0	0x017E2000  	_parameters_t+0
0x10A4	0x005C2000  	_ADDRESS+0
; end of _save_data_to_eeprom
_Init_flash_cal:
;init_func.c, 62 :: 		void Init_flash_cal()
;init_func.c, 64 :: 		parameters_t.forward_sensor_ready  = (unsigned int)READY_DATA;
0x0370	0x4910    LDR	R1, [PC, #64]
0x0372	0x4811    LDR	R0, [PC, #68]
0x0374	0x8001    STRH	R1, [R0, #0]
;init_func.c, 65 :: 		parameters_t.backward_sensor_ready = (unsigned int)READY_DATA;
0x0376	0x490F    LDR	R1, [PC, #60]
0x0378	0x4810    LDR	R0, [PC, #64]
0x037A	0x8001    STRH	R1, [R0, #0]
;init_func.c, 66 :: 		parameters_t.board_sensor_ready    = (unsigned int)READY_DATA;
0x037C	0x490D    LDR	R1, [PC, #52]
0x037E	0x4810    LDR	R0, [PC, #64]
0x0380	0x8001    STRH	R1, [R0, #0]
;init_func.c, 68 :: 		+parameters_t.backward_sensor_cal_data
0x0382	0x4810    LDR	R0, [PC, #64]
0x0384	0x8801    LDRH	R1, [R0, #0]
0x0386	0x4810    LDR	R0, [PC, #64]
0x0388	0x8800    LDRH	R0, [R0, #0]
0x038A	0x1841    ADDS	R1, R0, R1
0x038C	0xB289    UXTH	R1, R1
;init_func.c, 69 :: 		+parameters_t.board_sensor_cal_data
0x038E	0x480F    LDR	R0, [PC, #60]
0x0390	0x8800    LDRH	R0, [R0, #0]
0x0392	0x1809    ADDS	R1, R1, R0
0x0394	0xB289    UXTH	R1, R1
;init_func.c, 70 :: 		+parameters_t.forward_sensor_v0_cal_data
0x0396	0x480E    LDR	R0, [PC, #56]
0x0398	0x8800    LDRH	R0, [R0, #0]
0x039A	0x1809    ADDS	R1, R1, R0
0x039C	0xB289    UXTH	R1, R1
;init_func.c, 71 :: 		+parameters_t.backward_sensor_v0_cal_data
0x039E	0x480D    LDR	R0, [PC, #52]
0x03A0	0x8800    LDRH	R0, [R0, #0]
0x03A2	0x1809    ADDS	R1, R1, R0
0x03A4	0xB289    UXTH	R1, R1
;init_func.c, 72 :: 		+parameters_t.board_sensor_v0_cal_data;
0x03A6	0x480C    LDR	R0, [PC, #48]
0x03A8	0x8800    LDRH	R0, [R0, #0]
0x03AA	0x1809    ADDS	R1, R1, R0
0x03AC	0x480B    LDR	R0, [PC, #44]
0x03AE	0x8001    STRH	R1, [R0, #0]
;init_func.c, 73 :: 		}
L_end_Init_flash_cal:
0x03B0	0x4770    BX	LR
0x03B2	0xBF00    NOP
0x03B4	0xAAAA0000  	#43690
0x03B8	0x018A2000  	_parameters_t+12
0x03BC	0x018C2000  	_parameters_t+14
0x03C0	0x018E2000  	_parameters_t+16
0x03C4	0x01862000  	_parameters_t+8
0x03C8	0x01842000  	_parameters_t+6
0x03CC	0x01882000  	_parameters_t+10
0x03D0	0x017E2000  	_parameters_t+0
0x03D4	0x01802000  	_parameters_t+2
0x03D8	0x01822000  	_parameters_t+4
0x03DC	0x01962000  	_parameters_t+24
; end of _Init_flash_cal
_Calibrate:
;adc_func.c, 254 :: 		void Calibrate()
0x1B9C	0xB500    PUSH	(R14)
0x1B9E	0xB083    SUB	SP, SP, #12
;adc_func.c, 257 :: 		unsigned int board_sens_temp = 0,forward_sens_temp = 0,backward_sens_temp = 0;
0x1BA0	0x466E    MOV	R6, SP
0x1BA2	0x250A    MOVS	R5, #10
0x1BA4	0x19AD    ADDS	R5, R5, R6
0x1BA6	0x4F75    LDR	R7, [PC, #468]
0x1BA8	0xF7FEFDB8  BL	___CC2DW+0
;adc_func.c, 258 :: 		setAdcControlStatus(RESET);
0x1BAC	0x2000    MOVS	R0, #0
0x1BAE	0xF7FFFBEB  BL	_setAdcControlStatus+0
;adc_func.c, 259 :: 		if(ControlData()&&flag_t.first_start)
0x1BB2	0xF7FFFB23  BL	_ControlData+0
0x1BB6	0x2800    CMP	R0, #0
0x1BB8	0xD005    BEQ	L__Calibrate145
0x1BBA	0x4871    LDR	R0, [PC, #452]
0x1BBC	0x7800    LDRB	R0, [R0, #0]
0x1BBE	0x2800    CMP	R0, #0
0x1BC0	0xD001    BEQ	L__Calibrate144
L__Calibrate143:
;adc_func.c, 261 :: 		ControlRecalFlags();
0x1BC2	0xF000FE3D  BL	_ControlRecalFlags+0
;adc_func.c, 259 :: 		if(ControlData()&&flag_t.first_start)
L__Calibrate145:
L__Calibrate144:
;adc_func.c, 263 :: 		if(getRcalAdcStatus()&&ControlData()&&flag_t.first_start)
0x1BC6	0xF7FEFF17  BL	_getRcalAdcStatus+0
0x1BCA	0x2800    CMP	R0, #0
0x1BCC	0xD00A    BEQ	L__Calibrate148
0x1BCE	0xF7FFFB15  BL	_ControlData+0
0x1BD2	0x2800    CMP	R0, #0
0x1BD4	0xD006    BEQ	L__Calibrate147
0x1BD6	0x486A    LDR	R0, [PC, #424]
0x1BD8	0x7800    LDRB	R0, [R0, #0]
0x1BDA	0x2800    CMP	R0, #0
0x1BDC	0xD002    BEQ	L__Calibrate146
L__Calibrate142:
;adc_func.c, 265 :: 		flag_t.alarm_sensor_status = SET;
0x1BDE	0x2101    MOVS	R1, #1
0x1BE0	0x4868    LDR	R0, [PC, #416]
0x1BE2	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 263 :: 		if(getRcalAdcStatus()&&ControlData()&&flag_t.first_start)
L__Calibrate148:
L__Calibrate147:
L__Calibrate146:
;adc_func.c, 267 :: 		if(flag_t.alarm_sensor_status&&ControlData()&&flag_t.first_start)
0x1BE4	0x4867    LDR	R0, [PC, #412]
0x1BE6	0x7800    LDRB	R0, [R0, #0]
0x1BE8	0x2800    CMP	R0, #0
0x1BEA	0xD03C    BEQ	L__Calibrate151
0x1BEC	0xF7FFFB06  BL	_ControlData+0
0x1BF0	0x2800    CMP	R0, #0
0x1BF2	0xD038    BEQ	L__Calibrate150
0x1BF4	0x4862    LDR	R0, [PC, #392]
0x1BF6	0x7800    LDRB	R0, [R0, #0]
0x1BF8	0x2800    CMP	R0, #0
0x1BFA	0xD034    BEQ	L__Calibrate149
L__Calibrate141:
;adc_func.c, 269 :: 		if((control_rf_count++)>=RF_DELAY)
0x1BFC	0x4A62    LDR	R2, [PC, #392]
0x1BFE	0x8811    LDRH	R1, [R2, #0]
0x1C00	0x4610    MOV	R0, R2
0x1C02	0x8800    LDRH	R0, [R0, #0]
0x1C04	0x3001    ADDS	R0, #1
0x1C06	0x8010    STRH	R0, [R2, #0]
0x1C08	0x2919    CMP	R1, #25
0x1C0A	0xD32B    BCC	L_Calibrate59
;adc_func.c, 271 :: 		LED_GREEN^=1;
0x1C0C	0x4B5F    LDR	R3, [PC, #380]
0x1C0E	0x6818    LDR	R0, [R3, #0]
0x1C10	0x2101    MOVS	R1, #1
0x1C12	0x00C9    LSLS	R1, R1, BitPos(LED_GREEN+0)
0x1C14	0x4001    ANDS	R1, R0
0x1C16	0x08C9    LSRS	R1, R1, BitPos(LED_GREEN+0)
0x1C18	0x2001    MOVS	R0, #1
0x1C1A	0x4048    EORS	R0, R1
0x1C1C	0xB2C2    UXTB	R2, R0
0x1C1E	0x6818    LDR	R0, [R3, #0]
0x1C20	0x2101    MOVS	R1, #1
0x1C22	0x4011    ANDS	R1, R2
0x1C24	0xD003    BEQ	L__Calibrate182
0x1C26	0x2101    MOVS	R1, #1
0x1C28	0x00C9    LSLS	R1, R1, BitPos(LED_GREEN+0)
0x1C2A	0x4308    ORRS	R0, R1
0x1C2C	0xE002    B	L__Calibrate181
L__Calibrate182:
0x1C2E	0x2101    MOVS	R1, #1
0x1C30	0x00C9    LSLS	R1, R1, BitPos(LED_GREEN+0)
0x1C32	0x4388    BICS	R0, R1
L__Calibrate181:
0x1C34	0x6018    STR	R0, [R3, #0]
;adc_func.c, 272 :: 		LED_RED^=1;
0x1C36	0x4B56    LDR	R3, [PC, #344]
0x1C38	0x6818    LDR	R0, [R3, #0]
0x1C3A	0x2101    MOVS	R1, #1
0x1C3C	0x0009    LSLS	R1, R1, BitPos(LED_RED+0)
0x1C3E	0x4001    ANDS	R1, R0
0x1C40	0x2001    MOVS	R0, #1
0x1C42	0x4048    EORS	R0, R1
0x1C44	0xB2C2    UXTB	R2, R0
0x1C46	0x6818    LDR	R0, [R3, #0]
0x1C48	0x2101    MOVS	R1, #1
0x1C4A	0x4011    ANDS	R1, R2
0x1C4C	0xD003    BEQ	L__Calibrate184
0x1C4E	0x2101    MOVS	R1, #1
0x1C50	0x0009    LSLS	R1, R1, BitPos(LED_RED+0)
0x1C52	0x4308    ORRS	R0, R1
0x1C54	0xE002    B	L__Calibrate183
L__Calibrate184:
0x1C56	0x2101    MOVS	R1, #1
0x1C58	0x0009    LSLS	R1, R1, BitPos(LED_RED+0)
0x1C5A	0x4388    BICS	R0, R1
L__Calibrate183:
0x1C5C	0x6018    STR	R0, [R3, #0]
;adc_func.c, 273 :: 		control_rf_count = 0;
0x1C5E	0x2100    MOVS	R1, #0
0x1C60	0x4849    LDR	R0, [PC, #292]
0x1C62	0x8001    STRH	R1, [R0, #0]
;adc_func.c, 274 :: 		}
L_Calibrate59:
;adc_func.c, 275 :: 		}
0x1C64	0xE00B    B	L_Calibrate60
;adc_func.c, 267 :: 		if(flag_t.alarm_sensor_status&&ControlData()&&flag_t.first_start)
L__Calibrate151:
L__Calibrate150:
L__Calibrate149:
;adc_func.c, 278 :: 		LED_GREEN = ON;
0x1C66	0x4A49    LDR	R2, [PC, #292]
0x1C68	0x6810    LDR	R0, [R2, #0]
0x1C6A	0x2101    MOVS	R1, #1
0x1C6C	0x00C9    LSLS	R1, R1, BitPos(LED_GREEN+0)
0x1C6E	0x4308    ORRS	R0, R1
0x1C70	0x6010    STR	R0, [R2, #0]
;adc_func.c, 279 :: 		LED_RED   = ON;
0x1C72	0x4A47    LDR	R2, [PC, #284]
0x1C74	0x6810    LDR	R0, [R2, #0]
0x1C76	0x2101    MOVS	R1, #1
0x1C78	0x0009    LSLS	R1, R1, BitPos(LED_RED+0)
0x1C7A	0x4308    ORRS	R0, R1
0x1C7C	0x6010    STR	R0, [R2, #0]
;adc_func.c, 280 :: 		}
L_Calibrate60:
;adc_func.c, 282 :: 		if((cal_count++)>V0_CAL_TIME)
0x1C7E	0x4A45    LDR	R2, [PC, #276]
0x1C80	0x8811    LDRH	R1, [R2, #0]
0x1C82	0x4610    MOV	R0, R2
0x1C84	0x8800    LDRH	R0, [R0, #0]
0x1C86	0x3001    ADDS	R0, #1
0x1C88	0x8010    STRH	R0, [R2, #0]
0x1C8A	0x4843    LDR	R0, [PC, #268]
0x1C8C	0x4281    CMP	R1, R0
0x1C8E	0xD800    BHI	#0
0x1C90	0xE072    B	L_Calibrate61
;adc_func.c, 284 :: 		cal_count = 0;
0x1C92	0x2100    MOVS	R1, #0
0x1C94	0x483F    LDR	R0, [PC, #252]
0x1C96	0x8001    STRH	R1, [R0, #0]
;adc_func.c, 285 :: 		BoardSensorR0    = BoardSensorValue;
0x1C98	0x4840    LDR	R0, [PC, #256]
0x1C9A	0x6801    LDR	R1, [R0, #0]
0x1C9C	0x4840    LDR	R0, [PC, #256]
0x1C9E	0x6001    STR	R1, [R0, #0]
;adc_func.c, 286 :: 		ForwardSensorR0  = ForwardSensorValue;
0x1CA0	0x4840    LDR	R0, [PC, #256]
0x1CA2	0x6801    LDR	R1, [R0, #0]
0x1CA4	0x4840    LDR	R0, [PC, #256]
0x1CA6	0x6001    STR	R1, [R0, #0]
;adc_func.c, 287 :: 		BackwardSensorR0 = BackwardSensorValue;
0x1CA8	0x4840    LDR	R0, [PC, #256]
0x1CAA	0x6801    LDR	R1, [R0, #0]
0x1CAC	0x4840    LDR	R0, [PC, #256]
0x1CAE	0x6001    STR	R1, [R0, #0]
;adc_func.c, 289 :: 		board_sens_temp    = parameters_t.board_sensor_v0_cal_data;
0x1CB0	0x4840    LDR	R0, [PC, #256]
0x1CB2	0x8800    LDRH	R0, [R0, #0]
0x1CB4	0x9000    STR	R0, [SP, #0]
;adc_func.c, 290 :: 		forward_sens_temp  = parameters_t.forward_sensor_v0_cal_data;
0x1CB6	0x4840    LDR	R0, [PC, #256]
0x1CB8	0x8800    LDRH	R0, [R0, #0]
0x1CBA	0x9001    STR	R0, [SP, #4]
;adc_func.c, 291 :: 		backward_sens_temp = parameters_t.backward_sensor_v0_cal_data;
0x1CBC	0x483F    LDR	R0, [PC, #252]
0x1CBE	0x8800    LDRH	R0, [R0, #0]
0x1CC0	0x9002    STR	R0, [SP, #8]
;adc_func.c, 293 :: 		if(!flag_t.alarm_sensor_status)
0x1CC2	0x4830    LDR	R0, [PC, #192]
0x1CC4	0x7800    LDRB	R0, [R0, #0]
0x1CC6	0x2800    CMP	R0, #0
0x1CC8	0xD114    BNE	L_Calibrate62
;adc_func.c, 295 :: 		parameters_t.forward_sensor_v0_cal_data  = (unsigned int)ForwardSensorValue;
0x1CCA	0x4836    LDR	R0, [PC, #216]
0x1CCC	0x6800    LDR	R0, [R0, #0]
0x1CCE	0xF7FFFBF7  BL	__FloatToUnsignedIntegral+0
0x1CD2	0xB280    UXTH	R0, R0
0x1CD4	0x4938    LDR	R1, [PC, #224]
0x1CD6	0x8008    STRH	R0, [R1, #0]
;adc_func.c, 296 :: 		parameters_t.board_sensor_v0_cal_data    = (unsigned int)BoardSensorValue;
0x1CD8	0x4830    LDR	R0, [PC, #192]
0x1CDA	0x6800    LDR	R0, [R0, #0]
0x1CDC	0xF7FFFBF0  BL	__FloatToUnsignedIntegral+0
0x1CE0	0xB280    UXTH	R0, R0
0x1CE2	0x4934    LDR	R1, [PC, #208]
0x1CE4	0x8008    STRH	R0, [R1, #0]
;adc_func.c, 297 :: 		parameters_t.backward_sensor_v0_cal_data = (unsigned int)BackwardSensorValue;
0x1CE6	0x4831    LDR	R0, [PC, #196]
0x1CE8	0x6800    LDR	R0, [R0, #0]
0x1CEA	0xF7FFFBE9  BL	__FloatToUnsignedIntegral+0
0x1CEE	0xB280    UXTH	R0, R0
0x1CF0	0x4932    LDR	R1, [PC, #200]
0x1CF2	0x8008    STRH	R0, [R1, #0]
;adc_func.c, 298 :: 		}
L_Calibrate62:
;adc_func.c, 299 :: 		parameters_t.board_sensor_koef    = 1;
0x1CF4	0x2101    MOVS	R1, #1
0x1CF6	0x4832    LDR	R0, [PC, #200]
0x1CF8	0x8001    STRH	R1, [R0, #0]
;adc_func.c, 300 :: 		parameters_t.forward_sensor_koef  = 100;//(unsigned int)(((double)BoardSensorValue/(double)ForwardSensorValue)*100.0);
0x1CFA	0x2164    MOVS	R1, #100
0x1CFC	0x4831    LDR	R0, [PC, #196]
0x1CFE	0x8001    STRH	R1, [R0, #0]
;adc_func.c, 301 :: 		parameters_t.backward_sensor_koef = 100;//(unsigned int)(((double)BoardSensorValue/(double)BackwardSensorValue)*100.0);
0x1D00	0x2164    MOVS	R1, #100
0x1D02	0x4831    LDR	R0, [PC, #196]
0x1D04	0x8001    STRH	R1, [R0, #0]
;adc_func.c, 303 :: 		if(!flag_t.alarm_sensor_status)
0x1D06	0x481F    LDR	R0, [PC, #124]
0x1D08	0x7800    LDRB	R0, [R0, #0]
0x1D0A	0x2800    CMP	R0, #0
0x1D0C	0xD116    BNE	L_Calibrate63
;adc_func.c, 305 :: 		ControlVs(&parameters_t.board_sensor_v0_cal_data,&board_sens_temp,
0x1D0E	0x4668    MOV	R0, SP
;adc_func.c, 306 :: 		&parameters_t.board_sensor_cal_data,&flag_t.calibrate_status);
0x1D10	0x4B2E    LDR	R3, [PC, #184]
0x1D12	0x4A2F    LDR	R2, [PC, #188]
;adc_func.c, 305 :: 		ControlVs(&parameters_t.board_sensor_v0_cal_data,&board_sens_temp,
0x1D14	0x4601    MOV	R1, R0
0x1D16	0x4827    LDR	R0, [PC, #156]
;adc_func.c, 306 :: 		&parameters_t.board_sensor_cal_data,&flag_t.calibrate_status);
0x1D18	0xF7FFF9C6  BL	_ControlVs+0
;adc_func.c, 308 :: 		ControlVs(&parameters_t.forward_sensor_v0_cal_data,&forward_sens_temp,
0x1D1C	0x2004    MOVS	R0, #4
0x1D1E	0x4468    ADD	R0, SP, R0
;adc_func.c, 309 :: 		&parameters_t.forward_sensor_cal_data,&flag_t.calibrate_status);
0x1D20	0x4B2A    LDR	R3, [PC, #168]
0x1D22	0x4A2C    LDR	R2, [PC, #176]
;adc_func.c, 308 :: 		ControlVs(&parameters_t.forward_sensor_v0_cal_data,&forward_sens_temp,
0x1D24	0x4601    MOV	R1, R0
0x1D26	0x4824    LDR	R0, [PC, #144]
;adc_func.c, 309 :: 		&parameters_t.forward_sensor_cal_data,&flag_t.calibrate_status);
0x1D28	0xF7FFF9BE  BL	_ControlVs+0
;adc_func.c, 311 :: 		ControlVs(&parameters_t.backward_sensor_v0_cal_data,&backward_sens_temp,
0x1D2C	0x2008    MOVS	R0, #8
0x1D2E	0x4468    ADD	R0, SP, R0
;adc_func.c, 312 :: 		&parameters_t.backward_sensor_cal_data,&flag_t.calibrate_status);
0x1D30	0x4B26    LDR	R3, [PC, #152]
0x1D32	0x4A29    LDR	R2, [PC, #164]
;adc_func.c, 311 :: 		ControlVs(&parameters_t.backward_sensor_v0_cal_data,&backward_sens_temp,
0x1D34	0x4601    MOV	R1, R0
0x1D36	0x4821    LDR	R0, [PC, #132]
;adc_func.c, 312 :: 		&parameters_t.backward_sensor_cal_data,&flag_t.calibrate_status);
0x1D38	0xF7FFF9B6  BL	_ControlVs+0
;adc_func.c, 314 :: 		}
L_Calibrate63:
;adc_func.c, 316 :: 		flag_t.alarm_sensor_status = RESET;
0x1D3C	0x2100    MOVS	R1, #0
0x1D3E	0x4811    LDR	R0, [PC, #68]
0x1D40	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 317 :: 		flag_t.first_start = RESET;
0x1D42	0x2100    MOVS	R1, #0
0x1D44	0x480E    LDR	R0, [PC, #56]
0x1D46	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 319 :: 		resetLB();
0x1D48	0xF7FFFA86  BL	_resetLB+0
;adc_func.c, 320 :: 		if(flag_t.calibrate_status)
0x1D4C	0x481F    LDR	R0, [PC, #124]
0x1D4E	0x7800    LDRB	R0, [R0, #0]
0x1D50	0x2800    CMP	R0, #0
0x1D52	0xD00E    BEQ	L_Calibrate64
;adc_func.c, 322 :: 		if(flag_t.recalibrate)
0x1D54	0x4821    LDR	R0, [PC, #132]
0x1D56	0x7800    LDRB	R0, [R0, #0]
0x1D58	0x2800    CMP	R0, #0
0x1D5A	0xD006    BEQ	L_Calibrate65
;adc_func.c, 324 :: 		flag_t.recalibrate = RESET;
0x1D5C	0x2100    MOVS	R1, #0
0x1D5E	0x481F    LDR	R0, [PC, #124]
0x1D60	0x7001    STRB	R1, [R0, #0]
;adc_func.c, 325 :: 		setState(process);
0x1D62	0x2009    MOVS	R0, #9
0x1D64	0xF001F9C4  BL	_setState+0
;adc_func.c, 326 :: 		}
0x1D68	0xE002    B	L_Calibrate66
L_Calibrate65:
;adc_func.c, 329 :: 		setState(ready_alarm);
0x1D6A	0x2007    MOVS	R0, #7
0x1D6C	0xF001F9C0  BL	_setState+0
;adc_func.c, 330 :: 		}
L_Calibrate66:
;adc_func.c, 331 :: 		}
0x1D70	0xE002    B	L_Calibrate67
L_Calibrate64:
;adc_func.c, 334 :: 		setState(calibration);
0x1D72	0x2004    MOVS	R0, #4
0x1D74	0xF001F9BC  BL	_setState+0
;adc_func.c, 335 :: 		}
L_Calibrate67:
;adc_func.c, 336 :: 		}
L_Calibrate61:
;adc_func.c, 337 :: 		}
L_end_Calibrate:
0x1D78	0xB003    ADD	SP, SP, #12
0x1D7A	0xBD00    POP	(R15)
0x1D7C	0x38640000  	?ICSCalibrate_board_sens_temp_L0+0
0x1D80	0x017C2000  	_flag_t+22
0x1D84	0x017D2000  	_flag_t+23
0x1D88	0x013C2000  	Calibrate_control_rf_count_L0+0
0x1D8C	0x04144800  	LED_GREEN+0
0x1D90	0x04144800  	LED_RED+0
0x1D94	0x01EC2000  	Calibrate_cal_count_L0+0
0x1D98	0x03E80000  	#1000
0x1D9C	0x00002000  	536870912
0x1DA0	0x00182000  	536870936
0x1DA4	0x00042000  	536870916
0x1DA8	0x001C2000  	536870940
0x1DAC	0x00082000  	536870920
0x1DB0	0x00202000  	536870944
0x1DB4	0x01822000  	_parameters_t+4
0x1DB8	0x017E2000  	_parameters_t+0
0x1DBC	0x01802000  	_parameters_t+2
0x1DC0	0x01902000  	_parameters_t+18
0x1DC4	0x01922000  	_parameters_t+20
0x1DC8	0x01942000  	_parameters_t+22
0x1DCC	0x01722000  	_flag_t+12
0x1DD0	0x01882000  	_parameters_t+10
0x1DD4	0x01842000  	_parameters_t+6
0x1DD8	0x01862000  	_parameters_t+8
0x1DDC	0x01732000  	_flag_t+13
; end of _Calibrate
_ControlVs:
;adc_func.c, 219 :: 		void ControlVs(unsigned int* v0_data,unsigned int* tmp,unsigned int* vs_data,unsigned char* flag)
; flag start address is: 12 (R3)
; vs_data start address is: 8 (R2)
; tmp start address is: 4 (R1)
; v0_data start address is: 0 (R0)
0x10A8	0xB500    PUSH	(R14)
; flag end address is: 12 (R3)
; vs_data end address is: 8 (R2)
; tmp end address is: 4 (R1)
; v0_data end address is: 0 (R0)
; v0_data start address is: 0 (R0)
; tmp start address is: 4 (R1)
; vs_data start address is: 8 (R2)
; flag start address is: 12 (R3)
;adc_func.c, 221 :: 		if(*flag)
0x10AA	0x781C    LDRB	R4, [R3, #0]
; flag end address is: 12 (R3)
0x10AC	0x2C00    CMP	R4, #0
0x10AE	0xD015    BEQ	L_ControlVs45
;adc_func.c, 223 :: 		if((*v0_data)>(*tmp))
0x10B0	0x8805    LDRH	R5, [R0, #0]
0x10B2	0x880C    LDRH	R4, [R1, #0]
0x10B4	0x42A5    CMP	R5, R4
0x10B6	0xD906    BLS	L_ControlVs46
;adc_func.c, 225 :: 		*vs_data = (*vs_data) + ((*v0_data) - (*tmp));
0x10B8	0x8816    LDRH	R6, [R2, #0]
0x10BA	0x8805    LDRH	R5, [R0, #0]
0x10BC	0x880C    LDRH	R4, [R1, #0]
0x10BE	0x1B2C    SUBS	R4, R5, R4
0x10C0	0xB2A4    UXTH	R4, R4
0x10C2	0x1934    ADDS	R4, R6, R4
0x10C4	0x8014    STRH	R4, [R2, #0]
;adc_func.c, 226 :: 		}
L_ControlVs46:
;adc_func.c, 227 :: 		if((*v0_data)<(*tmp))
0x10C6	0x8805    LDRH	R5, [R0, #0]
0x10C8	0x880C    LDRH	R4, [R1, #0]
0x10CA	0x42A5    CMP	R5, R4
0x10CC	0xD206    BCS	L_ControlVs47
;adc_func.c, 229 :: 		*vs_data = (*vs_data) - ((*tmp) - (*v0_data));
0x10CE	0x8816    LDRH	R6, [R2, #0]
0x10D0	0x880D    LDRH	R5, [R1, #0]
; tmp end address is: 4 (R1)
0x10D2	0x8804    LDRH	R4, [R0, #0]
; v0_data end address is: 0 (R0)
0x10D4	0x1B2C    SUBS	R4, R5, R4
0x10D6	0xB2A4    UXTH	R4, R4
0x10D8	0x1B34    SUBS	R4, R6, R4
0x10DA	0x8014    STRH	R4, [R2, #0]
; vs_data end address is: 8 (R2)
;adc_func.c, 230 :: 		}
L_ControlVs47:
;adc_func.c, 231 :: 		}
L_ControlVs45:
;adc_func.c, 232 :: 		}
L_end_ControlVs:
0x10DC	0xBD00    POP	(R15)
; end of _ControlVs
_ReadyAlarm_f:
;func.c, 273 :: 		void ReadyAlarm_f()
0x1A54	0xB500    PUSH	(R14)
0x1A56	0xB081    SUB	SP, SP, #4
;func.c, 276 :: 		setAdcControlStatus(RESET);
0x1A58	0x2000    MOVS	R0, #0
0x1A5A	0xF7FFFC95  BL	_setAdcControlStatus+0
;func.c, 278 :: 		switch(ra_count++)
0x1A5E	0x491E    LDR	R1, [PC, #120]
0x1A60	0x8808    LDRH	R0, [R1, #0]
0x1A62	0x9000    STR	R0, [SP, #0]
0x1A64	0x4608    MOV	R0, R1
0x1A66	0x8800    LDRH	R0, [R0, #0]
0x1A68	0x3001    ADDS	R0, #1
0x1A6A	0x8008    STRH	R0, [R1, #0]
0x1A6C	0xE023    B	L_ReadyAlarm_f51
;func.c, 280 :: 		case     11:    BUZER = ON;      break;
L_ReadyAlarm_f53:
0x1A6E	0x4A1B    LDR	R2, [PC, #108]
0x1A70	0x6810    LDR	R0, [R2, #0]
0x1A72	0x2101    MOVS	R1, #1
0x1A74	0x0049    LSLS	R1, R1, BitPos(BUZER+0)
0x1A76	0x4308    ORRS	R0, R1
0x1A78	0x6010    STR	R0, [R2, #0]
0x1A7A	0xE02A    B	L_ReadyAlarm_f52
;func.c, 281 :: 		case    200:    BUZER = OFF;     break;
L_ReadyAlarm_f54:
0x1A7C	0x4A17    LDR	R2, [PC, #92]
0x1A7E	0x6810    LDR	R0, [R2, #0]
0x1A80	0x2101    MOVS	R1, #1
0x1A82	0x0049    LSLS	R1, R1, BitPos(BUZER+0)
0x1A84	0x4388    BICS	R0, R1
0x1A86	0x6010    STR	R0, [R2, #0]
0x1A88	0xE023    B	L_ReadyAlarm_f52
;func.c, 282 :: 		case    260:    BUZER = ON;      break;
L_ReadyAlarm_f55:
0x1A8A	0x4A14    LDR	R2, [PC, #80]
0x1A8C	0x6810    LDR	R0, [R2, #0]
0x1A8E	0x2101    MOVS	R1, #1
0x1A90	0x0049    LSLS	R1, R1, BitPos(BUZER+0)
0x1A92	0x4308    ORRS	R0, R1
0x1A94	0x6010    STR	R0, [R2, #0]
0x1A96	0xE01C    B	L_ReadyAlarm_f52
;func.c, 283 :: 		case    340:    BUZER = OFF;
L_ReadyAlarm_f56:
0x1A98	0x4A10    LDR	R2, [PC, #64]
0x1A9A	0x6810    LDR	R0, [R2, #0]
0x1A9C	0x2101    MOVS	R1, #1
0x1A9E	0x0049    LSLS	R1, R1, BitPos(BUZER+0)
0x1AA0	0x4388    BICS	R0, R1
0x1AA2	0x6010    STR	R0, [R2, #0]
;func.c, 284 :: 		ra_count= 0;
0x1AA4	0x2100    MOVS	R1, #0
0x1AA6	0x480C    LDR	R0, [PC, #48]
0x1AA8	0x8001    STRH	R1, [R0, #0]
;func.c, 285 :: 		resetLB();
0x1AAA	0xF7FFFBD5  BL	_resetLB+0
;func.c, 286 :: 		setState(process);
0x1AAE	0x2009    MOVS	R0, #9
0x1AB0	0xF001FB1E  BL	_setState+0
;func.c, 287 :: 		break;
0x1AB4	0xE00D    B	L_ReadyAlarm_f52
;func.c, 288 :: 		}
L_ReadyAlarm_f51:
0x1AB6	0x9900    LDR	R1, [SP, #0]
0x1AB8	0xB289    UXTH	R1, R1
0x1ABA	0x290B    CMP	R1, #11
0x1ABC	0xD0D7    BEQ	L_ReadyAlarm_f53
0x1ABE	0x29C8    CMP	R1, #200
0x1AC0	0xD0DC    BEQ	L_ReadyAlarm_f54
0x1AC2	0x20FF    MOVS	R0, #255
0x1AC4	0x3005    ADDS	R0, #5
0x1AC6	0x4281    CMP	R1, R0
0x1AC8	0xD0DF    BEQ	L_ReadyAlarm_f55
0x1ACA	0x20FF    MOVS	R0, #255
0x1ACC	0x3055    ADDS	R0, #85
0x1ACE	0x4281    CMP	R1, R0
0x1AD0	0xD0E2    BEQ	L_ReadyAlarm_f56
L_ReadyAlarm_f52:
;func.c, 289 :: 		}
L_end_ReadyAlarm_f:
0x1AD2	0xB001    ADD	SP, SP, #4
0x1AD4	0xBD00    POP	(R15)
0x1AD6	0xBF00    NOP
0x1AD8	0x01402000  	ReadyAlarm_f_ra_count_L0+0
0x1ADC	0x04144800  	BUZER+0
; end of _ReadyAlarm_f
_Process_f:
;func.c, 59 :: 		void Process_f()
0x1AE0	0xB500    PUSH	(R14)
;func.c, 61 :: 		setAdcControlStatus(SET);
0x1AE2	0x2001    MOVS	R0, #1
0x1AE4	0xF7FFFC50  BL	_setAdcControlStatus+0
;func.c, 63 :: 		LED_GREEN = ON;
0x1AE8	0x4A09    LDR	R2, [PC, #36]
0x1AEA	0x6810    LDR	R0, [R2, #0]
0x1AEC	0x2101    MOVS	R1, #1
0x1AEE	0x00C9    LSLS	R1, R1, BitPos(LED_GREEN+0)
0x1AF0	0x4308    ORRS	R0, R1
0x1AF2	0x6010    STR	R0, [R2, #0]
;func.c, 64 :: 		LED_RED   = OFF;
0x1AF4	0x4A07    LDR	R2, [PC, #28]
0x1AF6	0x6810    LDR	R0, [R2, #0]
0x1AF8	0x2101    MOVS	R1, #1
0x1AFA	0x0009    LSLS	R1, R1, BitPos(LED_RED+0)
0x1AFC	0x4388    BICS	R0, R1
0x1AFE	0x6010    STR	R0, [R2, #0]
;func.c, 65 :: 		RestartCalibration(1200);
0x1B00	0x4805    LDR	R0, [PC, #20]
0x1B02	0xF7FFFA29  BL	_RestartCalibration+0
;func.c, 66 :: 		flag_t.process_start_status = SET;
0x1B06	0x2101    MOVS	R1, #1
0x1B08	0x4804    LDR	R0, [PC, #16]
0x1B0A	0x7001    STRB	R1, [R0, #0]
;func.c, 67 :: 		}
L_end_Process_f:
0x1B0C	0xBD00    POP	(R15)
0x1B0E	0xBF00    NOP
0x1B10	0x04144800  	LED_GREEN+0
0x1B14	0x04144800  	LED_RED+0
0x1B18	0x04B00000  	#1200
0x1B1C	0x017B2000  	_flag_t+21
; end of _Process_f
_RestartCalibration:
;adc_func.c, 397 :: 		void RestartCalibration(unsigned long delay_rcal)
; delay_rcal start address is: 0 (R0)
0x0F58	0xB500    PUSH	(R14)
0x0F5A	0x4604    MOV	R4, R0
; delay_rcal end address is: 0 (R0)
; delay_rcal start address is: 16 (R4)
;adc_func.c, 401 :: 		if(!getRcalAdcStatus())
0x0F5C	0xF7FFFD4C  BL	_getRcalAdcStatus+0
0x0F60	0x2800    CMP	R0, #0
0x0F62	0xD11F    BNE	L_RestartCalibration76
;adc_func.c, 403 :: 		if(!rcal_status)
0x0F64	0x4913    LDR	R1, [PC, #76]
0x0F66	0x7809    LDRB	R1, [R1, #0]
0x0F68	0x2900    CMP	R1, #0
0x0F6A	0xD11A    BNE	L_RestartCalibration77
;adc_func.c, 405 :: 		if((wait_rcal_count++)>= (delay_rcal*100))
0x0F6C	0x4A12    LDR	R2, [PC, #72]
0x0F6E	0x6813    LDR	R3, [R2, #0]
0x0F70	0x4611    MOV	R1, R2
0x0F72	0x6809    LDR	R1, [R1, #0]
0x0F74	0x3101    ADDS	R1, #1
0x0F76	0x6011    STR	R1, [R2, #0]
0x0F78	0x2264    MOVS	R2, #100
0x0F7A	0x4611    MOV	R1, R2
0x0F7C	0x4361    MULS	R1, R4, R1
; delay_rcal end address is: 16 (R4)
0x0F7E	0x428B    CMP	R3, R1
0x0F80	0xD30F    BCC	L_RestartCalibration78
;adc_func.c, 407 :: 		wait_rcal_count = 0;
0x0F82	0x2200    MOVS	R2, #0
0x0F84	0x490C    LDR	R1, [PC, #48]
0x0F86	0x600A    STR	R2, [R1, #0]
;adc_func.c, 408 :: 		rcal_status = SET;
0x0F88	0x2201    MOVS	R2, #1
0x0F8A	0x490A    LDR	R1, [PC, #40]
0x0F8C	0x700A    STRB	R2, [R1, #0]
;adc_func.c, 409 :: 		flag_t.calibrate_status = SET;
0x0F8E	0x2201    MOVS	R2, #1
0x0F90	0x490A    LDR	R1, [PC, #40]
0x0F92	0x700A    STRB	R2, [R1, #0]
;adc_func.c, 410 :: 		flag_t.recalibrate = SET;
0x0F94	0x2201    MOVS	R2, #1
0x0F96	0x490A    LDR	R1, [PC, #40]
0x0F98	0x700A    STRB	R2, [R1, #0]
;adc_func.c, 411 :: 		resetLB();
0x0F9A	0xF000F95D  BL	_resetLB+0
;adc_func.c, 412 :: 		Recalibrate();
0x0F9E	0xF000F975  BL	_Recalibrate+0
;adc_func.c, 413 :: 		}
L_RestartCalibration78:
;adc_func.c, 414 :: 		}
L_RestartCalibration77:
;adc_func.c, 415 :: 		}
0x0FA2	0xE005    B	L_RestartCalibration79
L_RestartCalibration76:
;adc_func.c, 418 :: 		wait_rcal_count = 0;
0x0FA4	0x2200    MOVS	R2, #0
0x0FA6	0x4904    LDR	R1, [PC, #16]
0x0FA8	0x600A    STR	R2, [R1, #0]
;adc_func.c, 419 :: 		rcal_status = SET;
0x0FAA	0x2201    MOVS	R2, #1
0x0FAC	0x4901    LDR	R1, [PC, #4]
0x0FAE	0x700A    STRB	R2, [R1, #0]
;adc_func.c, 420 :: 		}
L_RestartCalibration79:
;adc_func.c, 421 :: 		}
L_end_RestartCalibration:
0x0FB0	0xBD00    POP	(R15)
0x0FB2	0xBF00    NOP
0x0FB4	0x01482000  	RestartCalibration_rcal_status_L0+0
0x0FB8	0x01442000  	RestartCalibration_wait_rcal_count_L0+0
0x0FBC	0x01722000  	_flag_t+12
0x0FC0	0x01732000  	_flag_t+13
; end of _RestartCalibration
_SensorAlarm:
;alarm_func.c, 16 :: 		void SensorAlarm()
0x23B8	0xB500    PUSH	(R14)
;alarm_func.c, 18 :: 		setAdcControlStatus(SET);
0x23BA	0x2001    MOVS	R0, #1
0x23BC	0xF7FEFFE4  BL	_setAdcControlStatus+0
;alarm_func.c, 19 :: 		setHeaterStatus(ON);
0x23C0	0x2001    MOVS	R0, #1
0x23C2	0xF7FEFDBB  BL	_setHeaterStatus+0
;alarm_func.c, 20 :: 		if(getAdcStatus())
0x23C6	0xF7FEFAD5  BL	_getAdcStatus+0
0x23CA	0x2800    CMP	R0, #0
0x23CC	0xD100    BNE	#0
0x23CE	0xE042    B	L_SensorAlarm0
;alarm_func.c, 22 :: 		LED_GREEN = ON;
0x23D0	0x4A24    LDR	R2, [PC, #144]
0x23D2	0x6810    LDR	R0, [R2, #0]
0x23D4	0x2101    MOVS	R1, #1
0x23D6	0x00C9    LSLS	R1, R1, BitPos(LED_GREEN+0)
0x23D8	0x4308    ORRS	R0, R1
0x23DA	0x6010    STR	R0, [R2, #0]
;alarm_func.c, 23 :: 		switch(analogStatusAllChanell)
0x23DC	0xE01A    B	L_SensorAlarm1
;alarm_func.c, 25 :: 		case 0b00000001:           bs_alarm_signal();              break;
L_SensorAlarm3:
0x23DE	0xF7FEFE03  BL	_bs_alarm_signal+0
0x23E2	0xE037    B	L_SensorAlarm2
;alarm_func.c, 26 :: 		case 0b00000010:           fs_alarm_signal();              break;
L_SensorAlarm4:
0x23E4	0xF7FEFDEE  BL	_fs_alarm_signal+0
0x23E8	0xE034    B	L_SensorAlarm2
;alarm_func.c, 27 :: 		case 0b00000100:           bcs_alarm_signal();             break;
L_SensorAlarm5:
0x23EA	0xF7FEFEF5  BL	_bcs_alarm_signal+0
0x23EE	0xE031    B	L_SensorAlarm2
;alarm_func.c, 28 :: 		case 0b00000011:           bs_fs_alarm_signal();           break;
L_SensorAlarm6:
0x23F0	0xF7FEFFB8  BL	_bs_fs_alarm_signal+0
0x23F4	0xE02E    B	L_SensorAlarm2
;alarm_func.c, 29 :: 		case 0b00000111:           bs_fs_bcs_alarm_signal();       break;
L_SensorAlarm7:
0x23F6	0xF7FEFF1D  BL	_bs_fs_bcs_alarm_signal+0
0x23FA	0xE02B    B	L_SensorAlarm2
;alarm_func.c, 30 :: 		case 0b00000110:           fs_bcs_alarm_signal();          break;
L_SensorAlarm8:
0x23FC	0xF7FEFD8C  BL	_fs_bcs_alarm_signal+0
0x2400	0xE028    B	L_SensorAlarm2
;alarm_func.c, 31 :: 		case 0b00000101:           bs_bcs_alarm_signal();          break;
L_SensorAlarm9:
0x2402	0xF7FEFB11  BL	_bs_bcs_alarm_signal+0
0x2406	0xE025    B	L_SensorAlarm2
;alarm_func.c, 32 :: 		case 0b00000000:           resetLB();
L_SensorAlarm10:
0x2408	0xF7FEFF26  BL	_resetLB+0
;alarm_func.c, 33 :: 		setState(process);              break;
0x240C	0x2009    MOVS	R0, #9
0x240E	0xF000FE6F  BL	_setState+0
0x2412	0xE01F    B	L_SensorAlarm2
;alarm_func.c, 34 :: 		}
L_SensorAlarm1:
0x2414	0x4814    LDR	R0, [PC, #80]
0x2416	0x7800    LDRB	R0, [R0, #0]
0x2418	0x2801    CMP	R0, #1
0x241A	0xD0E0    BEQ	L_SensorAlarm3
0x241C	0x4812    LDR	R0, [PC, #72]
0x241E	0x7800    LDRB	R0, [R0, #0]
0x2420	0x2802    CMP	R0, #2
0x2422	0xD0DF    BEQ	L_SensorAlarm4
0x2424	0x4810    LDR	R0, [PC, #64]
0x2426	0x7800    LDRB	R0, [R0, #0]
0x2428	0x2804    CMP	R0, #4
0x242A	0xD0DE    BEQ	L_SensorAlarm5
0x242C	0x480E    LDR	R0, [PC, #56]
0x242E	0x7800    LDRB	R0, [R0, #0]
0x2430	0x2803    CMP	R0, #3
0x2432	0xD0DD    BEQ	L_SensorAlarm6
0x2434	0x480C    LDR	R0, [PC, #48]
0x2436	0x7800    LDRB	R0, [R0, #0]
0x2438	0x2807    CMP	R0, #7
0x243A	0xD0DC    BEQ	L_SensorAlarm7
0x243C	0x480A    LDR	R0, [PC, #40]
0x243E	0x7800    LDRB	R0, [R0, #0]
0x2440	0x2806    CMP	R0, #6
0x2442	0xD0DB    BEQ	L_SensorAlarm8
0x2444	0x4808    LDR	R0, [PC, #32]
0x2446	0x7800    LDRB	R0, [R0, #0]
0x2448	0x2805    CMP	R0, #5
0x244A	0xD0DA    BEQ	L_SensorAlarm9
0x244C	0x4806    LDR	R0, [PC, #24]
0x244E	0x7800    LDRB	R0, [R0, #0]
0x2450	0x2800    CMP	R0, #0
0x2452	0xD0D9    BEQ	L_SensorAlarm10
L_SensorAlarm2:
;alarm_func.c, 36 :: 		}
0x2454	0xE004    B	L_SensorAlarm11
L_SensorAlarm0:
;alarm_func.c, 39 :: 		resetLB();
0x2456	0xF7FEFEFF  BL	_resetLB+0
;alarm_func.c, 40 :: 		setState(process);
0x245A	0x2009    MOVS	R0, #9
0x245C	0xF000FE48  BL	_setState+0
;alarm_func.c, 41 :: 		}
L_SensorAlarm11:
;alarm_func.c, 42 :: 		}
L_end_SensorAlarm:
0x2460	0xBD00    POP	(R15)
0x2462	0xBF00    NOP
0x2464	0x04144800  	LED_GREEN+0
0x2468	0x00382000  	_analogStatusAllChanell+0
; end of _SensorAlarm
_setHeaterStatus:
;func.c, 255 :: 		void setHeaterStatus(unsigned char state)
; state start address is: 0 (R0)
0x0F3C	0xB500    PUSH	(R14)
; state end address is: 0 (R0)
; state start address is: 0 (R0)
;func.c, 257 :: 		if(state)
0x0F3E	0x2800    CMP	R0, #0
0x0F40	0xD003    BEQ	L_setHeaterStatus49
; state end address is: 0 (R0)
;func.c, 259 :: 		flag_t.heater_status = SET;
0x0F42	0x2201    MOVS	R2, #1
0x0F44	0x4903    LDR	R1, [PC, #12]
0x0F46	0x700A    STRB	R2, [R1, #0]
;func.c, 260 :: 		}
0x0F48	0xE002    B	L_setHeaterStatus50
L_setHeaterStatus49:
;func.c, 263 :: 		flag_t.heater_status = RESET;
0x0F4A	0x2200    MOVS	R2, #0
0x0F4C	0x4901    LDR	R1, [PC, #4]
0x0F4E	0x700A    STRB	R2, [R1, #0]
;func.c, 264 :: 		}
L_setHeaterStatus50:
;func.c, 266 :: 		}
L_end_setHeaterStatus:
0x0F50	0xBD00    POP	(R15)
0x0F52	0xBF00    NOP
0x0F54	0x016C2000  	_flag_t+6
; end of _setHeaterStatus
_bs_alarm_signal:
;alarm_func.c, 69 :: 		void bs_alarm_signal()
0x0FE8	0xB500    PUSH	(R14)
;alarm_func.c, 71 :: 		WriteVarToArray(data_ar, bs_var,32);
0x0FEA	0x4806    LDR	R0, [PC, #24]
0x0FEC	0x6800    LDR	R0, [R0, #0]
0x0FEE	0x2220    MOVS	R2, #32
0x0FF0	0x4601    MOV	R1, R0
0x0FF2	0x4805    LDR	R0, [PC, #20]
0x0FF4	0xF7FFFC1A  BL	_WriteVarToArray+0
;alarm_func.c, 72 :: 		Sequence(data_ar,14,TRUE);
0x0FF8	0x2201    MOVS	R2, #1
0x0FFA	0x210E    MOVS	R1, #14
0x0FFC	0x4802    LDR	R0, [PC, #8]
0x0FFE	0xF7FFFBCD  BL	_Sequence+0
;alarm_func.c, 73 :: 		}
L_end_bs_alarm_signal:
0x1002	0xBD00    POP	(R15)
0x1004	0x00402000  	_bs_var+0
0x1008	0x01982000  	_data_ar+0
; end of _bs_alarm_signal
_WriteVarToArray:
;alarm_func.c, 156 :: 		void WriteVarToArray(unsigned char* data_ar_local, unsigned long var,unsigned char num_of_char)
; num_of_char start address is: 8 (R2)
; var start address is: 4 (R1)
; data_ar_local start address is: 0 (R0)
0x082C	0xB500    PUSH	(R14)
0x082E	0xB2D3    UXTB	R3, R2
; num_of_char end address is: 8 (R2)
; var end address is: 4 (R1)
; data_ar_local end address is: 0 (R0)
; data_ar_local start address is: 0 (R0)
; var start address is: 4 (R1)
; num_of_char start address is: 12 (R3)
;alarm_func.c, 159 :: 		for(i = 0;i < num_of_char;i++)
; i start address is: 8 (R2)
0x0830	0x2200    MOVS	R2, #0
; data_ar_local end address is: 0 (R0)
; var end address is: 4 (R1)
; num_of_char end address is: 12 (R3)
; i end address is: 8 (R2)
0x0832	0x460D    MOV	R5, R1
0x0834	0x4601    MOV	R1, R0
0x0836	0xB2D8    UXTB	R0, R3
L_WriteVarToArray24:
; i start address is: 8 (R2)
; data_ar_local start address is: 4 (R1)
; num_of_char start address is: 0 (R0)
; var start address is: 20 (R5)
; data_ar_local start address is: 4 (R1)
; data_ar_local end address is: 4 (R1)
0x0838	0x4282    CMP	R2, R0
0x083A	0xD20B    BCS	L_WriteVarToArray25
; data_ar_local end address is: 4 (R1)
;alarm_func.c, 161 :: 		data_ar_local[i] = 0;
; data_ar_local start address is: 4 (R1)
0x083C	0x188C    ADDS	R4, R1, R2
0x083E	0x2300    MOVS	R3, #0
0x0840	0x7023    STRB	R3, [R4, #0]
;alarm_func.c, 162 :: 		data_ar_local[i] = ((var&0x80000000)>>31);
0x0842	0x188C    ADDS	R4, R1, R2
0x0844	0x4B04    LDR	R3, [PC, #16]
0x0846	0x402B    ANDS	R3, R5
0x0848	0x0FDB    LSRS	R3, R3, #31
0x084A	0x7023    STRB	R3, [R4, #0]
;alarm_func.c, 163 :: 		var = var<<1;
0x084C	0x006D    LSLS	R5, R5, #1
;alarm_func.c, 159 :: 		for(i = 0;i < num_of_char;i++)
0x084E	0x3201    ADDS	R2, #1
0x0850	0xB2D2    UXTB	R2, R2
;alarm_func.c, 164 :: 		}
; num_of_char end address is: 0 (R0)
; data_ar_local end address is: 4 (R1)
; var end address is: 20 (R5)
; i end address is: 8 (R2)
0x0852	0xE7F1    B	L_WriteVarToArray24
L_WriteVarToArray25:
;alarm_func.c, 165 :: 		}
L_end_WriteVarToArray:
0x0854	0xBD00    POP	(R15)
0x0856	0xBF00    NOP
0x0858	0x00008000  	#-2147483648
; end of _WriteVarToArray
_Sequence:
;alarm_func.c, 167 :: 		void Sequence(unsigned char* seq_data,unsigned char count_digit_led,unsigned char buz_en)
; buz_en start address is: 8 (R2)
; count_digit_led start address is: 4 (R1)
; seq_data start address is: 0 (R0)
0x079C	0xB500    PUSH	(R14)
; buz_en end address is: 8 (R2)
; count_digit_led end address is: 4 (R1)
; seq_data end address is: 0 (R0)
; seq_data start address is: 0 (R0)
; count_digit_led start address is: 4 (R1)
; buz_en start address is: 8 (R2)
;alarm_func.c, 170 :: 		if((loop_count++)>9)
0x079E	0x4D1F    LDR	R5, [PC, #124]
0x07A0	0x782C    LDRB	R4, [R5, #0]
0x07A2	0x462B    MOV	R3, R5
0x07A4	0x781B    LDRB	R3, [R3, #0]
0x07A6	0x3301    ADDS	R3, #1
0x07A8	0x702B    STRB	R3, [R5, #0]
0x07AA	0x2C09    CMP	R4, #9
0x07AC	0xD935    BLS	L_Sequence27
;alarm_func.c, 172 :: 		loop_count = 0;
0x07AE	0x2400    MOVS	R4, #0
0x07B0	0x4B1A    LDR	R3, [PC, #104]
0x07B2	0x701C    STRB	R4, [R3, #0]
;alarm_func.c, 173 :: 		if( seq_data[blink_loop_led]==SET)
0x07B4	0x4B1A    LDR	R3, [PC, #104]
0x07B6	0x781B    LDRB	R3, [R3, #0]
0x07B8	0x18C3    ADDS	R3, R0, R3
; seq_data end address is: 0 (R0)
0x07BA	0x781B    LDRB	R3, [R3, #0]
0x07BC	0x2B01    CMP	R3, #1
0x07BE	0xD115    BNE	L_Sequence28
;alarm_func.c, 175 :: 		LED_RED        = ON;
0x07C0	0x4D18    LDR	R5, [PC, #96]
0x07C2	0x682B    LDR	R3, [R5, #0]
0x07C4	0x2401    MOVS	R4, #1
0x07C6	0x0024    LSLS	R4, R4, BitPos(LED_RED+0)
0x07C8	0x4323    ORRS	R3, R4
0x07CA	0x602B    STR	R3, [R5, #0]
;alarm_func.c, 176 :: 		if(buz_en)
0x07CC	0x2A00    CMP	R2, #0
0x07CE	0xD006    BEQ	L_Sequence29
; buz_en end address is: 8 (R2)
;alarm_func.c, 178 :: 		BUZER          = ON;
0x07D0	0x4D15    LDR	R5, [PC, #84]
0x07D2	0x682B    LDR	R3, [R5, #0]
0x07D4	0x2401    MOVS	R4, #1
0x07D6	0x0064    LSLS	R4, R4, BitPos(BUZER+0)
0x07D8	0x4323    ORRS	R3, R4
0x07DA	0x602B    STR	R3, [R5, #0]
;alarm_func.c, 179 :: 		}
0x07DC	0xE005    B	L_Sequence30
L_Sequence29:
;alarm_func.c, 182 :: 		BUZER          = OFF;
0x07DE	0x4D12    LDR	R5, [PC, #72]
0x07E0	0x682B    LDR	R3, [R5, #0]
0x07E2	0x2401    MOVS	R4, #1
0x07E4	0x0064    LSLS	R4, R4, BitPos(BUZER+0)
0x07E6	0x43A3    BICS	R3, R4
0x07E8	0x602B    STR	R3, [R5, #0]
;alarm_func.c, 183 :: 		}
L_Sequence30:
;alarm_func.c, 185 :: 		}
0x07EA	0xE00B    B	L_Sequence31
L_Sequence28:
;alarm_func.c, 188 :: 		LED_RED        = OFF;
0x07EC	0x4D0D    LDR	R5, [PC, #52]
0x07EE	0x682B    LDR	R3, [R5, #0]
0x07F0	0x2401    MOVS	R4, #1
0x07F2	0x0024    LSLS	R4, R4, BitPos(LED_RED+0)
0x07F4	0x43A3    BICS	R3, R4
0x07F6	0x602B    STR	R3, [R5, #0]
;alarm_func.c, 189 :: 		BUZER          = OFF;
0x07F8	0x4D0B    LDR	R5, [PC, #44]
0x07FA	0x682B    LDR	R3, [R5, #0]
0x07FC	0x2401    MOVS	R4, #1
0x07FE	0x0064    LSLS	R4, R4, BitPos(BUZER+0)
0x0800	0x43A3    BICS	R3, R4
0x0802	0x602B    STR	R3, [R5, #0]
;alarm_func.c, 190 :: 		}
L_Sequence31:
;alarm_func.c, 192 :: 		if((blink_loop_led++)>=count_digit_led)
0x0804	0x4D06    LDR	R5, [PC, #24]
0x0806	0x782C    LDRB	R4, [R5, #0]
0x0808	0x462B    MOV	R3, R5
0x080A	0x781B    LDRB	R3, [R3, #0]
0x080C	0x3301    ADDS	R3, #1
0x080E	0x702B    STRB	R3, [R5, #0]
0x0810	0x428C    CMP	R4, R1
0x0812	0xD302    BCC	L_Sequence32
; count_digit_led end address is: 4 (R1)
;alarm_func.c, 194 :: 		blink_loop_led = 0;
0x0814	0x2400    MOVS	R4, #0
0x0816	0x4B02    LDR	R3, [PC, #8]
0x0818	0x701C    STRB	R4, [R3, #0]
;alarm_func.c, 195 :: 		}
L_Sequence32:
;alarm_func.c, 196 :: 		}
L_Sequence27:
;alarm_func.c, 197 :: 		}
L_end_Sequence:
0x081A	0xBD00    POP	(R15)
0x081C	0x01502000  	Sequence_loop_count_L0+0
0x0820	0x014C2000  	Sequence_blink_loop_led_L0+0
0x0824	0x04144800  	LED_RED+0
0x0828	0x04144800  	BUZER+0
; end of _Sequence
_fs_alarm_signal:
;alarm_func.c, 75 :: 		void fs_alarm_signal()
0x0FC4	0xB500    PUSH	(R14)
;alarm_func.c, 77 :: 		WriteVarToArray(data_ar, fs_var,32);
0x0FC6	0x4806    LDR	R0, [PC, #24]
0x0FC8	0x6800    LDR	R0, [R0, #0]
0x0FCA	0x2220    MOVS	R2, #32
0x0FCC	0x4601    MOV	R1, R0
0x0FCE	0x4805    LDR	R0, [PC, #20]
0x0FD0	0xF7FFFC2C  BL	_WriteVarToArray+0
;alarm_func.c, 78 :: 		Sequence(data_ar,16,TRUE);
0x0FD4	0x2201    MOVS	R2, #1
0x0FD6	0x2110    MOVS	R1, #16
0x0FD8	0x4802    LDR	R0, [PC, #8]
0x0FDA	0xF7FFFBDF  BL	_Sequence+0
;alarm_func.c, 79 :: 		}
L_end_fs_alarm_signal:
0x0FDE	0xBD00    POP	(R15)
0x0FE0	0x00442000  	_fs_var+0
0x0FE4	0x01982000  	_data_ar+0
; end of _fs_alarm_signal
_bcs_alarm_signal:
;alarm_func.c, 81 :: 		void bcs_alarm_signal()
0x11D8	0xB500    PUSH	(R14)
;alarm_func.c, 83 :: 		WriteVarToArray(data_ar, bcs_var,32);
0x11DA	0x4806    LDR	R0, [PC, #24]
0x11DC	0x6800    LDR	R0, [R0, #0]
0x11DE	0x2220    MOVS	R2, #32
0x11E0	0x4601    MOV	R1, R0
0x11E2	0x4805    LDR	R0, [PC, #20]
0x11E4	0xF7FFFB22  BL	_WriteVarToArray+0
;alarm_func.c, 84 :: 		Sequence(data_ar,18,TRUE);
0x11E8	0x2201    MOVS	R2, #1
0x11EA	0x2112    MOVS	R1, #18
0x11EC	0x4802    LDR	R0, [PC, #8]
0x11EE	0xF7FFFAD5  BL	_Sequence+0
;alarm_func.c, 85 :: 		}
L_end_bcs_alarm_signal:
0x11F2	0xBD00    POP	(R15)
0x11F4	0x00542000  	_bcs_var+0
0x11F8	0x01982000  	_data_ar+0
; end of _bcs_alarm_signal
_bs_fs_alarm_signal:
;alarm_func.c, 87 :: 		void bs_fs_alarm_signal()
0x1364	0xB500    PUSH	(R14)
;alarm_func.c, 89 :: 		WriteVarToArray(data_ar, bs_fs_var,32);
0x1366	0x4806    LDR	R0, [PC, #24]
0x1368	0x6800    LDR	R0, [R0, #0]
0x136A	0x2220    MOVS	R2, #32
0x136C	0x4601    MOV	R1, R0
0x136E	0x4805    LDR	R0, [PC, #20]
0x1370	0xF7FFFA5C  BL	_WriteVarToArray+0
;alarm_func.c, 90 :: 		Sequence(data_ar,21,TRUE);
0x1374	0x2201    MOVS	R2, #1
0x1376	0x2115    MOVS	R1, #21
0x1378	0x4802    LDR	R0, [PC, #8]
0x137A	0xF7FFFA0F  BL	_Sequence+0
;alarm_func.c, 91 :: 		}
L_end_bs_fs_alarm_signal:
0x137E	0xBD00    POP	(R15)
0x1380	0x00582000  	_bs_fs_var+0
0x1384	0x01982000  	_data_ar+0
; end of _bs_fs_alarm_signal
_bs_fs_bcs_alarm_signal:
;alarm_func.c, 106 :: 		void bs_fs_bcs_alarm_signal()
0x1234	0xB500    PUSH	(R14)
;alarm_func.c, 108 :: 		WriteVarToArray(data_ar, bs_fs_bcs_var,32);
0x1236	0x4806    LDR	R0, [PC, #24]
0x1238	0x6800    LDR	R0, [R0, #0]
0x123A	0x2220    MOVS	R2, #32
0x123C	0x4601    MOV	R1, R0
0x123E	0x4805    LDR	R0, [PC, #20]
0x1240	0xF7FFFAF4  BL	_WriteVarToArray+0
;alarm_func.c, 109 :: 		Sequence(data_ar,30,TRUE);
0x1244	0x2201    MOVS	R2, #1
0x1246	0x211E    MOVS	R1, #30
0x1248	0x4802    LDR	R0, [PC, #8]
0x124A	0xF7FFFAA7  BL	_Sequence+0
;alarm_func.c, 110 :: 		}
L_end_bs_fs_bcs_alarm_signal:
0x124E	0xBD00    POP	(R15)
0x1250	0x00502000  	_bs_fs_bcs_var+0
0x1254	0x01982000  	_data_ar+0
; end of _bs_fs_bcs_alarm_signal
_fs_bcs_alarm_signal:
;alarm_func.c, 99 :: 		void fs_bcs_alarm_signal()
0x0F18	0xB500    PUSH	(R14)
;alarm_func.c, 101 :: 		WriteVarToArray(data_ar, fs_bcs_var,32);
0x0F1A	0x4806    LDR	R0, [PC, #24]
0x0F1C	0x6800    LDR	R0, [R0, #0]
0x0F1E	0x2220    MOVS	R2, #32
0x0F20	0x4601    MOV	R1, R0
0x0F22	0x4805    LDR	R0, [PC, #20]
0x0F24	0xF7FFFC82  BL	_WriteVarToArray+0
;alarm_func.c, 102 :: 		Sequence(data_ar,25,TRUE);
0x0F28	0x2201    MOVS	R2, #1
0x0F2A	0x2119    MOVS	R1, #25
0x0F2C	0x4802    LDR	R0, [PC, #8]
0x0F2E	0xF7FFFC35  BL	_Sequence+0
;alarm_func.c, 103 :: 		}
L_end_fs_bcs_alarm_signal:
0x0F32	0xBD00    POP	(R15)
0x0F34	0x004C2000  	_fs_bcs_var+0
0x0F38	0x01982000  	_data_ar+0
; end of _fs_bcs_alarm_signal
_bs_bcs_alarm_signal:
;alarm_func.c, 93 :: 		void bs_bcs_alarm_signal()
0x0A28	0xB500    PUSH	(R14)
;alarm_func.c, 95 :: 		WriteVarToArray(data_ar, bs_bcs_var,32);
0x0A2A	0x4806    LDR	R0, [PC, #24]
0x0A2C	0x6800    LDR	R0, [R0, #0]
0x0A2E	0x2220    MOVS	R2, #32
0x0A30	0x4601    MOV	R1, R0
0x0A32	0x4805    LDR	R0, [PC, #20]
0x0A34	0xF7FFFEFA  BL	_WriteVarToArray+0
;alarm_func.c, 96 :: 		Sequence(data_ar,23,TRUE);
0x0A38	0x2201    MOVS	R2, #1
0x0A3A	0x2117    MOVS	R1, #23
0x0A3C	0x4802    LDR	R0, [PC, #8]
0x0A3E	0xF7FFFEAD  BL	_Sequence+0
;alarm_func.c, 97 :: 		}
L_end_bs_bcs_alarm_signal:
0x0A42	0xBD00    POP	(R15)
0x0A44	0x00482000  	_bs_bcs_var+0
0x0A48	0x01982000  	_data_ar+0
; end of _bs_bcs_alarm_signal
_SensorDamage:
;alarm_func.c, 44 :: 		void SensorDamage()
0x1F60	0xB500    PUSH	(R14)
;alarm_func.c, 46 :: 		if(getDamageSensorStatus())
0x1F62	0xF7FEFD31  BL	_getDamageSensorStatus+0
0x1F66	0x2800    CMP	R0, #0
0x1F68	0xD03C    BEQ	L_SensorDamage12
;alarm_func.c, 48 :: 		switch(AnalogSensorDamageControl)
0x1F6A	0xE01A    B	L_SensorDamage13
;alarm_func.c, 50 :: 		case 0b00000001:           bs_damage_signal();              break;
L_SensorDamage15:
0x1F6C	0xF7FEFD1A  BL	_bs_damage_signal+0
0x1F70	0xE037    B	L_SensorDamage14
;alarm_func.c, 51 :: 		case 0b00000010:           fs_damage_signal();              break;
L_SensorDamage16:
0x1F72	0xF7FEFCED  BL	_fs_damage_signal+0
0x1F76	0xE034    B	L_SensorDamage14
;alarm_func.c, 52 :: 		case 0b00000100:           bcs_damage_signal();             break;
L_SensorDamage17:
0x1F78	0xF7FEFF24  BL	_bcs_damage_signal+0
0x1F7C	0xE031    B	L_SensorDamage14
;alarm_func.c, 53 :: 		case 0b00000011:           bs_fs_damage_signal();           break;
L_SensorDamage18:
0x1F7E	0xF7FEFFB3  BL	_bs_fs_damage_signal+0
0x1F82	0xE02E    B	L_SensorDamage14
;alarm_func.c, 54 :: 		case 0b00000111:           bs_fs_bcs_damage_signal();       break;
L_SensorDamage19:
0x1F84	0xF7FEFF0C  BL	_bs_fs_bcs_damage_signal+0
0x1F88	0xE02B    B	L_SensorDamage14
;alarm_func.c, 55 :: 		case 0b00000110:           fs_bcs_damage_signal();          break;
L_SensorDamage20:
0x1F8A	0xF7FEFEBB  BL	_fs_bcs_damage_signal+0
0x1F8E	0xE028    B	L_SensorDamage14
;alarm_func.c, 56 :: 		case 0b00000101:           bs_bcs_damage_signal();          break;
L_SensorDamage21:
0x1F90	0xF7FEFECA  BL	_bs_bcs_damage_signal+0
0x1F94	0xE025    B	L_SensorDamage14
;alarm_func.c, 57 :: 		case 0b00000000:           resetLB();
L_SensorDamage22:
0x1F96	0xF7FFF95F  BL	_resetLB+0
;alarm_func.c, 58 :: 		setState(control_calibration);               break;
0x1F9A	0x2001    MOVS	R0, #1
0x1F9C	0xF001F8A8  BL	_setState+0
0x1FA0	0xE01F    B	L_SensorDamage14
;alarm_func.c, 59 :: 		}
L_SensorDamage13:
0x1FA2	0x4813    LDR	R0, [PC, #76]
0x1FA4	0x7800    LDRB	R0, [R0, #0]
0x1FA6	0x2801    CMP	R0, #1
0x1FA8	0xD0E0    BEQ	L_SensorDamage15
0x1FAA	0x4811    LDR	R0, [PC, #68]
0x1FAC	0x7800    LDRB	R0, [R0, #0]
0x1FAE	0x2802    CMP	R0, #2
0x1FB0	0xD0DF    BEQ	L_SensorDamage16
0x1FB2	0x480F    LDR	R0, [PC, #60]
0x1FB4	0x7800    LDRB	R0, [R0, #0]
0x1FB6	0x2804    CMP	R0, #4
0x1FB8	0xD0DE    BEQ	L_SensorDamage17
0x1FBA	0x480D    LDR	R0, [PC, #52]
0x1FBC	0x7800    LDRB	R0, [R0, #0]
0x1FBE	0x2803    CMP	R0, #3
0x1FC0	0xD0DD    BEQ	L_SensorDamage18
0x1FC2	0x480B    LDR	R0, [PC, #44]
0x1FC4	0x7800    LDRB	R0, [R0, #0]
0x1FC6	0x2807    CMP	R0, #7
0x1FC8	0xD0DC    BEQ	L_SensorDamage19
0x1FCA	0x4809    LDR	R0, [PC, #36]
0x1FCC	0x7800    LDRB	R0, [R0, #0]
0x1FCE	0x2806    CMP	R0, #6
0x1FD0	0xD0DB    BEQ	L_SensorDamage20
0x1FD2	0x4807    LDR	R0, [PC, #28]
0x1FD4	0x7800    LDRB	R0, [R0, #0]
0x1FD6	0x2805    CMP	R0, #5
0x1FD8	0xD0DA    BEQ	L_SensorDamage21
0x1FDA	0x4805    LDR	R0, [PC, #20]
0x1FDC	0x7800    LDRB	R0, [R0, #0]
0x1FDE	0x2800    CMP	R0, #0
0x1FE0	0xD0D9    BEQ	L_SensorDamage22
L_SensorDamage14:
;alarm_func.c, 61 :: 		}
0x1FE2	0xE004    B	L_SensorDamage23
L_SensorDamage12:
;alarm_func.c, 64 :: 		resetLB();
0x1FE4	0xF7FFF938  BL	_resetLB+0
;alarm_func.c, 65 :: 		setState(control_calibration);
0x1FE8	0x2001    MOVS	R0, #1
0x1FEA	0xF001F881  BL	_setState+0
;alarm_func.c, 66 :: 		}
L_SensorDamage23:
;alarm_func.c, 67 :: 		}
L_end_SensorDamage:
0x1FEE	0xBD00    POP	(R15)
0x1FF0	0x003C2000  	_AnalogSensorDamageControl+0
; end of _SensorDamage
_bs_damage_signal:
;alarm_func.c, 113 :: 		void bs_damage_signal()
0x09A4	0xB500    PUSH	(R14)
;alarm_func.c, 115 :: 		WriteVarToArray(data_ar, bs_var,32);
0x09A6	0x4806    LDR	R0, [PC, #24]
0x09A8	0x6800    LDR	R0, [R0, #0]
0x09AA	0x2220    MOVS	R2, #32
0x09AC	0x4601    MOV	R1, R0
0x09AE	0x4805    LDR	R0, [PC, #20]
0x09B0	0xF7FFFF3C  BL	_WriteVarToArray+0
;alarm_func.c, 116 :: 		Sequence(data_ar,14,FALSE);
0x09B4	0x2200    MOVS	R2, #0
0x09B6	0x210E    MOVS	R1, #14
0x09B8	0x4802    LDR	R0, [PC, #8]
0x09BA	0xF7FFFEEF  BL	_Sequence+0
;alarm_func.c, 117 :: 		}
L_end_bs_damage_signal:
0x09BE	0xBD00    POP	(R15)
0x09C0	0x00402000  	_bs_var+0
0x09C4	0x01982000  	_data_ar+0
; end of _bs_damage_signal
_fs_damage_signal:
;alarm_func.c, 119 :: 		void fs_damage_signal()
0x0950	0xB500    PUSH	(R14)
;alarm_func.c, 121 :: 		WriteVarToArray(data_ar, fs_var,32);
0x0952	0x4806    LDR	R0, [PC, #24]
0x0954	0x6800    LDR	R0, [R0, #0]
0x0956	0x2220    MOVS	R2, #32
0x0958	0x4601    MOV	R1, R0
0x095A	0x4805    LDR	R0, [PC, #20]
0x095C	0xF7FFFF66  BL	_WriteVarToArray+0
;alarm_func.c, 122 :: 		Sequence(data_ar,16,FALSE);
0x0960	0x2200    MOVS	R2, #0
0x0962	0x2110    MOVS	R1, #16
0x0964	0x4802    LDR	R0, [PC, #8]
0x0966	0xF7FFFF19  BL	_Sequence+0
;alarm_func.c, 123 :: 		}
L_end_fs_damage_signal:
0x096A	0xBD00    POP	(R15)
0x096C	0x00442000  	_fs_var+0
0x0970	0x01982000  	_data_ar+0
; end of _fs_damage_signal
_bcs_damage_signal:
;alarm_func.c, 125 :: 		void bcs_damage_signal()
0x0DC4	0xB500    PUSH	(R14)
;alarm_func.c, 127 :: 		WriteVarToArray(data_ar, bcs_var,32);
0x0DC6	0x4806    LDR	R0, [PC, #24]
0x0DC8	0x6800    LDR	R0, [R0, #0]
0x0DCA	0x2220    MOVS	R2, #32
0x0DCC	0x4601    MOV	R1, R0
0x0DCE	0x4805    LDR	R0, [PC, #20]
0x0DD0	0xF7FFFD2C  BL	_WriteVarToArray+0
;alarm_func.c, 128 :: 		Sequence(data_ar,18,FALSE);
0x0DD4	0x2200    MOVS	R2, #0
0x0DD6	0x2112    MOVS	R1, #18
0x0DD8	0x4802    LDR	R0, [PC, #8]
0x0DDA	0xF7FFFCDF  BL	_Sequence+0
;alarm_func.c, 129 :: 		}
L_end_bcs_damage_signal:
0x0DDE	0xBD00    POP	(R15)
0x0DE0	0x00542000  	_bcs_var+0
0x0DE4	0x01982000  	_data_ar+0
; end of _bcs_damage_signal
_bs_fs_damage_signal:
;alarm_func.c, 131 :: 		void bs_fs_damage_signal()
0x0EE8	0xB500    PUSH	(R14)
;alarm_func.c, 133 :: 		WriteVarToArray(data_ar, bs_fs_var,32);
0x0EEA	0x4806    LDR	R0, [PC, #24]
0x0EEC	0x6800    LDR	R0, [R0, #0]
0x0EEE	0x2220    MOVS	R2, #32
0x0EF0	0x4601    MOV	R1, R0
0x0EF2	0x4805    LDR	R0, [PC, #20]
0x0EF4	0xF7FFFC9A  BL	_WriteVarToArray+0
;alarm_func.c, 134 :: 		Sequence(data_ar,21,FALSE);
0x0EF8	0x2200    MOVS	R2, #0
0x0EFA	0x2115    MOVS	R1, #21
0x0EFC	0x4802    LDR	R0, [PC, #8]
0x0EFE	0xF7FFFC4D  BL	_Sequence+0
;alarm_func.c, 135 :: 		}
L_end_bs_fs_damage_signal:
0x0F02	0xBD00    POP	(R15)
0x0F04	0x00582000  	_bs_fs_var+0
0x0F08	0x01982000  	_data_ar+0
; end of _bs_fs_damage_signal
_bs_fs_bcs_damage_signal:
;alarm_func.c, 150 :: 		void bs_fs_bcs_damage_signal()
0x0DA0	0xB500    PUSH	(R14)
;alarm_func.c, 152 :: 		WriteVarToArray(data_ar, bs_fs_bcs_var,32);
0x0DA2	0x4806    LDR	R0, [PC, #24]
0x0DA4	0x6800    LDR	R0, [R0, #0]
0x0DA6	0x2220    MOVS	R2, #32
0x0DA8	0x4601    MOV	R1, R0
0x0DAA	0x4805    LDR	R0, [PC, #20]
0x0DAC	0xF7FFFD3E  BL	_WriteVarToArray+0
;alarm_func.c, 153 :: 		Sequence(data_ar,30,FALSE);
0x0DB0	0x2200    MOVS	R2, #0
0x0DB2	0x211E    MOVS	R1, #30
0x0DB4	0x4802    LDR	R0, [PC, #8]
0x0DB6	0xF7FFFCF1  BL	_Sequence+0
;alarm_func.c, 154 :: 		}
L_end_bs_fs_bcs_damage_signal:
0x0DBA	0xBD00    POP	(R15)
0x0DBC	0x00502000  	_bs_fs_bcs_var+0
0x0DC0	0x01982000  	_data_ar+0
; end of _bs_fs_bcs_damage_signal
_fs_bcs_damage_signal:
;alarm_func.c, 143 :: 		void fs_bcs_damage_signal()
0x0D04	0xB500    PUSH	(R14)
;alarm_func.c, 145 :: 		WriteVarToArray(data_ar, fs_bcs_var,32);
0x0D06	0x4806    LDR	R0, [PC, #24]
0x0D08	0x6800    LDR	R0, [R0, #0]
0x0D0A	0x2220    MOVS	R2, #32
0x0D0C	0x4601    MOV	R1, R0
0x0D0E	0x4805    LDR	R0, [PC, #20]
0x0D10	0xF7FFFD8C  BL	_WriteVarToArray+0
;alarm_func.c, 146 :: 		Sequence(data_ar,25,FALSE);
0x0D14	0x2200    MOVS	R2, #0
0x0D16	0x2119    MOVS	R1, #25
0x0D18	0x4802    LDR	R0, [PC, #8]
0x0D1A	0xF7FFFD3F  BL	_Sequence+0
;alarm_func.c, 147 :: 		}
L_end_fs_bcs_damage_signal:
0x0D1E	0xBD00    POP	(R15)
0x0D20	0x004C2000  	_fs_bcs_var+0
0x0D24	0x01982000  	_data_ar+0
; end of _fs_bcs_damage_signal
_bs_bcs_damage_signal:
;alarm_func.c, 137 :: 		void bs_bcs_damage_signal()
0x0D28	0xB500    PUSH	(R14)
;alarm_func.c, 139 :: 		WriteVarToArray(data_ar, bs_bcs_var,32);
0x0D2A	0x4806    LDR	R0, [PC, #24]
0x0D2C	0x6800    LDR	R0, [R0, #0]
0x0D2E	0x2220    MOVS	R2, #32
0x0D30	0x4601    MOV	R1, R0
0x0D32	0x4805    LDR	R0, [PC, #20]
0x0D34	0xF7FFFD7A  BL	_WriteVarToArray+0
;alarm_func.c, 140 :: 		Sequence(data_ar,23,FALSE);
0x0D38	0x2200    MOVS	R2, #0
0x0D3A	0x2117    MOVS	R1, #23
0x0D3C	0x4802    LDR	R0, [PC, #8]
0x0D3E	0xF7FFFD2D  BL	_Sequence+0
;alarm_func.c, 141 :: 		}
L_end_bs_bcs_damage_signal:
0x0D42	0xBD00    POP	(R15)
0x0D44	0x00482000  	_bs_bcs_var+0
0x0D48	0x01982000  	_data_ar+0
; end of _bs_bcs_damage_signal
__Lib_System_InitialSetUpRCCRCC2:
;__Lib_System.c, 363 :: 		
0x362C	0xB500    PUSH	(R14)
0x362E	0xB081    SUB	SP, SP, #4
;__Lib_System.c, 366 :: 		
; ulRCC_CR start address is: 8 (R2)
0x3630	0x4A32    LDR	R2, [PC, #200]
;__Lib_System.c, 367 :: 		
; ulRCC_CFGR start address is: 12 (R3)
0x3632	0x4B33    LDR	R3, [PC, #204]
;__Lib_System.c, 368 :: 		
; ulRCC_CFGR2 start address is: 16 (R4)
0x3634	0x4C33    LDR	R4, [PC, #204]
;__Lib_System.c, 369 :: 		
; ulRCC_CSR start address is: 20 (R5)
0x3636	0x4D34    LDR	R5, [PC, #208]
;__Lib_System.c, 370 :: 		
; ulRCC_CR2 start address is: 24 (R6)
0x3638	0x4E34    LDR	R6, [PC, #208]
;__Lib_System.c, 371 :: 		
; Fosc_kHz start address is: 4 (R1)
0x363A	0x4935    LDR	R1, [PC, #212]
;__Lib_System.c, 376 :: 		
0x363C	0x4835    LDR	R0, [PC, #212]
0x363E	0x4281    CMP	R1, R0
0x3640	0xD906    BLS	L___Lib_System_InitialSetUpRCCRCC223
; Fosc_kHz end address is: 4 (R1)
;__Lib_System.c, 377 :: 		
0x3642	0x4835    LDR	R0, [PC, #212]
0x3644	0x6801    LDR	R1, [R0, #0]
0x3646	0x2001    MOVS	R0, #1
0x3648	0x4301    ORRS	R1, R0
0x364A	0x4833    LDR	R0, [PC, #204]
0x364C	0x6001    STR	R1, [R0, #0]
0x364E	0xE005    B	L___Lib_System_InitialSetUpRCCRCC224
L___Lib_System_InitialSetUpRCCRCC223:
;__Lib_System.c, 379 :: 		
0x3650	0x4831    LDR	R0, [PC, #196]
0x3652	0x6801    LDR	R1, [R0, #0]
0x3654	0x4831    LDR	R0, [PC, #196]
0x3656	0x4001    ANDS	R1, R0
0x3658	0x482F    LDR	R0, [PC, #188]
0x365A	0x6001    STR	R1, [R0, #0]
L___Lib_System_InitialSetUpRCCRCC224:
;__Lib_System.c, 381 :: 		
0x365C	0xF7FFFE24  BL	__Lib_System_SystemClockSetDefault+0
;__Lib_System.c, 383 :: 		
0x3660	0x482F    LDR	R0, [PC, #188]
0x3662	0x6003    STR	R3, [R0, #0]
;__Lib_System.c, 384 :: 		
0x3664	0x482F    LDR	R0, [PC, #188]
0x3666	0x6004    STR	R4, [R0, #0]
; ulRCC_CFGR2 end address is: 16 (R4)
;__Lib_System.c, 385 :: 		
0x3668	0x482F    LDR	R0, [PC, #188]
0x366A	0x4611    MOV	R1, R2
0x366C	0x4001    ANDS	R1, R0
0x366E	0x482F    LDR	R0, [PC, #188]
0x3670	0x6001    STR	R1, [R0, #0]
;__Lib_System.c, 386 :: 		
0x3672	0x482F    LDR	R0, [PC, #188]
0x3674	0x6005    STR	R5, [R0, #0]
; ulRCC_CSR end address is: 20 (R5)
;__Lib_System.c, 387 :: 		
0x3676	0x482F    LDR	R0, [PC, #188]
0x3678	0x6006    STR	R6, [R0, #0]
; ulRCC_CR2 end address is: 24 (R6)
;__Lib_System.c, 389 :: 		
0x367A	0x2001    MOVS	R0, #1
0x367C	0x4010    ANDS	R0, R2
0x367E	0x2800    CMP	R0, #0
0x3680	0xD008    BEQ	L___Lib_System_InitialSetUpRCCRCC240
; ulRCC_CR end address is: 8 (R2)
; ulRCC_CFGR end address is: 12 (R3)
;__Lib_System.c, 390 :: 		
L___Lib_System_InitialSetUpRCCRCC226:
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x3682	0x482A    LDR	R0, [PC, #168]
0x3684	0x6801    LDR	R1, [R0, #0]
0x3686	0x2002    MOVS	R0, #2
0x3688	0x4008    ANDS	R0, R1
0x368A	0x2800    CMP	R0, #0
0x368C	0xD100    BNE	L___Lib_System_InitialSetUpRCCRCC227
;__Lib_System.c, 391 :: 		
0x368E	0xE7F8    B	L___Lib_System_InitialSetUpRCCRCC226
L___Lib_System_InitialSetUpRCCRCC227:
;__Lib_System.c, 392 :: 		
; ulRCC_CFGR end address is: 12 (R3)
0x3690	0x4619    MOV	R1, R3
0x3692	0xE000    B	L___Lib_System_InitialSetUpRCCRCC225
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_InitialSetUpRCCRCC240:
;__Lib_System.c, 389 :: 		
0x3694	0x4619    MOV	R1, R3
;__Lib_System.c, 392 :: 		
L___Lib_System_InitialSetUpRCCRCC225:
;__Lib_System.c, 394 :: 		
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x3696	0x4828    LDR	R0, [PC, #160]
0x3698	0x4010    ANDS	R0, R2
0x369A	0x2800    CMP	R0, #0
0x369C	0xD00A    BEQ	L___Lib_System_InitialSetUpRCCRCC241
; ulRCC_CFGR end address is: 4 (R1)
; ulRCC_CR end address is: 8 (R2)
0x369E	0x460B    MOV	R3, R1
;__Lib_System.c, 395 :: 		
L___Lib_System_InitialSetUpRCCRCC229:
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x36A0	0x4822    LDR	R0, [PC, #136]
0x36A2	0x6801    LDR	R1, [R0, #0]
0x36A4	0x4825    LDR	R0, [PC, #148]
0x36A6	0x4008    ANDS	R0, R1
0x36A8	0x2800    CMP	R0, #0
0x36AA	0xD100    BNE	L___Lib_System_InitialSetUpRCCRCC230
;__Lib_System.c, 396 :: 		
0x36AC	0xE7F8    B	L___Lib_System_InitialSetUpRCCRCC229
L___Lib_System_InitialSetUpRCCRCC230:
;__Lib_System.c, 397 :: 		
0x36AE	0x4611    MOV	R1, R2
; ulRCC_CFGR end address is: 12 (R3)
0x36B0	0x461A    MOV	R2, R3
0x36B2	0xE002    B	L___Lib_System_InitialSetUpRCCRCC228
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_InitialSetUpRCCRCC241:
;__Lib_System.c, 394 :: 		
0x36B4	0x9100    STR	R1, [SP, #0]
0x36B6	0x4611    MOV	R1, R2
0x36B8	0x9A00    LDR	R2, [SP, #0]
;__Lib_System.c, 397 :: 		
L___Lib_System_InitialSetUpRCCRCC228:
;__Lib_System.c, 399 :: 		
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x36BA	0x4821    LDR	R0, [PC, #132]
0x36BC	0x4008    ANDS	R0, R1
; ulRCC_CR end address is: 4 (R1)
0x36BE	0x2800    CMP	R0, #0
0x36C0	0xD00E    BEQ	L___Lib_System_InitialSetUpRCCRCC242
;__Lib_System.c, 400 :: 		
0x36C2	0x481A    LDR	R0, [PC, #104]
0x36C4	0x6801    LDR	R1, [R0, #0]
0x36C6	0x481E    LDR	R0, [PC, #120]
0x36C8	0x4301    ORRS	R1, R0
0x36CA	0x4818    LDR	R0, [PC, #96]
0x36CC	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 8 (R2)
;__Lib_System.c, 401 :: 		
L___Lib_System_InitialSetUpRCCRCC232:
; ulRCC_CFGR start address is: 8 (R2)
0x36CE	0x4817    LDR	R0, [PC, #92]
0x36D0	0x6801    LDR	R1, [R0, #0]
0x36D2	0x481C    LDR	R0, [PC, #112]
0x36D4	0x4008    ANDS	R0, R1
0x36D6	0x2800    CMP	R0, #0
0x36D8	0xD100    BNE	L___Lib_System_InitialSetUpRCCRCC233
;__Lib_System.c, 402 :: 		
0x36DA	0xE7F8    B	L___Lib_System_InitialSetUpRCCRCC232
L___Lib_System_InitialSetUpRCCRCC233:
;__Lib_System.c, 403 :: 		
0x36DC	0x4613    MOV	R3, R2
0x36DE	0xE000    B	L___Lib_System_InitialSetUpRCCRCC231
; ulRCC_CFGR end address is: 8 (R2)
L___Lib_System_InitialSetUpRCCRCC242:
;__Lib_System.c, 399 :: 		
0x36E0	0x4613    MOV	R3, R2
;__Lib_System.c, 403 :: 		
L___Lib_System_InitialSetUpRCCRCC231:
;__Lib_System.c, 406 :: 		
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_InitialSetUpRCCRCC234:
; ulRCC_CFGR start address is: 12 (R3)
0x36E2	0x480F    LDR	R0, [PC, #60]
0x36E4	0x6801    LDR	R1, [R0, #0]
0x36E6	0x200C    MOVS	R0, #12
0x36E8	0x460A    MOV	R2, R1
0x36EA	0x4002    ANDS	R2, R0
0x36EC	0x0099    LSLS	R1, R3, #2
0x36EE	0x200C    MOVS	R0, #12
0x36F0	0x4008    ANDS	R0, R1
0x36F2	0x4282    CMP	R2, R0
0x36F4	0xD000    BEQ	L___Lib_System_InitialSetUpRCCRCC235
;__Lib_System.c, 407 :: 		
; ulRCC_CFGR end address is: 12 (R3)
0x36F6	0xE7F4    B	L___Lib_System_InitialSetUpRCCRCC234
L___Lib_System_InitialSetUpRCCRCC235:
;__Lib_System.c, 408 :: 		
L_end_InitialSetUpRCCRCC2:
0x36F8	0xB001    ADD	SP, SP, #4
0x36FA	0xBD00    POP	(R15)
0x36FC	0x00810100  	#16777345
0x3700	0x00020028  	#2621442
0x3704	0x00000000  	#0
0x3708	0x00000000  	#0
0x370C	0x00810000  	#129
0x3710	0xBB800000  	#48000
0x3714	0x5DC00000  	#24000
0x3718	0x20004002  	FLASH_ACR+0
0x371C	0xFFF8FFFF  	#-8
0x3720	0x10044002  	RCC_CFGR+0
0x3724	0x102C4002  	RCC_CFGR2+0
0x3728	0xFFFF000F  	#1048575
0x372C	0x10004002  	RCC_CR+0
0x3730	0x10244002  	RCC_CSR+0
0x3734	0x10344002  	RCC_CR2+0
0x3738	0x00000001  	#65536
0x373C	0x00000002  	#131072
0x3740	0x00000100  	#16777216
0x3744	0x00000200  	#33554432
; end of __Lib_System_InitialSetUpRCCRCC2
__Lib_System_SystemClockSetDefault:
;__Lib_System.c, 336 :: 		
0x32A8	0xB081    SUB	SP, SP, #4
;__Lib_System.c, 339 :: 		
0x32AA	0x4819    LDR	R0, [PC, #100]
0x32AC	0x6801    LDR	R1, [R0, #0]
0x32AE	0x2001    MOVS	R0, #1
0x32B0	0x4301    ORRS	R1, R0
0x32B2	0x4817    LDR	R0, [PC, #92]
0x32B4	0x6001    STR	R1, [R0, #0]
;__Lib_System.c, 342 :: 		
0x32B6	0x4817    LDR	R0, [PC, #92]
0x32B8	0x6801    LDR	R1, [R0, #0]
0x32BA	0x4817    LDR	R0, [PC, #92]
0x32BC	0x4001    ANDS	R1, R0
0x32BE	0x4815    LDR	R0, [PC, #84]
0x32C0	0x6001    STR	R1, [R0, #0]
;__Lib_System.c, 345 :: 		
0x32C2	0x4813    LDR	R0, [PC, #76]
0x32C4	0x6801    LDR	R1, [R0, #0]
0x32C6	0x4815    LDR	R0, [PC, #84]
0x32C8	0x4001    ANDS	R1, R0
0x32CA	0x4811    LDR	R0, [PC, #68]
0x32CC	0x6001    STR	R1, [R0, #0]
;__Lib_System.c, 348 :: 		
0x32CE	0x4810    LDR	R0, [PC, #64]
0x32D0	0x6801    LDR	R1, [R0, #0]
0x32D2	0x4813    LDR	R0, [PC, #76]
0x32D4	0x4001    ANDS	R1, R0
0x32D6	0x480E    LDR	R0, [PC, #56]
0x32D8	0x6001    STR	R1, [R0, #0]
;__Lib_System.c, 351 :: 		
0x32DA	0x480E    LDR	R0, [PC, #56]
0x32DC	0x6801    LDR	R1, [R0, #0]
0x32DE	0x4811    LDR	R0, [PC, #68]
0x32E0	0x4001    ANDS	R1, R0
0x32E2	0x480C    LDR	R0, [PC, #48]
0x32E4	0x6001    STR	R1, [R0, #0]
;__Lib_System.c, 354 :: 		
0x32E6	0x4810    LDR	R0, [PC, #64]
0x32E8	0x6801    LDR	R1, [R0, #0]
0x32EA	0x4810    LDR	R0, [PC, #64]
0x32EC	0x4001    ANDS	R1, R0
0x32EE	0x480E    LDR	R0, [PC, #56]
0x32F0	0x6001    STR	R1, [R0, #0]
;__Lib_System.c, 357 :: 		
0x32F2	0x480F    LDR	R0, [PC, #60]
0x32F4	0x6801    LDR	R1, [R0, #0]
0x32F6	0x480F    LDR	R0, [PC, #60]
0x32F8	0x4001    ANDS	R1, R0
0x32FA	0x480D    LDR	R0, [PC, #52]
0x32FC	0x6001    STR	R1, [R0, #0]
;__Lib_System.c, 360 :: 		
0x32FE	0x480E    LDR	R0, [PC, #56]
0x3300	0x6801    LDR	R1, [R0, #0]
0x3302	0x480E    LDR	R0, [PC, #56]
0x3304	0x4001    ANDS	R1, R0
0x3306	0x480C    LDR	R0, [PC, #48]
0x3308	0x6001    STR	R1, [R0, #0]
;__Lib_System.c, 361 :: 		
L_end_SystemClockSetDefault:
0x330A	0xB001    ADD	SP, SP, #4
0x330C	0x4770    BX	LR
0x330E	0xBF00    NOP
0x3310	0x10004002  	RCC_CR+0
0x3314	0x10044002  	RCC_CFGR+0
0x3318	0xB80CF8FF  	#-117458932
0x331C	0xFFFFFEF6  	#-17367041
0x3320	0xFFFFFFFB  	#-262145
0x3324	0xFFFFFFC0  	#-4128769
0x3328	0x102C4002  	RCC_CFGR2+0
0x332C	0xFFF0FFFF  	#-16
0x3330	0x10304002  	RCC_CFGR3+0
0x3334	0xFEACFFFF  	#-340
0x3338	0x10344002  	RCC_CR2+0
0x333C	0xFFFEFFFF  	#-2
; end of __Lib_System_SystemClockSetDefault
__Lib_System_InitialSetUpFosc:
;__Lib_System.c, 410 :: 		
0x3748	0xB081    SUB	SP, SP, #4
;__Lib_System.c, 411 :: 		
0x374A	0x4902    LDR	R1, [PC, #8]
0x374C	0x4802    LDR	R0, [PC, #8]
0x374E	0x6001    STR	R1, [R0, #0]
;__Lib_System.c, 412 :: 		
L_end_InitialSetUpFosc:
0x3750	0xB001    ADD	SP, SP, #4
0x3752	0x4770    BX	LR
0x3754	0xBB800000  	#48000
0x3758	0x01D42000  	___System_CLOCK_IN_KHZ+0
; end of __Lib_System_InitialSetUpFosc
___GenExcept:
;__Lib_System.c, 284 :: 		
0x356C	0xB500    PUSH	(R14)
;__Lib_System.c, 285 :: 		
L___GenExcept19:
0x356E	0xE7FE    B	L___GenExcept19
;__Lib_System.c, 286 :: 		
L_end___GenExcept:
0x3570	0xBD00    POP	(R15)
; end of ___GenExcept
0x394C	0xB500    PUSH	(R14)
0x394E	0x4E5B    LDR	R6, [PC, #364]
0x3950	0x4D5B    LDR	R5, [PC, #364]
0x3952	0x4F5C    LDR	R7, [PC, #368]
0x3954	0xF7FCFEE2  BL	1820
0x3958	0x4E5B    LDR	R6, [PC, #364]
0x395A	0x4D5C    LDR	R5, [PC, #368]
0x395C	0x4F5C    LDR	R7, [PC, #368]
0x395E	0xF7FCFEDD  BL	1820
0x3962	0x4E5C    LDR	R6, [PC, #368]
0x3964	0x4D5C    LDR	R5, [PC, #368]
0x3966	0x4F5D    LDR	R7, [PC, #372]
0x3968	0xF7FCFED8  BL	1820
0x396C	0x4E5C    LDR	R6, [PC, #368]
0x396E	0x4D5D    LDR	R5, [PC, #372]
0x3970	0x4F5D    LDR	R7, [PC, #372]
0x3972	0xF7FCFED3  BL	1820
0x3976	0x4E5D    LDR	R6, [PC, #372]
0x3978	0x4D5D    LDR	R5, [PC, #372]
0x397A	0x4F5E    LDR	R7, [PC, #376]
0x397C	0xF7FCFECE  BL	1820
0x3980	0x4E5D    LDR	R6, [PC, #372]
0x3982	0x4D5E    LDR	R5, [PC, #376]
0x3984	0x4F5E    LDR	R7, [PC, #376]
0x3986	0xF7FCFEC9  BL	1820
0x398A	0x4E5E    LDR	R6, [PC, #376]
0x398C	0x4D5E    LDR	R5, [PC, #376]
0x398E	0x4F5F    LDR	R7, [PC, #380]
0x3990	0xF7FCFEC4  BL	1820
0x3994	0x4E5E    LDR	R6, [PC, #376]
0x3996	0x4D5F    LDR	R5, [PC, #380]
0x3998	0x4F5F    LDR	R7, [PC, #380]
0x399A	0xF7FCFEBF  BL	1820
0x399E	0x4E5F    LDR	R6, [PC, #380]
0x39A0	0x4D5F    LDR	R5, [PC, #380]
0x39A2	0x4F60    LDR	R7, [PC, #384]
0x39A4	0xF7FCFEBA  BL	1820
0x39A8	0x4E5F    LDR	R6, [PC, #380]
0x39AA	0x4D60    LDR	R5, [PC, #384]
0x39AC	0x4F60    LDR	R7, [PC, #384]
0x39AE	0xF7FCFEB5  BL	1820
0x39B2	0x4E60    LDR	R6, [PC, #384]
0x39B4	0x4D60    LDR	R5, [PC, #384]
0x39B6	0x4F61    LDR	R7, [PC, #388]
0x39B8	0xF7FCFEB0  BL	1820
0x39BC	0x4E60    LDR	R6, [PC, #384]
0x39BE	0x4D61    LDR	R5, [PC, #388]
0x39C0	0x4F61    LDR	R7, [PC, #388]
0x39C2	0xF7FCFEAB  BL	1820
0x39C6	0x4E61    LDR	R6, [PC, #388]
0x39C8	0x4D61    LDR	R5, [PC, #388]
0x39CA	0x4F62    LDR	R7, [PC, #392]
0x39CC	0xF7FCFEA6  BL	1820
0x39D0	0x4E61    LDR	R6, [PC, #388]
0x39D2	0x4D62    LDR	R5, [PC, #392]
0x39D4	0x4F62    LDR	R7, [PC, #392]
0x39D6	0xF7FCFEA1  BL	1820
0x39DA	0x4E62    LDR	R6, [PC, #392]
0x39DC	0x4D62    LDR	R5, [PC, #392]
0x39DE	0x4F63    LDR	R7, [PC, #396]
0x39E0	0xF7FCFE9C  BL	1820
0x39E4	0x4E62    LDR	R6, [PC, #392]
0x39E6	0x4D63    LDR	R5, [PC, #396]
0x39E8	0x4F63    LDR	R7, [PC, #396]
0x39EA	0xF7FCFE97  BL	1820
0x39EE	0x4E63    LDR	R6, [PC, #396]
0x39F0	0x4D63    LDR	R5, [PC, #396]
0x39F2	0x4F64    LDR	R7, [PC, #400]
0x39F4	0xF7FCFE92  BL	1820
0x39F8	0x4E63    LDR	R6, [PC, #396]
0x39FA	0x4D64    LDR	R5, [PC, #400]
0x39FC	0x4F64    LDR	R7, [PC, #400]
0x39FE	0xF7FCFE8D  BL	1820
0x3A02	0x4E64    LDR	R6, [PC, #400]
0x3A04	0x4D64    LDR	R5, [PC, #400]
0x3A06	0x4F65    LDR	R7, [PC, #404]
0x3A08	0xF7FCFE88  BL	1820
0x3A0C	0x4E64    LDR	R6, [PC, #400]
0x3A0E	0x4D65    LDR	R5, [PC, #404]
0x3A10	0x4F65    LDR	R7, [PC, #404]
0x3A12	0xF7FCFE83  BL	1820
0x3A16	0x4E65    LDR	R6, [PC, #404]
0x3A18	0x4D65    LDR	R5, [PC, #404]
0x3A1A	0x4F66    LDR	R7, [PC, #408]
0x3A1C	0xF7FCFE7E  BL	1820
0x3A20	0x4E65    LDR	R6, [PC, #404]
0x3A22	0x4D66    LDR	R5, [PC, #408]
0x3A24	0x4F66    LDR	R7, [PC, #408]
0x3A26	0xF7FCFE79  BL	1820
0x3A2A	0x4E66    LDR	R6, [PC, #408]
0x3A2C	0x4D66    LDR	R5, [PC, #408]
0x3A2E	0x4F67    LDR	R7, [PC, #412]
0x3A30	0xF7FCFE74  BL	1820
0x3A34	0x4E66    LDR	R6, [PC, #408]
0x3A36	0x4D67    LDR	R5, [PC, #412]
0x3A38	0x4F67    LDR	R7, [PC, #412]
0x3A3A	0xF7FCFE6F  BL	1820
0x3A3E	0x4E67    LDR	R6, [PC, #412]
0x3A40	0x4D67    LDR	R5, [PC, #412]
0x3A42	0x4F68    LDR	R7, [PC, #416]
0x3A44	0xF7FCFE6A  BL	1820
0x3A48	0x4E67    LDR	R6, [PC, #412]
0x3A4A	0x4D68    LDR	R5, [PC, #416]
0x3A4C	0x4F68    LDR	R7, [PC, #416]
0x3A4E	0xF7FCFE65  BL	1820
0x3A52	0x4E68    LDR	R6, [PC, #416]
0x3A54	0x4D68    LDR	R5, [PC, #416]
0x3A56	0x4F69    LDR	R7, [PC, #420]
0x3A58	0xF7FCFE60  BL	1820
0x3A5C	0x4E68    LDR	R6, [PC, #416]
0x3A5E	0x4D69    LDR	R5, [PC, #420]
0x3A60	0x4F69    LDR	R7, [PC, #420]
0x3A62	0xF7FCFE5B  BL	1820
0x3A66	0x4E69    LDR	R6, [PC, #420]
0x3A68	0x4D69    LDR	R5, [PC, #420]
0x3A6A	0x4F6A    LDR	R7, [PC, #424]
0x3A6C	0xF7FCFE56  BL	1820
0x3A70	0x4E69    LDR	R6, [PC, #420]
0x3A72	0x4D6A    LDR	R5, [PC, #424]
0x3A74	0x4F6A    LDR	R7, [PC, #424]
0x3A76	0xF7FCFE51  BL	1820
0x3A7A	0x4E6A    LDR	R6, [PC, #424]
0x3A7C	0x4D6A    LDR	R5, [PC, #424]
0x3A7E	0x4F6B    LDR	R7, [PC, #428]
0x3A80	0xF7FCFE4C  BL	1820
0x3A84	0x4E6A    LDR	R6, [PC, #424]
0x3A86	0x4D6B    LDR	R5, [PC, #428]
0x3A88	0x4F6B    LDR	R7, [PC, #428]
0x3A8A	0xF7FCFE47  BL	1820
0x3A8E	0x4E6B    LDR	R6, [PC, #428]
0x3A90	0x4D6B    LDR	R5, [PC, #428]
0x3A92	0x4F6C    LDR	R7, [PC, #432]
0x3A94	0xF7FCFE42  BL	1820
0x3A98	0x4E6B    LDR	R6, [PC, #428]
0x3A9A	0x4D6C    LDR	R5, [PC, #432]
0x3A9C	0x4F6C    LDR	R7, [PC, #432]
0x3A9E	0xF7FCFE3D  BL	1820
0x3AA2	0x4E6C    LDR	R6, [PC, #432]
0x3AA4	0x4D6C    LDR	R5, [PC, #432]
0x3AA6	0x4F6D    LDR	R7, [PC, #436]
0x3AA8	0xF7FCFE38  BL	1820
0x3AAC	0x4E6C    LDR	R6, [PC, #432]
0x3AAE	0x4D6D    LDR	R5, [PC, #436]
0x3AB0	0x4F6D    LDR	R7, [PC, #436]
0x3AB2	0xF7FCFE33  BL	1820
0x3AB6	0x4E6D    LDR	R6, [PC, #436]
0x3AB8	0x4D6D    LDR	R5, [PC, #436]
0x3ABA	0xE0DB    B	#438
0x3ABC	0x00002000  	#536870912
0x3AC0	0x003A2000  	#536870970
0x3AC4	0x38180000  	#14360
0x3AC8	0x003C2000  	#536870972
0x3ACC	0x003D2000  	#536870973
0x3AD0	0x041E0000  	#1054
0x3AD4	0x00402000  	#536870976
0x3AD8	0x008D2000  	#536871053
0x3ADC	0x37C80000  	#14280
0x3AE0	0x00902000  	#536871056
0x3AE4	0x00912000  	#536871057
0x3AE8	0x39100000  	#14608
0x3AEC	0x00942000  	#536871060
0x3AF0	0x00952000  	#536871061
0x3AF4	0x390C0000  	#14604
0x3AF8	0x00982000  	#536871064
0x3AFC	0x00992000  	#536871065
0x3B00	0x391C0000  	#14620
0x3B04	0x009C2000  	#536871068
0x3B08	0x009D2000  	#536871069
0x3B0C	0x39180000  	#14616
0x3B10	0x00A02000  	#536871072
0x3B14	0x00A22000  	#536871074
0x3B18	0x38DC0000  	#14556
0x3B1C	0x00A42000  	#536871076
0x3B20	0x00A62000  	#536871078
0x3B24	0x38E40000  	#14564
0x3B28	0x00A82000  	#536871080
0x3B2C	0x00AA2000  	#536871082
0x3B30	0x38D80000  	#14552
0x3B34	0x00AC2000  	#536871084
0x3B38	0x00AE2000  	#536871086
0x3B3C	0x38D40000  	#14548
0x3B40	0x00B02000  	#536871088
0x3B44	0x00B22000  	#536871090
0x3B48	0x38E00000  	#14560
0x3B4C	0x00B42000  	#536871092
0x3B50	0x00B62000  	#536871094
0x3B54	0x38CC0000  	#14540
0x3B58	0x00B82000  	#536871096
0x3B5C	0x00BA2000  	#536871098
0x3B60	0x38D00000  	#14544
0x3B64	0x00BC2000  	#536871100
0x3B68	0x00BE2000  	#536871102
0x3B6C	0x38F80000  	#14584
0x3B70	0x00C02000  	#536871104
0x3B74	0x00C22000  	#536871106
0x3B78	0x38FC0000  	#14588
0x3B7C	0x00C42000  	#536871108
0x3B80	0x00C62000  	#536871110
0x3B84	0x39000000  	#14592
0x3B88	0x00C82000  	#536871112
0x3B8C	0x00CA2000  	#536871114
0x3B90	0x38F40000  	#14580
0x3B94	0x00CC2000  	#536871116
0x3B98	0x00CE2000  	#536871118
0x3B9C	0x38E80000  	#14568
0x3BA0	0x00D02000  	#536871120
0x3BA4	0x00D22000  	#536871122
0x3BA8	0x38EC0000  	#14572
0x3BAC	0x00D42000  	#536871124
0x3BB0	0x00D62000  	#536871126
0x3BB4	0x38F00000  	#14576
0x3BB8	0x00D82000  	#536871128
0x3BBC	0x00DA2000  	#536871130
0x3BC0	0x38C80000  	#14536
0x3BC4	0x00DC2000  	#536871132
0x3BC8	0x00E12000  	#536871137
0x3BCC	0x38880000  	#14472
0x3BD0	0x00E42000  	#536871140
0x3BD4	0x00E62000  	#536871142
0x3BD8	0x38A00000  	#14496
0x3BDC	0x00E82000  	#536871144
0x3BE0	0x00EA2000  	#536871146
0x3BE4	0x389C0000  	#14492
0x3BE8	0x00EC2000  	#536871148
0x3BEC	0x00EE2000  	#536871150
0x3BF0	0x38A80000  	#14504
0x3BF4	0x00F02000  	#536871152
0x3BF8	0x00F22000  	#536871154
0x3BFC	0x38A40000  	#14500
0x3C00	0x00F42000  	#536871156
0x3C04	0x00F62000  	#536871158
0x3C08	0x38980000  	#14488
0x3C0C	0x00F82000  	#536871160
0x3C10	0x00FA2000  	#536871162
0x3C14	0x38940000  	#14484
0x3C18	0x00FC2000  	#536871164
0x3C1C	0x00FD2000  	#536871165
0x3C20	0x392C0000  	#14636
0x3C24	0x01002000  	#536871168
0x3C28	0x01022000  	#536871170
0x3C2C	0x38BC0000  	#14524
0x3C30	0x01042000  	#536871172
0x3C34	0x01062000  	#536871174
0x3C38	0x38C00000  	#14528
0x3C3C	0x01082000  	#536871176
0x3C40	0x01092000  	#536871177
0x3C44	0x39300000  	#14640
0x3C48	0x010C2000  	#536871180
0x3C4C	0x010D2000  	#536871181
0x3C50	0x39280000  	#14632
0x3C54	0x01102000  	#536871184
0x3C58	0x01112000  	#536871185
0x3C5C	0x39200000  	#14624
0x3C60	0x01142000  	#536871188
0x3C64	0x01152000  	#536871189
0x3C68	0x39240000  	#14628
0x3C6C	0x01182000  	#536871192
0x3C70	0x01192000  	#536871193
0x3C74	0x4F2A    LDR	R7, [PC, #168]
0x3C76	0xF7FCFD51  BL	1820
0x3C7A	0x4E2A    LDR	R6, [PC, #168]
0x3C7C	0x4D2A    LDR	R5, [PC, #168]
0x3C7E	0x4F2B    LDR	R7, [PC, #172]
0x3C80	0xF7FCFD4C  BL	1820
0x3C84	0x4E2A    LDR	R6, [PC, #168]
0x3C86	0x4D2B    LDR	R5, [PC, #172]
0x3C88	0x4F2B    LDR	R7, [PC, #172]
0x3C8A	0xF7FCFD47  BL	1820
0x3C8E	0x4E2B    LDR	R6, [PC, #172]
0x3C90	0x4D2B    LDR	R5, [PC, #172]
0x3C92	0x4F2C    LDR	R7, [PC, #176]
0x3C94	0xF7FCFD42  BL	1820
0x3C98	0x4E2B    LDR	R6, [PC, #172]
0x3C9A	0x4D2C    LDR	R5, [PC, #176]
0x3C9C	0x4F2C    LDR	R7, [PC, #176]
0x3C9E	0xF7FCFD3D  BL	1820
0x3CA2	0x4E2C    LDR	R6, [PC, #176]
0x3CA4	0x4D2C    LDR	R5, [PC, #176]
0x3CA6	0x4F2D    LDR	R7, [PC, #180]
0x3CA8	0xF7FCFD38  BL	1820
0x3CAC	0x4E2C    LDR	R6, [PC, #176]
0x3CAE	0x4D2D    LDR	R5, [PC, #180]
0x3CB0	0x4F2D    LDR	R7, [PC, #180]
0x3CB2	0xF7FCFD33  BL	1820
0x3CB6	0x4E2D    LDR	R6, [PC, #180]
0x3CB8	0x4D2D    LDR	R5, [PC, #180]
0x3CBA	0x4F2E    LDR	R7, [PC, #184]
0x3CBC	0xF7FCFD2E  BL	1820
0x3CC0	0x4E2D    LDR	R6, [PC, #180]
0x3CC2	0x4D2E    LDR	R5, [PC, #184]
0x3CC4	0x4F2E    LDR	R7, [PC, #184]
0x3CC6	0xF7FCFD29  BL	1820
0x3CCA	0x4E2E    LDR	R6, [PC, #184]
0x3CCC	0x4D2E    LDR	R5, [PC, #184]
0x3CCE	0x4F2F    LDR	R7, [PC, #188]
0x3CD0	0xF7FCFD24  BL	1820
0x3CD4	0x4E2E    LDR	R6, [PC, #184]
0x3CD6	0x4D2F    LDR	R5, [PC, #188]
0x3CD8	0x4F2F    LDR	R7, [PC, #188]
0x3CDA	0xF7FCFD1F  BL	1820
0x3CDE	0x4E2F    LDR	R6, [PC, #188]
0x3CE0	0x4D2F    LDR	R5, [PC, #188]
0x3CE2	0x4F30    LDR	R7, [PC, #192]
0x3CE4	0xF7FCFD1A  BL	1820
0x3CE8	0x4E2F    LDR	R6, [PC, #188]
0x3CEA	0x4D30    LDR	R5, [PC, #192]
0x3CEC	0x4F30    LDR	R7, [PC, #192]
0x3CEE	0xF7FCFD15  BL	1820
0x3CF2	0x4E30    LDR	R6, [PC, #192]
0x3CF4	0x4D30    LDR	R5, [PC, #192]
0x3CF6	0x4F31    LDR	R7, [PC, #196]
0x3CF8	0xF7FCFD10  BL	1820
0x3CFC	0x4E30    LDR	R6, [PC, #192]
0x3CFE	0x4D31    LDR	R5, [PC, #196]
0x3D00	0x4F31    LDR	R7, [PC, #196]
0x3D02	0xF7FCFD0B  BL	1820
0x3D06	0x4E31    LDR	R6, [PC, #196]
0x3D08	0x4D31    LDR	R5, [PC, #196]
0x3D0A	0x4F32    LDR	R7, [PC, #200]
0x3D0C	0xF7FCFD06  BL	1820
0x3D10	0x4E31    LDR	R6, [PC, #196]
0x3D12	0x4D32    LDR	R5, [PC, #200]
0x3D14	0x4F32    LDR	R7, [PC, #200]
0x3D16	0xF7FCFD01  BL	1820
0x3D1A	0xBD00    POP	(R15)
0x3D1C	0x4770    BX	LR
0x3D1E	0xBF00    NOP
0x3D20	0x39340000  	#14644
0x3D24	0x011C2000  	#536871196
0x3D28	0x011D2000  	#536871197
0x3D2C	0x39440000  	#14660
0x3D30	0x01202000  	#536871200
0x3D34	0x01212000  	#536871201
0x3D38	0x39480000  	#14664
0x3D3C	0x01242000  	#536871204
0x3D40	0x01252000  	#536871205
0x3D44	0x39400000  	#14656
0x3D48	0x01282000  	#536871208
0x3D4C	0x012D2000  	#536871213
0x3D50	0x38780000  	#14456
0x3D54	0x01302000  	#536871216
0x3D58	0x01312000  	#536871217
0x3D5C	0x39380000  	#14648
0x3D60	0x01342000  	#536871220
0x3D64	0x01352000  	#536871221
0x3D68	0x393C0000  	#14652
0x3D6C	0x01382000  	#536871224
0x3D70	0x013E2000  	#536871230
0x3D74	0x38700000  	#14448
0x3D78	0x01402000  	#536871232
0x3D7C	0x01422000  	#536871234
0x3D80	0x38C40000  	#14532
0x3D84	0x01442000  	#536871236
0x3D88	0x01492000  	#536871241
0x3D8C	0x38800000  	#14464
0x3D90	0x014C2000  	#536871244
0x3D94	0x014D2000  	#536871245
0x3D98	0x39080000  	#14600
0x3D9C	0x01502000  	#536871248
0x3DA0	0x01512000  	#536871249
0x3DA4	0x39040000  	#14596
0x3DA8	0x01542000  	#536871252
0x3DAC	0x01552000  	#536871253
0x3DB0	0x39140000  	#14612
0x3DB4	0x01582000  	#536871256
0x3DB8	0x015A2000  	#536871258
0x3DBC	0x38B80000  	#14520
0x3DC0	0x015C2000  	#536871260
0x3DC4	0x015E2000  	#536871262
0x3DC8	0x38AC0000  	#14508
0x3DCC	0x01602000  	#536871264
0x3DD0	0x01622000  	#536871266
0x3DD4	0x38B00000  	#14512
0x3DD8	0x01642000  	#536871268
0x3DDC	0x01662000  	#536871270
0x3DE0	0x38B40000  	#14516
0x3F7C	0xB500    PUSH	(R14)
0x3F7E	0x4E03    LDR	R6, [PC, #12]
0x3F80	0x4D03    LDR	R5, [PC, #12]
0x3F82	0xF7FFF97B  BL	12924
0x3F86	0xBD00    POP	(R15)
0x3F88	0x4770    BX	LR
0x3F8A	0xBF00    NOP
0x3F8C	0x00002000  	#536870912
0x3F90	0x01F02000  	#536871408
_UART_INT:
;uart.c, 15 :: 		void UART_INT() iv IVT_INT_USART1 ics ICS_AUTO
0x3590	0xB500    PUSH	(R14)
0x3592	0xB410    PUSH	(R4)
;uart.c, 18 :: 		if((USART1_ISR & USART_ISR_RXNE) == USART_ISR_RXNE)
0x3594	0x4811    LDR	R0, [PC, #68]
0x3596	0x6801    LDR	R1, [R0, #0]
0x3598	0x2020    MOVS	R0, #32
0x359A	0x4008    ANDS	R0, R1
0x359C	0x2820    CMP	R0, #32
0x359E	0xD11A    BNE	L_UART_INT0
;uart.c, 20 :: 		in_data = USART1_RDR;
0x35A0	0x480F    LDR	R0, [PC, #60]
; in_data start address is: 8 (R2)
0x35A2	0x6802    LDR	R2, [R0, #0]
;uart.c, 21 :: 		if(in<INPUT_BUFFER_SIZE)
0x35A4	0x480F    LDR	R0, [PC, #60]
0x35A6	0x7800    LDRB	R0, [R0, #0]
0x35A8	0x2819    CMP	R0, #25
0x35AA	0xD20A    BCS	L_UART_INT1
;uart.c, 23 :: 		input_buffer[in++] = in_data;
0x35AC	0x480D    LDR	R0, [PC, #52]
0x35AE	0x7801    LDRB	R1, [R0, #0]
0x35B0	0x480D    LDR	R0, [PC, #52]
0x35B2	0x1840    ADDS	R0, R0, R1
0x35B4	0x7002    STRB	R2, [R0, #0]
; in_data end address is: 8 (R2)
0x35B6	0x480B    LDR	R0, [PC, #44]
0x35B8	0x7800    LDRB	R0, [R0, #0]
0x35BA	0x1C41    ADDS	R1, R0, #1
0x35BC	0x4809    LDR	R0, [PC, #36]
0x35BE	0x7001    STRB	R1, [R0, #0]
;uart.c, 24 :: 		}
0x35C0	0xE009    B	L_UART_INT2
L_UART_INT1:
;uart.c, 27 :: 		in = 0;
0x35C2	0x2100    MOVS	R1, #0
0x35C4	0x4807    LDR	R0, [PC, #28]
0x35C6	0x7001    STRB	R1, [R0, #0]
;uart.c, 28 :: 		Clear_buffer(input_buffer,INPUT_BUFFER_SIZE );
0x35C8	0x2119    MOVS	R1, #25
0x35CA	0x4807    LDR	R0, [PC, #28]
0x35CC	0xF7FFFF24  BL	_Clear_buffer+0
;uart.c, 29 :: 		flag_t.request_uart_status = SET;
0x35D0	0x2101    MOVS	R1, #1
0x35D2	0x4806    LDR	R0, [PC, #24]
0x35D4	0x7001    STRB	R1, [R0, #0]
;uart.c, 30 :: 		}
L_UART_INT2:
;uart.c, 31 :: 		}
L_UART_INT0:
;uart.c, 32 :: 		}
L_end_UART_INT:
0x35D6	0xBC10    POP	(R4)
0x35D8	0xBD00    POP	(R15)
0x35DA	0xBF00    NOP
0x35DC	0x381C4001  	1073821724
0x35E0	0x38244001  	1073821732
0x35E4	0x00392000  	uart_in+0
0x35E8	0x00642000  	_input_buffer+0
0x35EC	0x01782000  	_flag_t+18
; end of _UART_INT
_Timer3_10ms_int:
;timer_func.c, 15 :: 		void Timer3_10ms_int() iv IVT_INT_TIM3 ics ICS_AUTO
;timer_func.c, 19 :: 		TIM3_SRbits.UIF = 0;
0x3574	0x4A04    LDR	R2, [PC, #16]
0x3576	0x6810    LDR	R0, [R2, #0]
0x3578	0x2101    MOVS	R1, #1
0x357A	0x4388    BICS	R0, R1
0x357C	0x6010    STR	R0, [R2, #0]
;timer_func.c, 20 :: 		flag_t.ovf_flag = SET;
0x357E	0x2101    MOVS	R1, #1
0x3580	0x4802    LDR	R0, [PC, #8]
0x3582	0x7001    STRB	R1, [R0, #0]
;timer_func.c, 69 :: 		}
L_end_Timer3_10ms_int:
0x3584	0x4770    BX	LR
0x3586	0xBF00    NOP
0x3588	0x04104000  	#1073742864
0x358C	0x01662000  	_flag_t+0
; end of _Timer3_10ms_int
;adc_func.c,0 :: ?ICS_AnalogSensorDamageControl [1]
0x041E	0x00 ;?ICS_AnalogSensorDamageControl+0
; end of ?ICS_AnalogSensorDamageControl
;__Lib_GPIO_32F030x46_Defs.c,297 :: __GPIO_MODULE_USART1_PA9_10 [108]
0x375C	0x00000109 ;__GPIO_MODULE_USART1_PA9_10+0
0x3760	0x0000010A ;__GPIO_MODULE_USART1_PA9_10+4
0x3764	0xFFFFFFFF ;__GPIO_MODULE_USART1_PA9_10+8
0x3768	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+12
0x376C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+16
0x3770	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+20
0x3774	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+24
0x3778	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+28
0x377C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+32
0x3780	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+36
0x3784	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+40
0x3788	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+44
0x378C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+48
0x3790	0x00000818 ;__GPIO_MODULE_USART1_PA9_10+52
0x3794	0x00000818 ;__GPIO_MODULE_USART1_PA9_10+56
0x3798	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+60
0x379C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+64
0x37A0	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+68
0x37A4	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+72
0x37A8	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+76
0x37AC	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+80
0x37B0	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+84
0x37B4	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+88
0x37B8	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+92
0x37BC	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+96
0x37C0	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+100
0x37C4	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+104
; end of __GPIO_MODULE_USART1_PA9_10
;alarm_func.c,0 :: ?ICS_bs_var [4]
0x37C8	0x80000000 ;?ICS_bs_var+0
; end of ?ICS_bs_var
;alarm_func.c,0 :: ?ICS_fs_var [4]
0x37CC	0xA0000000 ;?ICS_fs_var+0
; end of ?ICS_fs_var
;alarm_func.c,0 :: ?ICS_bs_bcs_var [4]
0x37D0	0x85400000 ;?ICS_bs_bcs_var+0
; end of ?ICS_bs_bcs_var
;alarm_func.c,0 :: ?ICS_fs_bcs_var [4]
0x37D4	0xA1500000 ;?ICS_fs_bcs_var+0
; end of ?ICS_fs_bcs_var
;alarm_func.c,0 :: ?ICS_bs_fs_bcs_var [4]
0x37D8	0x850A8000 ;?ICS_bs_fs_bcs_var+0
; end of ?ICS_bs_fs_bcs_var
;alarm_func.c,0 :: ?ICS_bcs_var [4]
0x37DC	0xA8000000 ;?ICS_bcs_var+0
; end of ?ICS_bcs_var
;alarm_func.c,0 :: ?ICS_bs_fs_var [4]
0x37E0	0x85000000 ;?ICS_bs_fs_var+0
; end of ?ICS_bs_fs_var
;eeprom_func.c,0 :: ?ICS_ADDRESS [4]
0x37E4	0x08007400 ;?ICS_ADDRESS+0
; end of ?ICS_ADDRESS
;eeprom_func.c,0 :: ?ICS_ADDRESS2 [4]
0x37E8	0x08007800 ;?ICS_ADDRESS2+0
; end of ?ICS_ADDRESS2
;,0 :: _initBlock_11 [41]
; Containing: ?ICS_input_buffer [25]
;             ?ICS_request_string [8]
;             ?ICS?lstr1_uart [8]
0x37EC	0x00000000 ;_initBlock_11+0 : ?ICS_input_buffer at 0x37EC
0x37F0	0x00000000 ;_initBlock_11+4
0x37F4	0x00000000 ;_initBlock_11+8
0x37F8	0x00000000 ;_initBlock_11+12
0x37FC	0x00000000 ;_initBlock_11+16
0x3800	0x00000000 ;_initBlock_11+20
0x3804	0x71657200 ;_initBlock_11+24 : ?ICS_request_string at 0x3805
0x3808	0x74736575 ;_initBlock_11+28
0x380C	0x4E4F4300 ;_initBlock_11+32 : ?ICS?lstr1_uart at 0x380D
0x3810	0x5443454E ;_initBlock_11+36
0x3814	0x00 ;_initBlock_11+40
; end of _initBlock_11
;adc_func.c,0 :: ?ICS_BoardSensorValue [4]
0x3818	0x00000000 ;?ICS_BoardSensorValue+0
; end of ?ICS_BoardSensorValue
;adc_func.c,0 :: ?ICS_ForwardSensorValue [4]
0x381C	0x00000000 ;?ICS_ForwardSensorValue+0
; end of ?ICS_ForwardSensorValue
;adc_func.c,0 :: ?ICS_BackwardSensorValue [4]
0x3820	0x00000000 ;?ICS_BackwardSensorValue+0
; end of ?ICS_BackwardSensorValue
;adc_func.c,0 :: ?ICS_BoardSensorPPM [4]
0x3824	0x00000000 ;?ICS_BoardSensorPPM+0
; end of ?ICS_BoardSensorPPM
;adc_func.c,0 :: ?ICS_ForwardSensorPPM [4]
0x3828	0x00000000 ;?ICS_ForwardSensorPPM+0
; end of ?ICS_ForwardSensorPPM
;adc_func.c,0 :: ?ICS_BackwardSensorPPM [4]
0x382C	0x00000000 ;?ICS_BackwardSensorPPM+0
; end of ?ICS_BackwardSensorPPM
;adc_func.c,0 :: ?ICS_BoardSensorR0 [4]
0x3830	0x00000000 ;?ICS_BoardSensorR0+0
; end of ?ICS_BoardSensorR0
;adc_func.c,0 :: ?ICS_ForwardSensorR0 [4]
0x3834	0x00000000 ;?ICS_ForwardSensorR0+0
; end of ?ICS_ForwardSensorR0
;adc_func.c,0 :: ?ICS_BackwardSensorR0 [4]
0x3838	0x00000000 ;?ICS_BackwardSensorR0+0
; end of ?ICS_BackwardSensorR0
;adc_func.c,0 :: ?ICS_BoardSensorVrl [4]
0x383C	0x00000000 ;?ICS_BoardSensorVrl+0
; end of ?ICS_BoardSensorVrl
;adc_func.c,0 :: ?ICS_ForwardSensorVrl [4]
0x3840	0x00000000 ;?ICS_ForwardSensorVrl+0
; end of ?ICS_ForwardSensorVrl
;adc_func.c,0 :: ?ICS_BackwardSensorVrl [4]
0x3844	0x00000000 ;?ICS_BackwardSensorVrl+0
; end of ?ICS_BackwardSensorVrl
;adc_func.c,0 :: ?ICS_VrefIntVoltage [4]
0x3848	0x00000000 ;?ICS_VrefIntVoltage+0
; end of ?ICS_VrefIntVoltage
;adc_func.c,0 :: ?ICS_temperature [4]
0x384C	0x00000000 ;?ICS_temperature+0
; end of ?ICS_temperature
;,0 :: _initBlock_26 [2]
; Containing: ?ICS_analogStatusAllChanell [1]
;             ?ICSuart_in [1]
0x3850	0x0000 ;_initBlock_26+0 : ?ICS_analogStatusAllChanell at 0x3850 : ?ICSuart_in at 0x3851
; end of _initBlock_26
;__Lib_System.c,414 :: __Lib_System_APBAHBPrescTable [16]
0x3852	0x00000000 ;__Lib_System_APBAHBPrescTable+0
0x3856	0x04030201 ;__Lib_System_APBAHBPrescTable+4
0x385A	0x04030201 ;__Lib_System_APBAHBPrescTable+8
0x385E	0x09080706 ;__Lib_System_APBAHBPrescTable+12
; end of __Lib_System_APBAHBPrescTable
;adc_func.c,0 :: ?ICSCalibrate_board_sens_temp_L0 [4]
0x3864	0x00000000 ;?ICSCalibrate_board_sens_temp_L0+0
; end of ?ICSCalibrate_board_sens_temp_L0
;adc_func.c,0 :: ?ICSCalibrate_forward_sens_temp_L0 [4]
0x3868	0x00000000 ;?ICSCalibrate_forward_sens_temp_L0+0
; end of ?ICSCalibrate_forward_sens_temp_L0
;adc_func.c,0 :: ?ICSCalibrate_backward_sens_temp_L0 [4]
0x386C	0x00000000 ;?ICSCalibrate_backward_sens_temp_L0+0
; end of ?ICSCalibrate_backward_sens_temp_L0
;func.c,0 :: ?ICSCalibration_f_count_ready_cal_L0 [4]
0x3870	0x00000000 ;?ICSCalibration_f_count_ready_cal_L0+0
; end of ?ICSCalibration_f_count_ready_cal_L0
;adc_func.c,0 :: ?ICSCalibrate_control_rf_count_L0 [2]
0x3874	0x0000 ;?ICSCalibrate_control_rf_count_L0+0
; end of ?ICSCalibrate_control_rf_count_L0
;func.c,0 :: ?ICSPreheat_f_cycle_preheat_count_L0 [4]
0x3878	0x00000000 ;?ICSPreheat_f_cycle_preheat_count_L0+0
; end of ?ICSPreheat_f_cycle_preheat_count_L0
;func.c,0 :: ?ICSCalibration_f_count_cal_L0 [1]
0x387C	0x00 ;?ICSCalibration_f_count_cal_L0+0
; end of ?ICSCalibration_f_count_cal_L0
;adc_func.c,0 :: ?ICSRestartCalibration_wait_rcal_count_L0 [4]
0x3880	0x00000000 ;?ICSRestartCalibration_wait_rcal_count_L0+0
; end of ?ICSRestartCalibration_wait_rcal_count_L0
;adc_func.c,0 :: ?ICSRestartCalibration_rcal_status_L0 [1]
0x3884	0x00 ;?ICSRestartCalibration_rcal_status_L0+0
; end of ?ICSRestartCalibration_rcal_status_L0
;adc_func.c,0 :: ?ICSControlCalibrate_wait_count_L0 [4]
0x3888	0x00000000 ;?ICSControlCalibrate_wait_count_L0+0
; end of ?ICSControlCalibrate_wait_count_L0
;adc_func.c,0 :: ?ICSControlCalibrate_start_delay_status_L0 [1]
0x388C	0x00 ;?ICSControlCalibrate_start_delay_status_L0+0
; end of ?ICSControlCalibrate_start_delay_status_L0
;adc_func.c,0 :: ?ICSRead_ADC_chanell_temp_L0 [4]
0x3890	0x00000000 ;?ICSRead_ADC_chanell_temp_L0+0
; end of ?ICSRead_ADC_chanell_temp_L0
;adc_func.c,0 :: ?ICSControlRecalFlags_backward_cal_count1_L0 [2]
0x3894	0x0000 ;?ICSControlRecalFlags_backward_cal_count1_L0+0
; end of ?ICSControlRecalFlags_backward_cal_count1_L0
;adc_func.c,0 :: ?ICSControlRecalFlags_backward_cal_count_L0 [2]
0x3898	0x0000 ;?ICSControlRecalFlags_backward_cal_count_L0+0
; end of ?ICSControlRecalFlags_backward_cal_count_L0
;adc_func.c,0 :: ?ICSControlRecalFlags_board_cal_count1_L0 [2]
0x389C	0x0000 ;?ICSControlRecalFlags_board_cal_count1_L0+0
; end of ?ICSControlRecalFlags_board_cal_count1_L0
;adc_func.c,0 :: ?ICSControlRecalFlags_board_cal_count_L0 [2]
0x38A0	0x0000 ;?ICSControlRecalFlags_board_cal_count_L0+0
; end of ?ICSControlRecalFlags_board_cal_count_L0
;adc_func.c,0 :: ?ICSControlRecalFlags_forward_cal_count1_L0 [2]
0x38A4	0x0000 ;?ICSControlRecalFlags_forward_cal_count1_L0+0
; end of ?ICSControlRecalFlags_forward_cal_count1_L0
;adc_func.c,0 :: ?ICSControlRecalFlags_forward_cal_count_L0 [2]
0x38A8	0x0000 ;?ICSControlRecalFlags_forward_cal_count_L0+0
; end of ?ICSControlRecalFlags_forward_cal_count_L0
;timer_func.c,0 :: ?ICSTimer3_10ms_int_sec_L0 [2]
0x38AC	0x0000 ;?ICSTimer3_10ms_int_sec_L0+0
; end of ?ICSTimer3_10ms_int_sec_L0
;timer_func.c,0 :: ?ICSTimer3_10ms_int_min_L0 [2]
0x38B0	0x0000 ;?ICSTimer3_10ms_int_min_L0+0
; end of ?ICSTimer3_10ms_int_min_L0
;timer_func.c,0 :: ?ICSTimer3_10ms_int_hour_L0 [2]
0x38B4	0x0000 ;?ICSTimer3_10ms_int_hour_L0+0
; end of ?ICSTimer3_10ms_int_hour_L0
;timer_func.c,0 :: ?ICSTimer3_10ms_int_msec_L0 [2]
0x38B8	0x0000 ;?ICSTimer3_10ms_int_msec_L0+0
; end of ?ICSTimer3_10ms_int_msec_L0
;func.c,0 :: ?ICScontrolCalibration_start_control_count_L0 [2]
0x38BC	0x0000 ;?ICScontrolCalibration_start_control_count_L0+0
; end of ?ICScontrolCalibration_start_control_count_L0
;func.c,0 :: ?ICScontrolCalibration_start_buz_L0 [2]
0x38C0	0x0000 ;?ICScontrolCalibration_start_buz_L0+0
; end of ?ICScontrolCalibration_start_buz_L0
;func.c,0 :: ?ICSReadyAlarm_f_ra_count_L0 [2]
0x38C4	0x0000 ;?ICSReadyAlarm_f_ra_count_L0+0
; end of ?ICSReadyAlarm_f_ra_count_L0
;adc_func.c,0 :: ?ICSControlSensorDamage_backward_sensor_damage_count1_L0 [2]
0x38C8	0x0000 ;?ICSControlSensorDamage_backward_sensor_damage_count1_L0+0
; end of ?ICSControlSensorDamage_backward_sensor_damage_count1_L0
;adc_func.c,0 :: ?ICSControlAnalogFlags_backward_sensor_count1_L0 [2]
0x38CC	0x0000 ;?ICSControlAnalogFlags_backward_sensor_count1_L0+0
; end of ?ICSControlAnalogFlags_backward_sensor_count1_L0
;func.c,0 :: ?ICSControlDigitalFlags_start_button_status_count1_L0 [2]
0x38D0	0x0000 ;?ICSControlDigitalFlags_start_button_status_count1_L0+0
; end of ?ICSControlDigitalFlags_start_button_status_count1_L0
;adc_func.c,0 :: ?ICSControlAnalogFlags_forward_sensor_count1_L0 [2]
0x38D4	0x0000 ;?ICSControlAnalogFlags_forward_sensor_count1_L0+0
; end of ?ICSControlAnalogFlags_forward_sensor_count1_L0
;adc_func.c,0 :: ?ICSControlAnalogFlags_forward_sensor_count_L0 [2]
0x38D8	0x0000 ;?ICSControlAnalogFlags_forward_sensor_count_L0+0
; end of ?ICSControlAnalogFlags_forward_sensor_count_L0
;adc_func.c,0 :: ?ICSControlAnalogFlags_board_sensor_count_L0 [2]
0x38DC	0x0000 ;?ICSControlAnalogFlags_board_sensor_count_L0+0
; end of ?ICSControlAnalogFlags_board_sensor_count_L0
;adc_func.c,0 :: ?ICSControlAnalogFlags_backward_sensor_count_L0 [2]
0x38E0	0x0000 ;?ICSControlAnalogFlags_backward_sensor_count_L0+0
; end of ?ICSControlAnalogFlags_backward_sensor_count_L0
;adc_func.c,0 :: ?ICSControlAnalogFlags_board_sensor_count1_L0 [2]
0x38E4	0x0000 ;?ICSControlAnalogFlags_board_sensor_count1_L0+0
; end of ?ICSControlAnalogFlags_board_sensor_count1_L0
;adc_func.c,0 :: ?ICSControlSensorDamage_forward_sensor_damage_count_L0 [2]
0x38E8	0x0000 ;?ICSControlSensorDamage_forward_sensor_damage_count_L0+0
; end of ?ICSControlSensorDamage_forward_sensor_damage_count_L0
;adc_func.c,0 :: ?ICSControlSensorDamage_forward_sensor_damage_count1_L0 [2]
0x38EC	0x0000 ;?ICSControlSensorDamage_forward_sensor_damage_count1_L0+0
; end of ?ICSControlSensorDamage_forward_sensor_damage_count1_L0
;adc_func.c,0 :: ?ICSControlSensorDamage_backward_sensor_damage_count_L0 [2]
0x38F0	0x0000 ;?ICSControlSensorDamage_backward_sensor_damage_count_L0+0
; end of ?ICSControlSensorDamage_backward_sensor_damage_count_L0
;adc_func.c,0 :: ?ICSControlSensorDamage_board_sensor_damage_count1_L0 [2]
0x38F4	0x0000 ;?ICSControlSensorDamage_board_sensor_damage_count1_L0+0
; end of ?ICSControlSensorDamage_board_sensor_damage_count1_L0
;func.c,0 :: ?ICSControlDigitalFlags_start_button_status_count2_L0 [2]
0x38F8	0x0000 ;?ICSControlDigitalFlags_start_button_status_count2_L0+0
; end of ?ICSControlDigitalFlags_start_button_status_count2_L0
;func.c,0 :: ?ICSControlDigitalFlags_start_count_L0 [2]
0x38FC	0x0000 ;?ICSControlDigitalFlags_start_count_L0+0
; end of ?ICSControlDigitalFlags_start_count_L0
;adc_func.c,0 :: ?ICSControlSensorDamage_board_sensor_damage_count_L0 [2]
0x3900	0x0000 ;?ICSControlSensorDamage_board_sensor_damage_count_L0+0
; end of ?ICSControlSensorDamage_board_sensor_damage_count_L0
;alarm_func.c,0 :: ?ICSSequence_loop_count_L0 [1]
0x3904	0x00 ;?ICSSequence_loop_count_L0+0
; end of ?ICSSequence_loop_count_L0
;alarm_func.c,0 :: ?ICSSequence_blink_loop_led_L0 [1]
0x3908	0x00 ;?ICSSequence_blink_loop_led_L0+0
; end of ?ICSSequence_blink_loop_led_L0
;uart.c,0 :: ?ICSWriteDataToAndroid_out_count_L0 [1]
0x390C	0x00 ;?ICSWriteDataToAndroid_out_count_L0+0
; end of ?ICSWriteDataToAndroid_out_count_L0
;uart.c,0 :: ?ICSControlInputData_gn_L0 [1]
0x3910	0x00 ;?ICSControlInputData_gn_L0+0
; end of ?ICSControlInputData_gn_L0
;timer_func.c,0 :: ?ICSTimer3_10ms_int_tim_count_L0 [1]
0x3914	0x00 ;?ICSTimer3_10ms_int_tim_count_L0+0
; end of ?ICSTimer3_10ms_int_tim_count_L0
;adc_func.c,0 :: ?ICSReadAnalogInput_read_count_L0 [1]
0x3918	0x00 ;?ICSReadAnalogInput_read_count_L0+0
; end of ?ICSReadAnalogInput_read_count_L0
;adc_func.c,0 :: ?ICSReadAnalogInput_rai_count_L0 [1]
0x391C	0x00 ;?ICSReadAnalogInput_rai_count_L0+0
; end of ?ICSReadAnalogInput_rai_count_L0
;eeprom_func.c,0 :: ?ICSFLASH_ReadOutProtection_status_L0 [1]
0x3920	0x00 ;?ICSFLASH_ReadOutProtection_status_L0+0
; end of ?ICSFLASH_ReadOutProtection_status_L0
;led_buz_func.c,0 :: ?ICSBlink_buz_func_after_count_s_L0 [1]
0x3924	0x00 ;?ICSBlink_buz_func_after_count_s_L0+0
; end of ?ICSBlink_buz_func_after_count_s_L0
;func.c,0 :: ?ICSErrorCalibration_state_error_L0 [1]
0x3928	0x00 ;?ICSErrorCalibration_state_error_L0+0
; end of ?ICSErrorCalibration_state_error_L0
;func.c,0 :: ?ICScontrolCalibration_start_control_cal_L0 [1]
0x392C	0x00 ;?ICScontrolCalibration_start_control_cal_L0+0
; end of ?ICScontrolCalibration_start_control_cal_L0
;func.c,0 :: ?ICSErrorCalibration_count_error_cal_L0 [1]
0x3930	0x00 ;?ICSErrorCalibration_count_error_cal_L0+0
; end of ?ICSErrorCalibration_count_error_cal_L0
;led_buz_func.c,0 :: ?ICSBlink_buz_func_blink_loop_L0 [1]
0x3934	0x00 ;?ICSBlink_buz_func_blink_loop_L0+0
; end of ?ICSBlink_buz_func_blink_loop_L0
;func.c,0 :: ?ICSCalibration_f_state_cal_L0 [1]
0x3938	0x00 ;?ICSCalibration_f_state_cal_L0+0
; end of ?ICSCalibration_f_state_cal_L0
;func.c,0 :: ?ICSCalibration_f_count_ready_L0 [1]
0x393C	0x32 ;?ICSCalibration_f_count_ready_L0+0
; end of ?ICSCalibration_f_count_ready_L0
;func.c,0 :: ?ICSPreheat_f_preheat_count_loop_L0 [1]
0x3940	0x00 ;?ICSPreheat_f_preheat_count_loop_L0+0
; end of ?ICSPreheat_f_preheat_count_loop_L0
;led_buz_func.c,0 :: ?ICSBlink_buz_func_count_loop_L0 [1]
0x3944	0x00 ;?ICSBlink_buz_func_count_loop_L0+0
; end of ?ICSBlink_buz_func_count_loop_L0
;led_buz_func.c,0 :: ?ICSBlink_buz_func_end_buzzer_L0 [1]
0x3948	0x00 ;?ICSBlink_buz_func_end_buzzer_L0+0
; end of ?ICSBlink_buz_func_end_buzzer_L0
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x00C0      [36]    _FLASH_Lock
0x00E4      [80]    _FLASH_WaitForLastOperation
0x0134      [64]    __Lib_FLASH_32F0x_32_FLASH_GetStatus
0x0174     [188]    __Lib_GPIO_32F0xx_GPIO_Config_Pin_Alternate_Function
0x0230      [12]    _Get_Fosc_kHz
0x023C      [20]    __Lib_MathDouble___Fp
0x0250     [240]    _FLASH_ReadOutProtection
0x0340      [48]    _FLASH_GetReadOutProtectionStatus
0x0370     [112]    _Init_flash_cal
0x03E0      [40]    __Lib_FLASH_32F0x_32_FLASH_ClearFlags
0x0408      [22]    __Lib_FLASH_32F0x_32_FLASH_WaitForLastOperation
0x0420      [28]    _strlen
0x043C     [124]    __Lib_MathDouble___Float_Aux
0x04B8     [156]    _Read_ADC_sample
0x0554     [170]    __Add_FP
0x0600      [68]    _map
0x0644      [28]    __SignedIntegralToFloat
0x0660      [40]    _strchr
0x0688      [60]    _strncmp
0x06C4      [86]    __Compare_FP
0x071C      [18]    ___CC2DW
0x0730      [40]    __Lib_UART_1_UARTx_Write
0x0758      [68]    __Div_32x32_U
0x079C     [144]    _Sequence
0x082C      [48]    _WriteVarToArray
0x085C     [176]    _RCC_GetClocksFrequency
0x090C      [68]    _GPIO_Alternate_Function_Enable
0x0950      [36]    _fs_damage_signal
0x0974      [48]    _getAdcStatus
0x09A4      [36]    _bs_damage_signal
0x09C8      [48]    _getDamageSensorStatus
0x09F8      [48]    _getRcalAdcStatus
0x0A28      [36]    _bs_bcs_alarm_signal
0x0A4C     [146]    _ControlDigit_ms
0x0AE0     [370]    _two_level_comparator_ms
0x0C54     [176]    _ComputeTemperature
0x0D04      [36]    _fs_bcs_damage_signal
0x0D28      [36]    _bs_bcs_damage_signal
0x0D4C      [84]    _ReadVrefIntValue
0x0DA0      [36]    _bs_fs_bcs_damage_signal
0x0DC4      [36]    _bcs_damage_signal
0x0DE8     [256]    _one_level_comparator_ms
0x0EE8      [36]    _bs_fs_damage_signal
0x0F0C      [12]    _getAdcControlStatus
0x0F18      [36]    _fs_bcs_alarm_signal
0x0F3C      [28]    _setHeaterStatus
0x0F58     [108]    _RestartCalibration
0x0FC4      [36]    _fs_alarm_signal
0x0FE8      [36]    _bs_alarm_signal
0x100C     [156]    _save_data_to_eeprom
0x10A8      [54]    _ControlVs
0x10E0     [228]    _Blink_buz_func
0x11C4      [20]    _SystemReset
0x11D8      [36]    _bcs_alarm_signal
0x11FC      [56]    _ControlData
0x1234      [36]    _bs_fs_bcs_alarm_signal
0x1258      [52]    _resetLB
0x128C      [10]    _Recalibrate
0x1298     [176]    _read_data_from_eeprom
0x1348      [26]    _ControlReadOutProtection
0x1364      [36]    _bs_fs_alarm_signal
0x1388      [28]    _setAdcControlStatus
0x13A4     [108]    _FLASH_Write_HalfWord
0x1410     [128]    _FLASH_ErasePage
0x1490      [48]    _FLASH_Unlock
0x14C0      [46]    __FloatToUnsignedIntegral
0x14F0      [32]    _NegativeLimiter
0x1510      [62]    _strstr
0x1550      [12]    _GPIO_Analog_Input
0x155C     [408]    __Lib_ADC_32F0x_10ch_ADCx_Init
0x16F4     [144]    _GPIO_Clk_Enable
0x1784      [20]    _read_from_eeprom_one
0x1798      [12]    _DisableInterrupts
0x17A4     [276]    __Lib_UART_1_UARTx_Init_Advanced
0x18B8     [130]    __Mul_FP
0x193C      [18]    __UnsignedIntegralToFloat
0x1950     [162]    __Div_FP
0x19F4      [42]    _Read_ADC_chanell
0x1A20      [16]    _UART1_Write
0x1A30      [14]    __Sub_FP
0x1A40      [20]    _calculatePPM
0x1A54     [140]    _ReadyAlarm_f
0x1AE0      [64]    _Process_f
0x1B20     [124]    _save_data_to_eeprom_one
0x1B9C     [580]    _Calibrate
0x1DE0     [340]    _ControlAnalogFlags
0x1F34      [44]    _ADC1_Init
0x1F60     [148]    _SensorDamage
0x1FF4     [724]    _GPIO_Config
0x22C8     [240]    _ADC_Set_Input_Channel
0x23B8     [180]    _SensorAlarm
0x246C      [32]    _UART1_Init_Advanced
0x248C      [60]    _NVIC_IntEnable
0x24C8     [328]    _ControlSensorDamage
0x2610     [212]    _controlCalibration
0x26E4     [116]    _ErrorCalibration
0x2758      [96]    _ControlInputData
0x27B8      [16]    _clear_WDT
0x27C8     [120]    _ControlCalibrate
0x2840     [188]    _ControlRecalFlags
0x28FC     [556]    _WriteDataToAndroid
0x2B28      [72]    _StartSound
0x2B70      [96]    _ControlDigitalFlags
0x2BD0     [804]    _ReadAnalogInput
0x2EF4     [336]    _Calibration_f
0x3044     [172]    _Preheat_f
0x30F0      [12]    _setState
0x30FC     [236]    _Init_flags
0x31E8      [64]    _InitVar
0x3228      [72]    _Init_pin
0x3270      [12]    _EnableInterrupts
0x327C      [42]    ___FillZeros
0x32A8     [152]    __Lib_System_SystemClockSetDefault
0x3340     [216]    _globalProcess
0x3418      [34]    _Clear_buffer
0x343C      [88]    _WDT_Init
0x3494      [88]    _StartTimer3_10ms
0x34EC      [48]    _InitUartModuleBTU
0x351C      [48]    _ChekTrue
0x354C      [32]    _Init_ADC_chanell
0x356C       [6]    ___GenExcept
0x3574      [28]    _Timer3_10ms_int
0x3590      [96]    _UART_INT
0x35F0      [60]    _main
0x362C     [284]    __Lib_System_InitialSetUpRCCRCC2
0x3748      [20]    __Lib_System_InitialSetUpFosc
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x20000000       [4]    _BoardSensorValue
0x20000004       [4]    _ForwardSensorValue
0x20000008       [4]    _BackwardSensorValue
0x2000000C       [4]    _BoardSensorPPM
0x20000010       [4]    _ForwardSensorPPM
0x20000014       [4]    _BackwardSensorPPM
0x20000018       [4]    _BoardSensorR0
0x2000001C       [4]    _ForwardSensorR0
0x20000020       [4]    _BackwardSensorR0
0x20000024       [4]    _BoardSensorVrl
0x20000028       [4]    _ForwardSensorVrl
0x2000002C       [4]    _BackwardSensorVrl
0x20000030       [4]    _VrefIntVoltage
0x20000034       [4]    _temperature
0x20000038       [1]    _analogStatusAllChanell
0x20000039       [1]    uart_in
0x2000003A       [1]    _state
0x2000003C       [1]    _AnalogSensorDamageControl
0x20000040       [4]    _bs_var
0x20000044       [4]    _fs_var
0x20000048       [4]    _bs_bcs_var
0x2000004C       [4]    _fs_bcs_var
0x20000050       [4]    _bs_fs_bcs_var
0x20000054       [4]    _bcs_var
0x20000058       [4]    _bs_fs_var
0x2000005C       [4]    _ADDRESS
0x20000060       [4]    _ADDRESS2
0x20000064      [25]    _input_buffer
0x2000007D       [8]    _request_string
0x20000085       [8]    ?lstr1_uart
0x20000090       [1]    ControlInputData_gn_L0
0x20000094       [1]    WriteDataToAndroid_out_count_L0
0x20000098       [1]    ReadAnalogInput_rai_count_L0
0x2000009C       [1]    ReadAnalogInput_read_count_L0
0x200000A0       [2]    ControlAnalogFlags_board_sensor_count_L0
0x200000A4       [2]    ControlAnalogFlags_board_sensor_count1_L0
0x200000A8       [2]    ControlAnalogFlags_forward_sensor_count_L0
0x200000AC       [2]    ControlAnalogFlags_forward_sensor_count1_L0
0x200000B0       [2]    ControlAnalogFlags_backward_sensor_count_L0
0x200000B4       [2]    ControlAnalogFlags_backward_sensor_count1_L0
0x200000B8       [2]    ControlDigitalFlags_start_button_status_count1_L0
0x200000BC       [2]    ControlDigitalFlags_start_button_status_count2_L0
0x200000C0       [2]    ControlDigitalFlags_start_count_L0
0x200000C4       [2]    ControlSensorDamage_board_sensor_damage_count_L0
0x200000C8       [2]    ControlSensorDamage_board_sensor_damage_count1_L0
0x200000CC       [2]    ControlSensorDamage_forward_sensor_damage_count_L0
0x200000D0       [2]    ControlSensorDamage_forward_sensor_damage_count1_L0
0x200000D4       [2]    ControlSensorDamage_backward_sensor_damage_count_L0
0x200000D8       [2]    ControlSensorDamage_backward_sensor_damage_count1_L0
0x200000DC       [4]    ControlCalibrate_wait_count_L0
0x200000E0       [1]    ControlCalibrate_start_delay_status_L0
0x200000E4       [2]    ControlRecalFlags_board_cal_count_L0
0x200000E8       [2]    ControlRecalFlags_board_cal_count1_L0
0x200000EC       [2]    ControlRecalFlags_forward_cal_count_L0
0x200000F0       [2]    ControlRecalFlags_forward_cal_count1_L0
0x200000F4       [2]    ControlRecalFlags_backward_cal_count_L0
0x200000F8       [2]    ControlRecalFlags_backward_cal_count1_L0
0x200000FC       [1]    controlCalibration_start_control_cal_L0
0x20000100       [2]    controlCalibration_start_control_count_L0
0x20000104       [2]    controlCalibration_start_buz_L0
0x20000108       [1]    ErrorCalibration_count_error_cal_L0
0x2000010C       [1]    ErrorCalibration_state_error_L0
0x20000110       [1]    FLASH_ReadOutProtection_status_L0
0x20000114       [1]    Blink_buz_func_after_count_s_L0
0x20000118       [1]    Blink_buz_func_blink_loop_L0
0x2000011C       [1]    Blink_buz_func_count_loop_L0
0x20000120       [1]    Blink_buz_func_end_buzzer_L0
0x20000124       [1]    Preheat_f_preheat_count_loop_L0
0x20000128       [4]    Preheat_f_cycle_preheat_count_L0
0x2000012C       [1]    Calibration_f_count_cal_L0
0x20000130       [1]    Calibration_f_state_cal_L0
0x20000134       [1]    Calibration_f_count_ready_L0
0x20000138       [4]    Calibration_f_count_ready_cal_L0
0x2000013C       [2]    Calibrate_control_rf_count_L0
0x20000140       [2]    ReadyAlarm_f_ra_count_L0
0x20000144       [4]    RestartCalibration_wait_rcal_count_L0
0x20000148       [1]    RestartCalibration_rcal_status_L0
0x2000014C       [1]    Sequence_blink_loop_led_L0
0x20000150       [1]    Sequence_loop_count_L0
0x20000154       [1]    Timer3_10ms_int_tim_count_L0
0x20000158       [2]    Timer3_10ms_int_msec_L0
0x2000015C       [2]    Timer3_10ms_int_sec_L0
0x20000160       [2]    Timer3_10ms_int_min_L0
0x20000164       [2]    Timer3_10ms_int_hour_L0
0x20000166      [24]    _flag_t
0x2000017E      [26]    _parameters_t
0x20000198      [32]    _data_ar
0x200001B8      [22]    _out_buffer
0x200001D0       [4]    _ADC_Get_Sample_Ptr
0x200001D4       [4]    ___System_CLOCK_IN_KHZ
0x200001D8       [4]    _UART_Wr_Ptr
0x200001DC       [4]    _UART_Rd_Ptr
0x200001E0       [4]    _UART_Rdy_Ptr
0x200001E4       [4]    _UART_Tx_Idle_Ptr
0x200001E8       [2]    Blink_buz_func_s_blink_mode_L0
0x200001EC       [2]    Calibrate_cal_count_L0
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x041E       [1]    ?ICS_AnalogSensorDamageControl
0x375C     [108]    __GPIO_MODULE_USART1_PA9_10
0x37C8       [4]    ?ICS_bs_var
0x37CC       [4]    ?ICS_fs_var
0x37D0       [4]    ?ICS_bs_bcs_var
0x37D4       [4]    ?ICS_fs_bcs_var
0x37D8       [4]    ?ICS_bs_fs_bcs_var
0x37DC       [4]    ?ICS_bcs_var
0x37E0       [4]    ?ICS_bs_fs_var
0x37E4       [4]    ?ICS_ADDRESS
0x37E8       [4]    ?ICS_ADDRESS2
0x37EC      [25]    ?ICS_input_buffer
0x3805       [8]    ?ICS_request_string
0x380D       [8]    ?ICS?lstr1_uart
0x3818       [4]    ?ICS_BoardSensorValue
0x381C       [4]    ?ICS_ForwardSensorValue
0x3820       [4]    ?ICS_BackwardSensorValue
0x3824       [4]    ?ICS_BoardSensorPPM
0x3828       [4]    ?ICS_ForwardSensorPPM
0x382C       [4]    ?ICS_BackwardSensorPPM
0x3830       [4]    ?ICS_BoardSensorR0
0x3834       [4]    ?ICS_ForwardSensorR0
0x3838       [4]    ?ICS_BackwardSensorR0
0x383C       [4]    ?ICS_BoardSensorVrl
0x3840       [4]    ?ICS_ForwardSensorVrl
0x3844       [4]    ?ICS_BackwardSensorVrl
0x3848       [4]    ?ICS_VrefIntVoltage
0x384C       [4]    ?ICS_temperature
0x3850       [1]    ?ICS_analogStatusAllChanell
0x3851       [1]    ?ICSuart_in
0x3852      [16]    __Lib_System_APBAHBPrescTable
0x3864       [4]    ?ICSCalibrate_board_sens_temp_L0
0x3868       [4]    ?ICSCalibrate_forward_sens_temp_L0
0x386C       [4]    ?ICSCalibrate_backward_sens_temp_L0
0x3870       [4]    ?ICSCalibration_f_count_ready_cal_L0
0x3874       [2]    ?ICSCalibrate_control_rf_count_L0
0x3878       [4]    ?ICSPreheat_f_cycle_preheat_count_L0
0x387C       [1]    ?ICSCalibration_f_count_cal_L0
0x3880       [4]    ?ICSRestartCalibration_wait_rcal_count_L0
0x3884       [1]    ?ICSRestartCalibration_rcal_status_L0
0x3888       [4]    ?ICSControlCalibrate_wait_count_L0
0x388C       [1]    ?ICSControlCalibrate_start_delay_status_L0
0x3890       [4]    ?ICSRead_ADC_chanell_temp_L0
0x3894       [2]    ?ICSControlRecalFlags_backward_cal_count1_L0
0x3898       [2]    ?ICSControlRecalFlags_backward_cal_count_L0
0x389C       [2]    ?ICSControlRecalFlags_board_cal_count1_L0
0x38A0       [2]    ?ICSControlRecalFlags_board_cal_count_L0
0x38A4       [2]    ?ICSControlRecalFlags_forward_cal_count1_L0
0x38A8       [2]    ?ICSControlRecalFlags_forward_cal_count_L0
0x38AC       [2]    ?ICSTimer3_10ms_int_sec_L0
0x38B0       [2]    ?ICSTimer3_10ms_int_min_L0
0x38B4       [2]    ?ICSTimer3_10ms_int_hour_L0
0x38B8       [2]    ?ICSTimer3_10ms_int_msec_L0
0x38BC       [2]    ?ICScontrolCalibration_start_control_count_L0
0x38C0       [2]    ?ICScontrolCalibration_start_buz_L0
0x38C4       [2]    ?ICSReadyAlarm_f_ra_count_L0
0x38C8       [2]    ?ICSControlSensorDamage_backward_sensor_damage_count1_L0
0x38CC       [2]    ?ICSControlAnalogFlags_backward_sensor_count1_L0
0x38D0       [2]    ?ICSControlDigitalFlags_start_button_status_count1_L0
0x38D4       [2]    ?ICSControlAnalogFlags_forward_sensor_count1_L0
0x38D8       [2]    ?ICSControlAnalogFlags_forward_sensor_count_L0
0x38DC       [2]    ?ICSControlAnalogFlags_board_sensor_count_L0
0x38E0       [2]    ?ICSControlAnalogFlags_backward_sensor_count_L0
0x38E4       [2]    ?ICSControlAnalogFlags_board_sensor_count1_L0
0x38E8       [2]    ?ICSControlSensorDamage_forward_sensor_damage_count_L0
0x38EC       [2]    ?ICSControlSensorDamage_forward_sensor_damage_count1_L0
0x38F0       [2]    ?ICSControlSensorDamage_backward_sensor_damage_count_L0
0x38F4       [2]    ?ICSControlSensorDamage_board_sensor_damage_count1_L0
0x38F8       [2]    ?ICSControlDigitalFlags_start_button_status_count2_L0
0x38FC       [2]    ?ICSControlDigitalFlags_start_count_L0
0x3900       [2]    ?ICSControlSensorDamage_board_sensor_damage_count_L0
0x3904       [1]    ?ICSSequence_loop_count_L0
0x3908       [1]    ?ICSSequence_blink_loop_led_L0
0x390C       [1]    ?ICSWriteDataToAndroid_out_count_L0
0x3910       [1]    ?ICSControlInputData_gn_L0
0x3914       [1]    ?ICSTimer3_10ms_int_tim_count_L0
0x3918       [1]    ?ICSReadAnalogInput_read_count_L0
0x391C       [1]    ?ICSReadAnalogInput_rai_count_L0
0x3920       [1]    ?ICSFLASH_ReadOutProtection_status_L0
0x3924       [1]    ?ICSBlink_buz_func_after_count_s_L0
0x3928       [1]    ?ICSErrorCalibration_state_error_L0
0x392C       [1]    ?ICScontrolCalibration_start_control_cal_L0
0x3930       [1]    ?ICSErrorCalibration_count_error_cal_L0
0x3934       [1]    ?ICSBlink_buz_func_blink_loop_L0
0x3938       [1]    ?ICSCalibration_f_state_cal_L0
0x393C       [1]    ?ICSCalibration_f_count_ready_L0
0x3940       [1]    ?ICSPreheat_f_preheat_count_loop_L0
0x3944       [1]    ?ICSBlink_buz_func_count_loop_L0
0x3948       [1]    ?ICSBlink_buz_func_end_buzzer_L0
